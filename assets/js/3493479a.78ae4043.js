"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6146],{3905:function(e,r,a){a.d(r,{Zo:function(){return u},kt:function(){return d}});var t=a(67294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=t.createContext({}),l=function(e){var r=t.useContext(c),a=r;return e&&(a="function"==typeof e?e(r):s(s({},r),e)),a},u=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(a),d=n,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return a?t.createElement(h,s(s({ref:r},u),{},{components:a})):t.createElement(h,s({ref:r},u))}));function d(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var c in r)hasOwnProperty.call(r,c)&&(o[c]=r[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},35659:function(e,r,a){a.r(r),a.d(r,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var t=a(83117),n=a(80102),i=(a(67294),a(3905)),s=["components"],o={sidebar_label:"hasura migrate create",sidebar_position:24,description:"Create files required for a migration using the Hasura CLI",keywords:["hasura","docs","CLI","hasura migrate create"]},c="Hasura CLI: hasura migrate create",l={unversionedId:"graphql/core/hasura-cli/hasura_migrate_create",id:"graphql/core/hasura-cli/hasura_migrate_create",title:"Hasura CLI: hasura migrate create",description:"Create files required for a migration using the Hasura CLI",source:"@site/docs/graphql/core/hasura-cli/hasura_migrate_create.mdx",sourceDirName:"graphql/core/hasura-cli",slug:"/graphql/core/hasura-cli/hasura_migrate_create",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_migrate_create",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/hasura-cli/hasura_migrate_create.mdx",tags:[],version:"current",sidebarPosition:24,frontMatter:{sidebar_label:"hasura migrate create",sidebar_position:24,description:"Create files required for a migration using the Hasura CLI",keywords:["hasura","docs","CLI","hasura migrate create"]},sidebar:"docsSidebar",previous:{title:"hasura migrate apply",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_migrate_apply"},next:{title:"hasura migrate delete",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_migrate_delete"}},u={},p=[{value:"Synopsis",id:"synopsis",level:2},{value:"Examples",id:"examples",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2},{value:"SEE ALSO",id:"see-also",level:2}],m={toc:p};function d(e){var r=e.components,a=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},m,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hasura-cli-hasura-migrate-create"},"Hasura CLI: hasura migrate create"),(0,i.kt)("p",null,"Create files required for a migration."),(0,i.kt)("h2",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml")," files required for a migration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"hasura migrate create [migration-name] [flags]\n")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# Setup migration files for the first time by introspecting a server:\nhasura migrate create "init" --from-server\n\n# Use with admin secret:\nhasura migrate create --admin-secret "<admin-secret>"\n\n# Setup migration files from an instance mentioned by the flag:\nhasura migrate create init --from-server --endpoint "<endpoint>"\n\n# Take pg_dump of schema and hasura metadata from server while specifying the schemas to include\nhasura migrate create init --from-server --schema myschema1,myschema2\n\n# Take pg_dump from server and save it as a migration and specify the schemas to include\nhasura migrate create init --sql-from-server --schema myschema1,myschema2\n\n# Create up and down SQL migrations, providing contents as flags\nhasura migrate create migration-name --up-sql "CREATE TABLE article(id serial NOT NULL, title text NOT NULL, content text NOT NULL);"  --down-sql "DROP TABLE article;"\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    --down-sql string             sql string/query that is to be used to create a down migration\n    --from-server                 take pg_dump of schema (default: public) and Hasura metadata from the server\n-h, --help                        help for create\n    --metadata-from-file string   path to a hasura metadata file to be used for up actions\n    --metadata-from-server        take metadata from the server and write it as an up migration file\n    --schema strings              name of Postgres schema to export as a migration. provide multiple schemas with a comma separated list e.g. --schema public,user (default [public])\n    --sql-from-file string        path to an SQL file which contains the SQL statements\n    --sql-from-server             take pg_dump from the server (default: public) and save it as a migration\n    --up-sql string               sql string/query that is to be used to create an up migration\n")),(0,i.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'--admin-secret string            admin secret for Hasura GraphQL engine (env "HASURA_GRAPHQL_ADMIN_SECRET")\n--certificate-authority string   path to a cert file for the certificate authority (env "HASURA_GRAPHQL_CERTIFICATE_AUTHORITY")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env "HASURA_GRAPHQL_DISABLE_INTERACTIVE")\n--endpoint string                http(s) endpoint for Hasura GraphQL engine (env "HASURA_GRAPHQL_ENDPOINT")\n--envfile string                 .env filename to load ENV vars from (default ".env")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env "HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default "INFO")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n')),(0,i.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/hasura-cli/hasura_migrate"},"hasura migrate"),"- Manage migrations on the database")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Auto generated by spf13/cobra")))}d.isMDXComponent=!0}}]);