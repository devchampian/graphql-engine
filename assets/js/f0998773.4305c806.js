"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9537],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return N}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),N=r,A=u["".concat(i,".").concat(N)]||u[N]||p[N]||o;return n?a.createElement(A,l(l({ref:t},c),{},{components:n})):a.createElement(A,l({ref:t},c))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70746:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return N},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),l=["components"],s={description:"Sample Docker Setup for MSSQL Read Replica",keywords:["hasura","docs","cloud","read replicas","mssql"],sidebar_position:2,sidebar_label:"MS SQL Server Read Replicas - Docker Setup"},i="MS SQL Server Read Replicas - Docker Setup",d={unversionedId:"graphql/core/guides/mssql/mssql-read-replicas-docker-setup",id:"graphql/core/guides/mssql/mssql-read-replicas-docker-setup",title:"MS SQL Server Read Replicas - Docker Setup",description:"Sample Docker Setup for MSSQL Read Replica",source:"@site/docs/graphql/core/guides/mssql/mssql-read-replicas-docker-setup.mdx",sourceDirName:"graphql/core/guides/mssql",slug:"/graphql/core/guides/mssql/mssql-read-replicas-docker-setup",permalink:"/docs/latest/graphql/core/guides/mssql/mssql-read-replicas-docker-setup",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/guides/mssql/mssql-read-replicas-docker-setup.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Sample Docker Setup for MSSQL Read Replica",keywords:["hasura","docs","cloud","read replicas","mssql"],sidebar_position:2,sidebar_label:"MS SQL Server Read Replicas - Docker Setup"},sidebar:"docsSidebar",previous:{title:"MS SQL Server basics",permalink:"/docs/latest/graphql/core/guides/mssql/index"},next:{title:"Postgres basics",permalink:"/docs/latest/graphql/core/guides/postgres/index"}},c={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Set up the Docker image with SQL Server",id:"step-1-set-up-the-docker-image-with-sql-server",level:2},{value:"Create Docker file",id:"create-docker-file",level:3},{value:"Build Docker image",id:"build-docker-image",level:3},{value:"Step 2: Create the Docker configuration file with 3 SQL nodes",id:"step-2-create-the-docker-configuration-file-with-3-sql-nodes",level:2},{value:"Step 3: Figure the IP address of the gateway to connect",id:"step-3-figure-the-ip-address-of-the-gateway-to-connect",level:2},{value:"Step 4: Create certificates",id:"step-4-create-certificates",level:2},{value:"Step 5: Create the endpoint for Always On and setup health monitoring for the server",id:"step-5-create-the-endpoint-for-always-on-and-setup-health-monitoring-for-the-server",level:2},{value:"Step 6: Create Always on Availability Group",id:"step-6-create-always-on-availability-group",level:2},{value:"Step 7: Join the secondary nodes to Availability Group (AG)",id:"step-7-join-the-secondary-nodes-to-availability-group-ag",level:2},{value:"Step 8: Setting up the primary node with some values and database",id:"step-8-setting-up-the-primary-node-with-some-values-and-database",level:2},{value:"Step 9: Setup Routing List URL",id:"step-9-setup-routing-list-url",level:2},{value:"Step 10: Create the listener URL",id:"step-10-create-the-listener-url",level:2}],u={toc:p};function N(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ms-sql-server-read-replicas---docker-setup"},"MS SQL Server Read Replicas - Docker Setup"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The following tutorial helps setting up a Docker container setup for the\nMS SQL Server Read Replicas."),(0,o.kt)("p",null,"This tutorial was highly influenced by ",(0,o.kt)("a",{parentName:"p",href:"https://dbtut.com/index.php/2020/06/09/sql-server-2019-alwayson-availability-group-on-docker-containers"},"this blog")),(0,o.kt)("h2",{id:"step-1-set-up-the-docker-image-with-sql-server"},"Step 1: Set up the Docker image with SQL Server"),(0,o.kt)("h3",{id:"create-docker-file"},"Create Docker file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-docker"},'FROM ubuntu:18.04\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update\nRUN apt-get install apt-utils -y\n\nRUN apt-get install sudo wget curl gnupg gnupg1 gnupg2 -y\nRUN apt-get install software-properties-common systemd vim -y\nRUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n\nRUN add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)"\nRUN apt-get update\nRUN apt-get install -y mssql-server\n\nRUN /opt/mssql/bin/mssql-conf set hadr.hadrenabled  1\nRUN /opt/mssql/bin/mssql-conf set sqlagent.enabled true\n\nEXPOSE 1433\n\nENTRYPOINT /opt/mssql/bin/sqlservr\n')),(0,o.kt)("h3",{id:"build-docker-image"},"Build Docker image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t sqlag:ha .\n")),(0,o.kt)("h2",{id:"step-2-create-the-docker-configuration-file-with-3-sql-nodes"},"Step 2: Create the Docker configuration file with 3 SQL nodes"),(0,o.kt)("p",null,"Create three nodes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"sqlNode1"),": Primary server"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"sqlNode2")," and ",(0,o.kt)("strong",{parentName:"li"},"sqlNode3"),": Secondary Servers")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  db1:\n     container_name: sqlNode1\n     image: sqlag:ha\n     hostname: sqlNode1\n     domainname: lab.local\n     environment:\n        SA_PASSWORD: "Password1"\n        ACCEPT_EULA: "Y"\n     ports:\n     - "1501:1433"\n     extra_hosts:\n        sqlNode2.labl.local: "172.16.238.22"\n        sqlNode3.labl.local: "172.16.238.23"\n     networks:\n        internal:\n                 ipv4_address: 172.16.238.21\n\n  db2:\n     container_name: sqlNode2\n     image: sqlag:ha\n     hostname: sqlNode2\n     domainname: lab.local\n     environment:\n        SA_PASSWORD: "Password1"\n        ACCEPT_EULA: "Y"\n     ports:\n     - "1502:1433"\n     extra_hosts:\n        sqlNode1.lab.local: "172.16.238.21"\n        sqlNode3.lab.local: "172.16.238.23"\n     networks:\n        internal:\n                 ipv4_address: 172.16.238.22\n\n  db3:\n     container_name: sqlNode3\n     image: sqlag:ha\n     hostname: sqlNode3\n     domainname: lab.local\n     environment:\n        SA_PASSWORD: "Password1"\n        ACCEPT_EULA: "Y"\n     ports:\n     - "1503:1433"\n     extra_hosts:\n        sqlNode1.lab.local: "172.16.238.21"\n        sqlNode2.lab.local: "172.16.238.22"\n     networks:\n        internal:\n                 ipv4_address: 172.16.238.23\n\nnetworks:\ninternal:\n  ipam:\n        driver: default\n        config:\n            - subnet: 172.16.238.0/24\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,o.kt)("h2",{id:"step-3-figure-the-ip-address-of-the-gateway-to-connect"},"Step 3: Figure the IP address of the gateway to connect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> ifconfig\n\nbr-7d762e376414: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n     inet 172.16.238.1  netmask 255.255.255.0  broadcast 172.16.238.255\n     inet6 fe80::42:b0ff:fe8b:57ef  prefixlen 64  scopeid 0x20<link>\n     ether 02:42:b0:8b:57:ef  txqueuelen 0  (Ethernet)\n     RX packets 20022  bytes 2157399 (2.1 MB)\n     RX errors 0  dropped 0  overruns 0  frame 0\n     TX packets 36571  bytes 8365375 (8.3 MB)\n     TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n")),(0,o.kt)("p",null,"From above, you can notice that the docker gateway is ",(0,o.kt)("inlineCode",{parentName:"p"},"172.16.238.1"),",\nOnce the docker container is up, we can connect to the sql server via\n",(0,o.kt)("inlineCode",{parentName:"p"},"172.16.238.1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"1501"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"1502")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"1503")," ports."),(0,o.kt)("p",null,"Test it out by trying to connect to any one of the node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$> sqlcmd -S 172.16.238.1,1501 -U SA -P "Password1"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"1> SELECT name FROM master.dbo.sysdatabases;\n2> GO\n")),(0,o.kt)("h2",{id:"step-4-create-certificates"},"Step 4: Create certificates"),(0,o.kt)("p",null,"Follow the steps to create certificates on the nodes:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create certificate for primary node, store it in a temp location in\nthe node"),(0,o.kt)("li",{parentName:"ol"},"Copy the certificate from the primary node to local system"),(0,o.kt)("li",{parentName:"ol"},"Copy the certificate from local system to secondary nodes"),(0,o.kt)("li",{parentName:"ol"},"Apply the certificate on secondary nodes")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"USE master\nGO\n\nCREATE LOGIN dbm_login WITH PASSWORD = 'Password1';\nCREATE USER dbm_user FOR LOGIN dbm_login;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Password1';\ngo\nCREATE CERTIFICATE dbm_certificate WITH SUBJECT = 'dbm';\nBACKUP CERTIFICATE dbm_certificate\nTO FILE = '/tmp/dbm_certificate.cer'\nWITH PRIVATE KEY (\n      FILE = '/tmp/dbm_certificate.pvk',\n      ENCRYPTION BY PASSWORD = 'Password1'\n   );\nGO\n")),(0,o.kt)("p",null,"Store the above sql file in ",(0,o.kt)("inlineCode",{parentName:"p"},"1-primary-setup-certificate.sql"),". Then apply the\ntransaction to primary node via the following."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sqlcmd -S 172.16.238.1,1501 -U SA -P "Password1" -i 1-primary-setup-certificate.sql\n')),(0,o.kt)("p",null,"Please note that for the rest of the setup, it would be easier if we do\nthe following: 1. Create a sql file with the transaction 2. Run the\ntransaction via sqlcmd"),(0,o.kt)("p",null,"Now, let's copy the certificate from primary and paste them into the\nsecondary nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker cp sqlNode1:/tmp/dbm_certificate.cer .\ndocker cp sqlNode1:/tmp/dbm_certificate.pvk .\ndocker cp dbm_certificate.cer sqlNode2:/tmp/\ndocker cp dbm_certificate.pvk sqlNode2:/tmp/\ndocker cp dbm_certificate.cer sqlNode3:/tmp/\ndocker cp dbm_certificate.pvk sqlNode3:/tmp/\n")),(0,o.kt)("p",null,"Connect to all the secondary nodes and execute the following SQL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE LOGIN dbm_login WITH PASSWORD = 'Password1';\nCREATE USER dbm_user FOR LOGIN dbm_login;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Password1';\n-- ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = 'Password1';\nGO\nCREATE CERTIFICATE dbm_certificate\n   AUTHORIZATION dbm_user\n   FROM FILE = '/tmp/dbm_certificate.cer'\n   WITH PRIVATE KEY (\n   FILE = '/tmp/dbm_certificate.pvk',\n   DECRYPTION BY PASSWORD = 'Password1'\n);\n")),(0,o.kt)("h2",{id:"step-5-create-the-endpoint-for-always-on-and-setup-health-monitoring-for-the-server"},"Step 5: Create the endpoint for Always On and setup health monitoring for the server"),(0,o.kt)("p",null,"Execute the following SQL first on primary node and then on the\nsecondary nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ENDPOINT [Hadr_endpoint]\n   AS TCP (LISTENER_IP = (0.0.0.0), LISTENER_PORT = 5022)\n   FOR DATA_MIRRORING (\n      ROLE = ALL,\n      AUTHENTICATION = CERTIFICATE dbm_certificate,\n      ENCRYPTION = REQUIRED ALGORITHM AES\n      );\nALTER ENDPOINT [Hadr_endpoint] STATE = STARTED;\nGRANT CONNECT ON ENDPOINT::[Hadr_endpoint] TO [dbm_login];\n")),(0,o.kt)("p",null,"To enable the health monitoring, execute the SQL on all nodes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER EVENT SESSION  AlwaysOn_health ON SERVER WITH (STARTUP_STATE=ON);\nGO\n")),(0,o.kt)("h2",{id:"step-6-create-always-on-availability-group"},"Step 6: Create Always on Availability Group"),(0,o.kt)("p",null,"Execute the following SQL on primary node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE AVAILABILITY GROUP [AG1]\n      WITH (CLUSTER_TYPE = NONE)\n      FOR REPLICA ON\n      N'sqlNode1'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode1:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               ),\n      N'sqlNode2'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode2:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               ),\n      N'sqlNode3'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode3:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               );\nGO\n\nALTER AVAILABILITY GROUP [ag1] GRANT CREATE ANY DATABASE;\nGO\n")),(0,o.kt)("h2",{id:"step-7-join-the-secondary-nodes-to-availability-group-ag"},"Step 7: Join the secondary nodes to Availability Group (AG)"),(0,o.kt)("p",null,"Execute the following SQL only on secondary nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER AVAILABILITY GROUP [ag1] JOIN WITH (CLUSTER_TYPE = NONE);\nALTER AVAILABILITY GROUP [ag1] GRANT CREATE ANY DATABASE;\nGO\n")),(0,o.kt)("h2",{id:"step-8-setting-up-the-primary-node-with-some-values-and-database"},"Step 8: Setting up the primary node with some values and database"),(0,o.kt)("p",null,"In this step, we'll create a database on primary and add some data to it\nand verify that the replication happens on secondary nodes successfully."),(0,o.kt)("p",null,"Execute the following SQL on primary node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE agtestdb;\nGO\nALTER DATABASE agtestdb SET RECOVERY FULL;\nGO\nBACKUP DATABASE agtestdb TO DISK = '/var/opt/mssql/data/agtestdb.bak';\nGO\n\nALTER AVAILABILITY GROUP [ag1] ADD DATABASE [agtestdb];\nGO\n\nUSE agtestdb;\nGO\n\nCREATE TABLE inventory (id INT, name NVARCHAR(50), quantity INT);\nGO\nINSERT INTO inventory VALUES (1, 'banana', 150); INSERT INTO Inventory VALUES (2, 'orange', 154);\nGO\n")),(0,o.kt)("p",null,"Connect to secondary replica and see the database and values. Test if\nthe database has been replicated on secondary nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\u279c sqlcmd -S 172.16.238.1,1502 -U SA -P "Password1"\n1> SELECT name FROM master.dbo.sysdatabases;\n2> GO\n')),(0,o.kt)("h2",{id:"step-9-setup-routing-list-url"},"Step 9: Setup Routing List URL"),(0,o.kt)("p",null,"In this step, we'll do the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Change the secondary replicas to allow read only connections"),(0,o.kt)("li",{parentName:"ol"},"Create read only routing url for each nodes"),(0,o.kt)("li",{parentName:"ol"},"Create the routing list")),(0,o.kt)("p",null,"Note that, the read only routing URL should be such that you are able to\nconnect from outside the container, so it's better to provide the actual\nIP of the node."),(0,o.kt)("p",null,"Execute the following SQL on primary node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode1' WITH\n   (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode1' WITH\n   (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.21:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH  \n   (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH  \n   (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.22:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.23:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON  \nN'sqlNode1' WITH\n   (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode3','sqlNode2'),'sqlnode1')));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH  \n   (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode1','sqlNode3'),'sqlnode2')));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode1','sqlNode2'),'sqlnode3')));\n\nGO\n")),(0,o.kt)("h2",{id:"step-10-create-the-listener-url"},"Step 10: Create the listener URL"),(0,o.kt)("p",null,"This listener URL is used to route the Read only request to one of the\nRead only secondary replicas"),(0,o.kt)("p",null,"Execute the following SQL on primary node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER AVAILABILITY GROUP [AG1] REMOVE LISTENER 'AGListener';\nGO\n\nALTER AVAILABILITY GROUP [AG1]\n      ADD LISTENER 'AGListener' ( WITH IP ( (N'172.16.238.21', N'255.255.255.0') ) , PORT = 1434 );\nGO\n")),(0,o.kt)("p",null,"Let's go ahead and test, if we could connect to our secondary replicas\nusing the listener URL. Note that, since we marked read replicas as\n",(0,o.kt)("inlineCode",{parentName:"p"},"ReadOnly"),", we will only be able to connect to secondary nodes only when\nwe provide the ApplicationIntent as ",(0,o.kt)("inlineCode",{parentName:"p"},"ReadOnly")),(0,o.kt)("p",null,"Let's first connect to out primary replica"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'sqlcmd -S 172.16.238.21,1434 -U SA  -d agtestdb -P "Password1"\n')),(0,o.kt)("p",null,"Now let's connect to secondary replicas using ReadIntent Only"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'sqlcmd -S 172.16.238.21,1434 -U SA  -d agtestdb -P "Password1" -K ReadOnly\n')))}N.isMDXComponent=!0}}]);