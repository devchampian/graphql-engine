"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6389],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=a,p=f["".concat(s,".").concat(d)]||f[d]||u[d]||o;return t?r.createElement(p,i(i({ref:n},m),{},{components:t})):r.createElement(p,i({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},52521:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=["components"],l={sidebar_label:"Metadata file format",sidebar_position:2,description:"Hasura Metadata file format reference",keywords:["hasura","docs","metadata","file format"]},s="Metadata file format reference (config v1)",c={unversionedId:"graphql/core/migrations/config-v1/reference/metadata-file-format",id:"graphql/core/migrations/config-v1/reference/metadata-file-format",title:"Metadata file format reference (config v1)",description:"Hasura Metadata file format reference",source:"@site/docs/graphql/core/migrations/config-v1/reference/metadata-file-format.mdx",sourceDirName:"graphql/core/migrations/config-v1/reference",slug:"/graphql/core/migrations/config-v1/reference/metadata-file-format",permalink:"/graphql-engine/latest/graphql/core/migrations/config-v1/reference/metadata-file-format",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/migrations/config-v1/reference/metadata-file-format.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Metadata file format",sidebar_position:2,description:"Hasura Metadata file format reference",keywords:["hasura","docs","metadata","file format"]},sidebar:"docsSidebar",previous:{title:"Migration file format",permalink:"/graphql-engine/latest/graphql/core/migrations/config-v1/reference/migration-file-format"},next:{title:"Deploying Hasura GraphQL engine",permalink:"/graphql-engine/latest/graphql/core/deployment/index"}},m={},u=[{value:"Introduction",id:"introduction",level:2},{value:"metadata.yaml",id:"metadatayaml",level:2}],f={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"metadata-file-format-reference-config-v1"},"Metadata file format reference (config v1)"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The metadata file that is exported from the server is a JSON/YAML\nrepresentation of the Hasura metadata stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"hdb_catalog")," schema\non the Postgres database."),(0,o.kt)("p",null,"The top level keys will be the following arrays:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"functions: []\nremote_schemas: []\ntables: []\n")),(0,o.kt)("p",null,"Depending on the tables tracked, remote schemas and functions created,\nthese keys will have elements inside them."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"table")," will have permission rules, relationships and event triggers\ndefined for each table. Here is an example metadata file:"),(0,o.kt)("h2",{id:"metadatayaml"},"metadata.yaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'functions:\n  - search_articles\nremote_schemas:\n  - comment: null\n    definition:\n      forward_client_headers: false\n      headers: []\n      url: https://graphql-pokemon.now.sh/graphql\n      url_from_env: null\n    name: pokemon\ntables:\n  - table: author\n    array_relationships:\n      - comment: null\n        name: articlesByauthorId\n        using:\n          foreign_key_constraint_on:\n            column: author_id\n            table: article\n    delete_permissions: []\n    event_triggers: []\n    insert_permissions:\n      - comment: null\n        permission:\n          check:\n            id:\n              _eq: X-Hasura-User-Id\n          columns:\n            - name\n          set: {}\n        role: user\n    object_relationships: []\n    select_permissions:\n      - comment: null\n        permission:\n          allow_aggregations: false\n          columns:\n            - id\n            - name\n          filter:\n            id:\n              _eq: X-Hasura-User-Id\n        role: user\n    update_permissions: []\n  - table: article\n    array_relationships: []\n    delete_permissions: []\n    event_triggers:\n      - definition:\n          delete:\n            columns: "*"\n          insert:\n            columns: "*"\n          update:\n            columns:\n              - id\n              - title\n              - author_id\n        headers: []\n        name: update_article_search_index\n        retry_conf:\n          interval_sec: 10\n          num_retries: 0\n          timeout_sec: 60\n        webhook: https://my-algolia-api.com/update_index\n    insert_permissions:\n      - comment: null\n        permission:\n          check:\n            author_id:\n              _eq: X-Hasura-User-Id\n          columns:\n            - title\n          set:\n            author_id: x-hasura-user-id\n        role: user\n    object_relationships:\n      - comment: null\n        name: authorByauthorId\n        using:\n          foreign_key_constraint_on: author_id\n    select_permissions:\n      - comment: null\n        permission:\n          allow_aggregations: true\n          columns:\n            - author_id\n            - id\n            - title\n          filter:\n            author_id:\n              _eq: X-Hasura-User-Id\n        role: user\n    update_permissions: []\n')),(0,o.kt)("p",null,"The schema for this file will mostly correspond to the table structure\nof the ",(0,o.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/how-it-works/metadata-schema"},"metadata catalogue"),"."))}d.isMDXComponent=!0}}]);