"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2406],{3905:function(e,t,a){a.d(t,{Zo:function(){return l},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(o,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(h,p(p({ref:t},l),{},{components:a})):n.createElement(h,p({ref:t},l))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,p[1]=s;for(var c=2;c<i;c++)p[c]=a[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},92337:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),p=["components"],s={sidebar_label:"Custom Types",sidebar_position:14,description:"Define custom types with the Hasura schema/metadata API",keywords:["hasura","docs","schema/metadata API","API reference","custom types"]},o="Schema/Metadata API Reference: Custom Types (Deprecated)",c={unversionedId:"graphql/core/api-reference/schema-metadata-api/custom-types",id:"graphql/core/api-reference/schema-metadata-api/custom-types",title:"Schema/Metadata API Reference: Custom Types (Deprecated)",description:"Define custom types with the Hasura schema/metadata API",source:"@site/docs/graphql/core/api-reference/schema-metadata-api/custom-types.mdx",sourceDirName:"graphql/core/api-reference/schema-metadata-api",slug:"/graphql/core/api-reference/schema-metadata-api/custom-types",permalink:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/custom-types",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/schema-metadata-api/custom-types.mdx",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_label:"Custom Types",sidebar_position:14,description:"Define custom types with the Hasura schema/metadata API",keywords:["hasura","docs","schema/metadata API","API reference","custom types"]},sidebar:"docsSidebar",previous:{title:"RESTified GraphQL Endpoints",permalink:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/restified-endpoints"},next:{title:"Actions",permalink:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/actions"}},l={},m=[{value:"Introduction",id:"introduction",level:2},{value:"set_custom_types",id:"schema-metadata-set-custom-types",level:2},{value:"Args syntax",id:"schema-metadata-set-custom-types-syntax",level:3}],d={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"schemametadata-api-reference-custom-types-deprecated"},"Schema/Metadata API Reference: Custom Types (Deprecated)"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Deprecation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In versions ",(0,i.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above, the schema/metadata API is deprecated in\nfavour of the ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-api/index"},"schema API")," and the\n",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/index"},"metadata API"),"."),(0,i.kt)("p",{parentName:"div"},"Though for backwards compatibility, the schema/metadata APIs will\ncontinue to function."))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Custom Types")," are user-defined GraphQL types which help to define\n",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/actions"},"Actions"),"."),(0,i.kt)("h2",{id:"schema-metadata-set-custom-types"},"set_custom_types"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"set_custom_types")," is used to set user-defined GraphQL types. This API\nwill replace the given types with existing ones."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "set_custom_types",\n  "args": {\n    "scalars": [],\n    "enums": [],\n    "input_objects": [\n      {\n        "name": "User",\n        "fields": [\n          {\n            "name": "username",\n            "type": "String!"\n          },\n          {\n            "name": "password",\n            "type": "String!"\n          }\n        ]\n      }\n    ],\n    "objects": [\n      {\n        "name": "UserId",\n        "fields": [\n          {\n            "name": "id",\n            "type": "Int!"\n          }\n        ],\n        "relationships": [\n          {\n            "name": "posts",\n            "type": "array",\n            "remote_table": "post",\n            "field_mapping": {\n              "id": "user_id"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n')),(0,i.kt)("h3",{id:"schema-metadata-set-custom-types-syntax"},"Args syntax"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Schema"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"input_objects"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of ",(0,i.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#inputobjecttype"},"InputObjectType")),(0,i.kt)("td",{parentName:"tr",align:null},"Set of GraphQL ",(0,i.kt)("inlineCode",{parentName:"td"},"Input Object"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"objects"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of ",(0,i.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#objecttype"},"ObjectType")),(0,i.kt)("td",{parentName:"tr",align:null},"Set of GraphQL ",(0,i.kt)("inlineCode",{parentName:"td"},"Object"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"scalars"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of ",(0,i.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#scalartype"},"ScalarType")),(0,i.kt)("td",{parentName:"tr",align:null},"Set of GraphQL ",(0,i.kt)("inlineCode",{parentName:"td"},"Scalar"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"enums"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of ",(0,i.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#enumtype"},"EnumType")),(0,i.kt)("td",{parentName:"tr",align:null},"Set of GraphQL ",(0,i.kt)("inlineCode",{parentName:"td"},"Enum"))))))}u.isMDXComponent=!0}}]);