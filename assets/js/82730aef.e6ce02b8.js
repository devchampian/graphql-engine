"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9563],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=s.createContext({}),l=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return s.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?s.createElement(g,i(i({ref:n},u),{},{components:t})):s.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<a;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},11976:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var s=t(83117),r=t(80102),a=(t(67294),t(3905)),i=["components"],o={description:"Use cases for Hasura streaming subscriptions",sidebar_label:"Sample use cases",sidebar_position:1,keywords:["hasura","docs","subscription","streaming","use cases","postgres"]},c="Streaming subscriptions sample use cases",l={unversionedId:"graphql/core/databases/postgres/subscriptions/streaming/use-cases",id:"graphql/core/databases/postgres/subscriptions/streaming/use-cases",title:"Streaming subscriptions sample use cases",description:"Use cases for Hasura streaming subscriptions",source:"@site/docs/graphql/core/databases/postgres/subscriptions/streaming/use-cases.mdx",sourceDirName:"graphql/core/databases/postgres/subscriptions/streaming",slug:"/graphql/core/databases/postgres/subscriptions/streaming/use-cases",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/streaming/use-cases",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/postgres/subscriptions/streaming/use-cases.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Use cases for Hasura streaming subscriptions",sidebar_label:"Sample use cases",sidebar_position:1,keywords:["hasura","docs","subscription","streaming","use cases","postgres"]},sidebar:"docsSidebar",previous:{title:"Streaming subscriptions",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/streaming/index"},next:{title:"Supported Postgres types",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/postgresql-types"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Subscribing only to the events that have been changed",id:"subscribing-only-to-the-events-that-have-been-changed",level:3},{value:"Get the undelivered messages in a chat application",id:"get-the-undelivered-messages-in-a-chat-application",level:3}],d={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"streaming-subscriptions-sample-use-cases"},"Streaming subscriptions sample use cases"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The following are a few use cases for using streaming subscriptions:"),(0,a.kt)("h3",{id:"subscribing-only-to-the-events-that-have-been-changed"},"Subscribing only to the events that have been changed"),(0,a.kt)("p",null,"In case you are interested only in the latest events, you can use streaming subscriptions\nto fetch those events."),(0,a.kt)("h3",{id:"get-the-undelivered-messages-in-a-chat-application"},"Get the undelivered messages in a chat application"),(0,a.kt)("p",null,"Consider the following schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"   messages (\n     id serial primary key,\n     from_id uuid references users(id),\n     to_id uuid references users,\n     content text,\n     status text,\n     created_at timestamptz default now(),\n   )\n\n   users (\n     id uuid primary key,\n     first_name text,\n     last_name text,\n     created_at timestamptz default current_timestamp\n   )\n")),(0,a.kt)("p",null,"and the following messages need to be streamed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'     [\n       {\n         "id": 432432,\n         "from": {\n           "first_name": "Cindy"\n         },\n         "to": {\n           "first_name": "Michael"\n         },\n         "content": "Heyyy",\n         "created_at": "2020-01-01 01:00:00"\n       },\n       {\n         "id": 432433,\n         "from": {\n           "first_name": "Michael"\n         },\n         "to": {\n           "first_name": "Cindy"\n         },\n         "content": "Heyy! How are you?",\n         "created_at": "2020-01-01 01:01:20"\n       },\n       {\n         "id": 432432,\n         "from": {\n           "first_name": "Cindy"\n         },\n         "to": {\n           "first_name": "Michael"\n         },\n         "content": "I\'m good! What about you?",\n         "created_at": "2020-01-01 01:00:00"\n       },\n       {\n         "id": 432433,\n         "from": {\n           "first_name": "Michael"\n         },\n         "to": {\n           "first_name": "Cindy"\n         },\n         "content": "All good here too! Thanks",\n         "created_at": "2020-01-01 01:01:20"\n       }\n     ]\n')),(0,a.kt)("p",null,"To stream the latest undelivered messages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'    subscription getUndeliveredMessages {\n       # will get all the messages that have `created_at > 2022-01-01` in batches of 100 rows\n       messages_stream(cursor: {created_at: "2022-01-01", ordering: ASC}, batch_size: 2) {\n         id\n         from {\n           first_name\n         }\n         to {\n           first_name\n         }\n         content\n         created_at\n       }\n     }\n')),(0,a.kt)("p",null,"The first response sent will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'      {\n        "data": {\n           "messages_stream": [\n              {\n                "id": 432432,\n                "from": {\n                  "first_name": "Cindy"\n                },\n                "to": {\n                  "first_name": "Michael"\n                },\n                "content": "Heyyy",\n                "created_at": "2020-01-01 01:00:00"\n              },\n              {\n                "id": 432433,\n                "from": {\n                  "first_name": "Michael"\n                },\n                "to": {\n                  "first_name": "Cindy"\n                },\n                "content": "Heyy! How are you?",\n                "created_at": "2020-01-01 01:01:20"\n              }\n           ]\n        }\n      }\n')),(0,a.kt)("p",null,"The next response sent will be the following, note that the messages sent\nhave ",(0,a.kt)("inlineCode",{parentName:"p"},"created_at > 2020-01-01 01:01:20"),", the greatest value of the cursor\ncolumn sent in the previous response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'\n      {\n        "data": {\n           "messages_stream": [\n              {\n                "id": 432432,\n                "from": {\n                  "first_name": "Cindy"\n                },\n                "to": {\n                  "first_name": "Michael"\n                },\n                "content": "I\'m good! What about you?",\n                "created_at": "2020-01-01 01:00:00"\n              },\n              {\n                "id": 432433,\n                "from": {\n                  "first_name": "Michael"\n                },\n                "to": {\n                  "first_name": "Cindy"\n                },\n                "content": "All good here too! Thanks",\n                "created_at": "2020-01-01 01:01:20"\n              }\n           ]\n        }\n      }\n')))}m.isMDXComponent=!0}}]);