"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9705],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return t?a.createElement(g,r(r({ref:n},d),{},{components:t})):a.createElement(g,r({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},22138:function(e,n,t){var a=t(67294),i=t(57932),l=t(72389),r=t(86010),o=t(71077);n.Z=function(e){var n=e.query,t=e.variables,s=e.response,p=e.viewOnly,d=void 0===p||p,c=(0,l.Z)();return a.createElement("div",{className:"graphiql "+(0,r.Z)({"with-vars":!!t,"view-only":d})},a.createElement(i.ZP,{readOnly:d,editorTheme:"dracula",schema:null,fetcher:c?(0,o.n)({url:"https://hasura.io/graphql"}):function(){return null},query:n,variables:t,response:s}))}},17037:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return m}});var a=t(83117),i=t(80102),l=(t(67294),t(3905)),r=t(22138),o=["components"],s={description:"Model many-to-many relationships in Hasura",keywords:["hasura","docs","schema","relationship","many-to-many","n-m"],sidebar_position:4,sidebar_label:"Many-to-many relationship"},p="Modelling many-to-many table relationships",d={unversionedId:"graphql/core/guides/data-modelling/many-to-many",id:"graphql/core/guides/data-modelling/many-to-many",title:"Modelling many-to-many table relationships",description:"Model many-to-many relationships in Hasura",source:"@site/docs/graphql/core/guides/data-modelling/many-to-many.mdx",sourceDirName:"graphql/core/guides/data-modelling",slug:"/graphql/core/guides/data-modelling/many-to-many",permalink:"/docs/latest/graphql/core/guides/data-modelling/many-to-many",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/guides/data-modelling/many-to-many.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Model many-to-many relationships in Hasura",keywords:["hasura","docs","schema","relationship","many-to-many","n-m"],sidebar_position:4,sidebar_label:"Many-to-many relationship"},sidebar:"docsSidebar",previous:{title:"One-to-many relationship",permalink:"/docs/latest/graphql/core/guides/data-modelling/one-to-many"},next:{title:"Setting up soft deletes for data",permalink:"/docs/latest/graphql/core/guides/data-modelling/soft-deletes"}},c={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Set up a table relationship in the database",id:"step-1-set-up-a-table-relationship-in-the-database",level:2},{value:"Step 2: Set up GraphQL relationships",id:"step-2-set-up-graphql-relationships",level:2},{value:"Query using many-to-many relationships",id:"query-using-many-to-many-relationships",level:2},{value:"Insert using many-to-many relationships",id:"insert-using-many-to-many-relationships",level:2},{value:"Fetching relationship information",id:"fetching-relationship-information",level:2},{value:"Flattening a many-to-many relationship query",id:"flattening-a-many-to-many-relationship-query",level:2}],u={toc:m};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"modelling-many-to-many-table-relationships"},"Modelling many-to-many table relationships"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"A ",(0,l.kt)("inlineCode",{parentName:"p"},"many-to-many")," relationship between two tables can be established by\ncreating a table typically called as ",(0,l.kt)("strong",{parentName:"p"},"bridge/junction/join table")," and\nadding ",(0,l.kt)("strong",{parentName:"p"},"foreign-key constraints")," from it to the original tables."),(0,l.kt)("p",null,"Say we have the following two tables in our database schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"articles (\n  id SERIAL PRIMARY KEY,\n  title TEXT\n  ...\n)\n\ntags (\n  id SERIAL PRIMARY KEY,\n  tag_value TEXT\n  ...\n)\n")),(0,l.kt)("p",null,"These two tables are related via a ",(0,l.kt)("inlineCode",{parentName:"p"},"many-to-many")," relationship. i.e:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"an ",(0,l.kt)("inlineCode",{parentName:"li"},"article")," can have many ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")),(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("inlineCode",{parentName:"li"},"tag")," has many ",(0,l.kt)("inlineCode",{parentName:"li"},"articles"))),(0,l.kt)("h2",{id:"step-1-set-up-a-table-relationship-in-the-database"},"Step 1: Set up a table relationship in the database"),(0,l.kt)("p",null,"This ",(0,l.kt)("inlineCode",{parentName:"p"},"many-to-many")," relationship can be established in the database by:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Creating a ",(0,l.kt)("strong",{parentName:"p"},"bridge table")," called ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tag")," with the following\nstructure:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"article_tag (\n  id SERIAL PRIMARY KEY\n  article_id INT\n  tag_id INT\n  UNIQUE (article_id, tag_id)\n  ...\n)\n")))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you can have multiple rows linking the same ",(0,l.kt)("inlineCode",{parentName:"p"},"article")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"tag"),"\nin your model, you can skip the unique constraint on\n",(0,l.kt)("inlineCode",{parentName:"p"},"(article_id, tag_id)")))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Adding ",(0,l.kt)("strong",{parentName:"p"},"foreign key constraints")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tag")," table for:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," table using the ",(0,l.kt)("inlineCode",{parentName:"li"},"article_id")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"id")," columns of\nthe tables respectively"),(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," table using the ",(0,l.kt)("inlineCode",{parentName:"li"},"tag_id")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"id")," columns of the\ntables respectively")))),(0,l.kt)("p",null,"The table ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tag")," sits between the two tables involved in the\nmany-to-many relationship and captures possible permutations of their\nassociation via the foreign keys."),(0,l.kt)("h2",{id:"step-2-set-up-graphql-relationships"},"Step 2: Set up GraphQL relationships"),(0,l.kt)("p",null,"To access the nested objects via the GraphQL API,\n",(0,l.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/databases/postgres/schema/table-relationships/create"},"create the following relationships"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"article_tags")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"article_tag :: article_id -> id")),(0,l.kt)("li",{parentName:"ul"},"Object relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"tag")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"article_tag")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"tag_id -> tags :: id")),(0,l.kt)("li",{parentName:"ul"},"Array relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"tag_articles")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"article_tag :: tag_id -> id")),(0,l.kt)("li",{parentName:"ul"},"Object relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"article")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"article_tag")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"article_id -> articles :: id"))),(0,l.kt)("h2",{id:"query-using-many-to-many-relationships"},"Query using many-to-many relationships"),(0,l.kt)("p",null,"We can now:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fetch a list of ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," with their ",(0,l.kt)("inlineCode",{parentName:"li"},"tags"),":")),(0,l.kt)(r.Z,{query:"query {\n  articles {\n    id\n    title\n    article_tags {\n      tag {\n        id\n        tag_value\n      }\n    }\n  }\n }",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "article_tags": [\n          {\n            "tag": {\n              "id": 1,\n              "tag_value": "mystery"\n            }\n          },\n          {\n            "tag": {\n              "id": 2,\n              "tag_value": "biography"\n            }\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "article_tags": [\n          {\n            "tag": {\n              "id": 2,\n              "tag_value": "biography"\n            }\n          },\n          {\n            "tag": {\n              "id": 5,\n              "tag_value": "technology"\n            }\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fetch a list of ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," with their ",(0,l.kt)("inlineCode",{parentName:"li"},"articles"),":")),(0,l.kt)(r.Z,{query:"query {\n  tags {\n    id\n    tag_value\n    tag_articles {\n      article {\n        id\n        title\n      }\n    }\n  }\n }",response:'{\n  "data": {\n    "tags": [\n      {\n        "id": 1,\n        "tag_value": "mystery",\n        "tag_articles": [\n          {\n            "article": {\n              "id": 1,\n              "title": "sit amet"\n            }\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "tag_value": "biography",\n        "tag_articles": [\n          {\n            "article": {\n              "id": 1,\n              "title": "sit amet"\n            }\n          },\n          {\n            "article": {\n              "id": 2,\n              "title": "a nibh"\n            }\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("h2",{id:"insert-using-many-to-many-relationships"},"Insert using many-to-many relationships"),(0,l.kt)("p",null,"We can now:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"insert an ",(0,l.kt)("inlineCode",{parentName:"li"},"article")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," where the ",(0,l.kt)("inlineCode",{parentName:"li"},"tag")," might already exist\n(assume unique ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," for ",(0,l.kt)("inlineCode",{parentName:"li"},"tag"),"):")),(0,l.kt)(r.Z,{query:'mutation insertArticleWithTags {\n  insert_article(objects: [\n    {\n      title: "Article 1",\n      content: "Article 1 content",\n      author_id: 1,\n      article_tags: {\n        data: [\n          {\n            tag: {\n              data: {\n                value: "Recipes"\n              },\n              on_conflict: {\n                constraint: tag_value_key,\n                update_columns: [value]\n              }\n            }\n          }\n          {\n            tag: {\n              data: {\n                value: "Cooking"\n              },\n              on_conflict: {\n                constraint: tag_value_key,\n                update_columns: [value]\n              }\n            }\n          }\n        ]\n      }\n    }\n  ]) {\n    returning {\n      title\n      article_tags {\n        tag {\n          value\n        }\n      }\n    }\n  }\n }',response:'{\n  "data": {\n    "insert_article": {\n      "returning": [\n        {\n          "title": "Article 1",\n          "article_tags": [\n            {\n              "tag": {\n                "value": "Recipes"\n              }\n            },\n            {\n              "tag": {\n                "value": "Cooking"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"insert a ",(0,l.kt)("inlineCode",{parentName:"li"},"tag")," with ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," where the ",(0,l.kt)("inlineCode",{parentName:"li"},"tag")," might already exist\n(assume unique ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," for ",(0,l.kt)("inlineCode",{parentName:"li"},"tag"),"):")),(0,l.kt)(r.Z,{query:'mutation insertTagWithArticles {\n  insert_tag(objects: [\n    {\n      value: "Recipes",\n      article_tags: {\n        data: [\n          {\n            article: {\n              data: {\n                title: "Article 1",\n                content: "Article 1 content",\n                author_id: 1\n              }\n            }\n          },\n          {\n            article: {\n              data: {\n                title: "Article 2",\n                content: "Article 2 content",\n                author_id: 1\n              }\n            }\n          }\n        ]\n      }\n    }\n  ],\n  on_conflict: {\n    constraint: tag_value_key,\n    update_columns: [value]\n  }\n  ) {\n    returning {\n      value\n      article_tags {\n        article {\n          title\n        }\n      }\n    }\n  }\n }',response:'{\n  "data": {\n    "insert_tag": {\n      "returning": [\n        {\n          "value": "Recipes",\n          "article_tags": [\n            {\n              "article": {\n                "title": "Article 1"\n              }\n            },\n            {\n              "article": {\n                "title": "Article 2"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can avoid the ",(0,l.kt)("inlineCode",{parentName:"p"},"on_conflict")," clause if you will never have conflicts."))),(0,l.kt)("h2",{id:"fetching-relationship-information"},"Fetching relationship information"),(0,l.kt)("p",null,"The intermediate fields ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tags")," & ",(0,l.kt)("inlineCode",{parentName:"p"},"tag_articles")," can be used to\nfetch extra information about the relationship. For example, you can\nhave a column like ",(0,l.kt)("inlineCode",{parentName:"p"},"tagged_at")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tag")," table which you can\nfetch as follows:"),(0,l.kt)(r.Z,{query:"query {\n  articles {\n    id\n    title\n    article_tags {\n      tagged_at\n      tag {\n        id\n        tag_value\n      }\n    }\n  }\n }",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "article_tags": [\n          {\n            "tagged_at": "2018-11-19T18:01:17.292828+05:30",\n            "tag": {\n              "id": 1,\n              "tag_value": "mystery"\n            }\n          },\n          {\n            "tagged_at": "2018-11-18T18:01:17.292828+05:30",\n            "tag": {\n              "id": 3,\n              "tag_value": "romance"\n            }\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "article_tags": [\n          {\n            "tagged_at": "2018-11-19T15:01:17.292828+05:30",\n            "tag": {\n              "id": 5,\n              "tag_value": "biography"\n            }\n          },\n          {\n            "tagged_at": "2018-11-16T14:01:17.292828+05:30",\n            "tag": {\n              "id": 3,\n              "tag_value": "romance"\n            }\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("h2",{id:"flattening-a-many-to-many-relationship-query"},"Flattening a many-to-many relationship query"),(0,l.kt)("p",null,"In case you would like to flatten the above queries and avoid the\nintermediate fields ",(0,l.kt)("inlineCode",{parentName:"p"},"article_tags")," & ",(0,l.kt)("inlineCode",{parentName:"p"},"tag_articles"),", you can\n",(0,l.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/databases/postgres/schema/views"},"create the following views")," additionally and then\nquery using relationships created on these views:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW article_tags_view AS\n  SELECT article_id, tags.*\n    FROM article_tag LEFT JOIN tags\n      ON article_tag.tag_id = tags.id\n\nCREATE VIEW tag_articles_view AS\n  SELECT tag_id, articles.*\n    FROM article_tag LEFT JOIN articles\n      ON article_tag.article_id = articles.id\n")),(0,l.kt)("p",null,"Now ",(0,l.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/databases/postgres/schema/table-relationships/create"},"create the following relationships"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," from the ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"article_tags_view :: article_id -> id")),(0,l.kt)("li",{parentName:"ul"},"Array relationship, ",(0,l.kt)("inlineCode",{parentName:"li"},"articles")," from the ",(0,l.kt)("inlineCode",{parentName:"li"},"tags")," table using\n",(0,l.kt)("inlineCode",{parentName:"li"},"tag_articles_view :: tag_id -> id"))),(0,l.kt)("p",null,"We can now:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fetch articles with their tags without an intermediate field:")),(0,l.kt)(r.Z,{query:"query {\n  articles {\n    id\n    title\n    tags {\n      id\n      tag_value\n    }\n  }\n }",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "tags": [\n          {\n            "id": 1,\n            "tag_value": "mystery"\n          },\n          {\n            "id": 3,\n            "tag_value": "romance"\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "tags": [\n          {\n            "id": 5,\n            "tag_value": "biography"\n          },\n          {\n            "id": 3,\n            "tag_value": "romance"\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fetch tags with their articles without an intermediate field:")),(0,l.kt)(r.Z,{query:"query {\n  tags {\n    id\n    tag_value\n    articles {\n      id\n      title\n    }\n  }\n }",response:'{\n  "data": {\n    "tags": [\n      {\n        "id": 1,\n        "tag_value": "mystery",\n        "articles": [\n          {\n            "id": 1,\n            "title": "sit amet"\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "tag_value": "biography",\n        "articles": [\n          {\n            "id": 1,\n            "title": "sit amet"\n          },\n          {\n            "id": 2,\n            "title": "a nibh"\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"We do not recommend this")," flattening pattern of modelling as this\nintroduces an additional overhead of managing permissions and\nrelationships on the newly created views. e.g. You cannot query for the\nauthor of the nested articles without setting up a new relationship to\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"authors")," table from the ",(0,l.kt)("inlineCode",{parentName:"p"},"tag_articles_view")," view."),(0,l.kt)("p",{parentName:"div"},"In our opinion, the cons of this approach seem to outweigh the pros."))))}g.isMDXComponent=!0}}]);