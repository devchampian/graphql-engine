"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[907],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},22138:function(e,t,n){var a=n(67294),r=n(57932),i=n(72389),s=n(86010),o=n(71077);t.Z=function(e){var t=e.query,n=e.variables,l=e.response,u=e.viewOnly,p=void 0===u||u,c=(0,i.Z)();return a.createElement("div",{className:"graphiql "+(0,s.Z)({"with-vars":!!n,"view-only":p})},a.createElement(r.ZP,{readOnly:p,editorTheme:"dracula",schema:null,fetcher:c?(0,o.n)({url:"https://hasura.io/graphql"}):function(){return null},query:t,variables:n,response:l}))}},75537:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),s=n(22138),o=["components"],l={sidebar_label:"Upsert",sidebar_position:2,description:"Use upsert mutations on MS SQL Server with Hasura",keywords:["hasura","docs","ms sql server","mutation","upsert"]},u="MS SQL Server: Upsert mutation",p={unversionedId:"graphql/core/databases/ms-sql-server/mutations/upsert",id:"graphql/core/databases/ms-sql-server/mutations/upsert",title:"MS SQL Server: Upsert mutation",description:"Use upsert mutations on MS SQL Server with Hasura",source:"@site/docs/graphql/core/databases/ms-sql-server/mutations/upsert.mdx",sourceDirName:"graphql/core/databases/ms-sql-server/mutations",slug:"/graphql/core/databases/ms-sql-server/mutations/upsert",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/mutations/upsert",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/ms-sql-server/mutations/upsert.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Upsert",sidebar_position:2,description:"Use upsert mutations on MS SQL Server with Hasura",keywords:["hasura","docs","ms sql server","mutation","upsert"]},sidebar:"docsSidebar",previous:{title:"Insert",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/mutations/insert"},next:{title:"Update",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/mutations/update"}},c={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Convert insert mutation to upsert",id:"convert-insert-mutation-to-upsert",level:2},{value:"Upsert is not a substitute for update",id:"upsert-is-not-a-substitute-for-update",level:2},{value:"Update selected columns on match",id:"update-selected-columns-on-match",level:2},{value:"Update selected columns on match subject to a filter",id:"update-selected-columns-on-match-subject-to-a-filter",level:2},{value:"Ignore request on match",id:"ignore-request-on-match",level:2}],d={toc:m};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ms-sql-server-upsert-mutation"},"MS SQL Server: Upsert mutation"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"An upsert query ensures the given set of rows are present in the\ndatabase, inserting new rows or updating existing rows as necessary,\nsubject to certain criteria."),(0,i.kt)("h2",{id:"convert-insert-mutation-to-upsert"},"Convert insert mutation to upsert"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only tables with ",(0,i.kt)("strong",{parentName:"p"},"update")," permissions are ",(0,i.kt)("strong",{parentName:"p"},"upsertable"),". i.e. a\ntable's update permissions are respected before updating an existing row\nin case of a match."))),(0,i.kt)("p",null,"To convert an ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/mutations/insert"},"insert mutation")," into an upsert,\nyou need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"if_matched")," argument to specify:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("strong",{parentName:"li"},"columns to be matched")," for each row using the ",(0,i.kt)("inlineCode",{parentName:"li"},"match_columns"),"\nfield."),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("strong",{parentName:"li"},"columns to be updated")," in the case of a match using the\n",(0,i.kt)("inlineCode",{parentName:"li"},"update_columns")," field."),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("strong",{parentName:"li"},"condition")," for updating the column using the ",(0,i.kt)("inlineCode",{parentName:"li"},"where")," field, and")),(0,i.kt)("p",null,"The value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns")," field determines the behaviour of the\nupsert request as shown via the use cases below."),(0,i.kt)("h2",{id:"upsert-is-not-a-substitute-for-update"},"Upsert is not a substitute for update"),(0,i.kt)("p",null,"The upsert functionality is sometimes confused with the update\nfunctionality. However, they work slightly differently. An upsert\nmutation is used in the case when it's not clear if the respective row\nis already present in the database. If it's known that the row is\npresent in the database, ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," is the functionality to use."),(0,i.kt)("p",null,"For an upsert, ",(0,i.kt)("strong",{parentName:"p"},"all columns that are necessary for an insert are\nrequired"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How it works")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"MS SQL Server tries to insert a row (hence all the required columns\nneed to be present)"),(0,i.kt)("li",{parentName:"ol"},"If this fails because of some match, it updates the specified\ncolumns")),(0,i.kt)("p",null,"If not all required columns are present, an error like\n",(0,i.kt)("inlineCode",{parentName:"p"},"NULL value unexpected for <not-specified-column>")," can occur."),(0,i.kt)("h2",{id:"update-selected-columns-on-match"},"Update selected columns on match"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns")," field can be used to specify which columns to\nupdate in case a match occurs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),": Insert a new object in the ",(0,i.kt)("inlineCode",{parentName:"p"},"article")," table or, if the value\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," column matches a a ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," value in an existing row,\nupdate the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," column of the existing article:"),(0,i.kt)(s.Z,{query:'mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: "Article 1",\n        content: "Updated article 1 content",\n        published_on: "2018-10-12"\n      }\n    ],\n    if_matched: {\n      match_columns: title,\n      update_columns: content\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      published_on\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "returning": [\n        {\n          "id": 1,\n          "title": "Article 1",\n          "content": "Updated article 1 content",\n          "published_on": "2018-06-15"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"published_on")," column is left unchanged as it wasn't\npresent in ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"match_columns")," is an ",(0,i.kt)("strong",{parentName:"p"},"empty array")," there is no basis for comparing\nnew rows to existing rows. Thus the mutation will always ",(0,i.kt)("strong",{parentName:"p"},"insert")," the\nvalues and will never update any rows."),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Example"),": Insert a new object into the article table, will not match\non columns because none are specified."),(0,i.kt)(s.Z,{query:'mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: "Article 1",\n        content: "Article 1 content",\n        published_on: "2018-10-12"\n      }\n    ],\n    if_matched: {\n      match_columns: [],\n      update_columns: content\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      published_on\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "returning": [\n        {\n          "id": 3,\n          "title": "Article 1",\n          "content": "Article 1 content",\n          "published_on": "2018-06-15"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,i.kt)("p",{parentName:"div"},"This query is equivalent to a simple insert without an ",(0,i.kt)("inlineCode",{parentName:"p"},"if_matched"),"\nclause."))),(0,i.kt)("h2",{id:"update-selected-columns-on-match-subject-to-a-filter"},"Update selected columns on match subject to a filter"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," condition can be added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"if_matched")," clause to check a\ncondition before making the update in case a match occurs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),": Insert a new object in the ",(0,i.kt)("inlineCode",{parentName:"p"},"article")," table, or if the value\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," column matches a a ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," value in an existing row,\nupdate the ",(0,i.kt)("inlineCode",{parentName:"p"},"published_on")," column specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns")," only if\nthe previous ",(0,i.kt)("inlineCode",{parentName:"p"},"published_on")," value is lesser than the new value:"),(0,i.kt)(s.Z,{query:'mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: "Article 2",\n        published_on: "2018-10-12"\n      }\n    ],\n    if_matched: {\n      match_columns: title,\n      update_columns: published_on,\n      where: {\n        published_on: {_lt: "2018-10-12"}\n      }\n    }\n  ) {\n    returning {\n      id\n      title\n      published_on\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "returning": [\n        {\n          "id": 2,\n          "title": "Article 2",\n          "published_on": "2018-10-12"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,i.kt)("h2",{id:"ignore-request-on-match"},"Ignore request on match"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns")," is an ",(0,i.kt)("strong",{parentName:"p"},"empty array")," then on match the changes are\nignored."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),": Insert a new author object into the author table, unless\nthere already exists an author with the same name."),(0,i.kt)(s.Z,{query:'mutation upsert_author {\n  insert_author(\n    objects: [\n      { name: "John" }\n    ],\n    if_matched: {\n      match_columns: name,\n      update_columns: []\n    }\n  ) {\n    affected_rows\n  }\n}',response:'\n  "data": {\n    "insert_author": {\n      "affected_rows": 0\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,i.kt)("p",null,"In this case, the insert mutation is ignored because there is a match\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"update_columns")," is empty."))}h.isMDXComponent=!0}}]);