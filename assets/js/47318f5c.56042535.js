"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[680],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=d(n),u=r,g=k["".concat(o,".").concat(u)]||k[u]||m[u]||l;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},13717:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return m}});var a=n(83117),r=n(80102),l=(n(67294),n(3905)),i=["components"],p={sidebar_label:"Query / Subscription",sidebar_position:1,description:"Hasura GraphQL API queries and subscriptions API reference",keywords:["hasura","docs","GraphQL API","API reference","query","subscription"]},o="API Reference - Query / Subscription",d={unversionedId:"graphql/core/api-reference/graphql-api/query",id:"graphql/core/api-reference/graphql-api/query",title:"API Reference - Query / Subscription",description:"Hasura GraphQL API queries and subscriptions API reference",source:"@site/docs/graphql/core/api-reference/graphql-api/query.mdx",sourceDirName:"graphql/core/api-reference/graphql-api",slug:"/graphql/core/api-reference/graphql-api/query",permalink:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/query",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/graphql-api/query.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Query / Subscription",sidebar_position:1,description:"Hasura GraphQL API queries and subscriptions API reference",keywords:["hasura","docs","GraphQL API","API reference","query","subscription"]},sidebar:"docsSidebar",previous:{title:"GraphQL API Reference",permalink:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/index"},next:{title:"Mutation",permalink:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/mutation"}},s={},m=[{value:"<strong>query</strong> / <strong>subscription</strong> syntax",id:"query--subscription-syntax",level:2},{value:"<strong>query_by_pk</strong> / <strong>subscription_by_pk</strong> syntax",id:"query_by_pk--subscription_by_pk-syntax",level:2},{value:"Syntax definitions",id:"syntax-definitions",level:2},{value:"Object",id:"object",level:3},{value:"Simple object",id:"simpleobject",level:4},{value:"Aggregate object",id:"aggregateobject",level:4},{value:"Argument",id:"argument",level:3},{value:"DistinctOnExp",id:"distinctonexp",level:4},{value:"TableSelectColumnEnum",id:"tableselectcolumnenum",level:5},{value:"WhereExp",id:"whereexp",level:4},{value:"BoolExp",id:"boolexp",level:5},{value:"AndExp",id:"andexp",level:6},{value:"OrExp",id:"orexp",level:6},{value:"NotExp",id:"notexp",level:6},{value:"TrueExp",id:"trueexp",level:6},{value:"ColumnExp",id:"columnexp",level:6},{value:"Operator",id:"operator",level:6},{value:"CastExp",id:"castexp",level:6},{value:"OrderByExp",id:"orderbyexp",level:4},{value:"TableOrderBy",id:"tableorderby",level:5},{value:"OrderByEnum",id:"orderbyenum",level:6},{value:"AggregateOrderBy",id:"aggregateorderby",level:6},{value:"TableAggOpOrderBy",id:"tableaggoporderby",level:6},{value:"PaginationExp",id:"paginationexp",level:4}],k={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference---query--subscription"},"API Reference - Query / Subscription"),(0,l.kt)("h2",{id:"query--subscription-syntax"},(0,l.kt)("strong",{parentName:"h2"},"query")," / ",(0,l.kt)("strong",{parentName:"h2"},"subscription")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"query|subscription [<op-name>] {\n  object [([argument])]{\n    object-fields\n  }\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"op-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name query/subscription for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#object"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table/object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#argument"},"Argument")),(0,l.kt)("td",{parentName:"tr",align:null},"One or more of filter criteria, instructions for sort order or pagination")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(where: {articles: {rating: {_gte: 4}}} order_by: {name: asc}) {\n    id\n    name\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Subscription")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"subscription {\n  author(where: {articles: rating: {_gte: 4}}} order_by: {name: asc}) {\n    id\n    name\n  }\n}\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For more examples and details of usage, please see ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/queries/index"},"this"),"."))),(0,l.kt)("h2",{id:"query_by_pk--subscription_by_pk-syntax"},(0,l.kt)("strong",{parentName:"h2"},"query_by_pk")," / ",(0,l.kt)("strong",{parentName:"h2"},"subscription_by_pk")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"query|subscription [<op-name>] {\n  <query-field-name> (\n    column1: value1\n    column2: value2\n  )\n  <object-fields>\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"op-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name query/subscription for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"query-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated query field, e.g. ",(0,l.kt)("em",{parentName:"td"},"article_by_pk"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Query by PK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article_by_pk(id: 1) {\n    id\n    title\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Subscription by PK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"subscription {\n  article_by_pk(id: 1) {\n    id\n    title\n  }\n}\n")),(0,l.kt)("h2",{id:"syntax-definitions"},"Syntax definitions"),(0,l.kt)("h3",{id:"object"},"Object"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#simpleobject"},"SimpleObject")," | ",(0,l.kt)("a",{href:"#aggregateobject"},"AggregateObject")))),(0,l.kt)("h4",{id:"simpleobject"},"Simple object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"object-name {\n  field1\n  field2\n  json_field[(path: String)]\n  ..\n  nested object1\n  nested object2\n  aggregate nested object1\n  ..\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"path")," argument of ",(0,l.kt)("inlineCode",{parentName:"td"},"json"),"/",(0,l.kt)("inlineCode",{parentName:"td"},"jsonb")," follows simple ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/json-path/JsonPath"},"JSONPath specification"),". However, prefix symbol ",(0,l.kt)("inlineCode",{parentName:"td"},"$.")," is optional.")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'author {\n   id  # scalar integer field\n\n   name  # scalar text field\n\n   address(path: "$.city") # scalar JSON field -> property\n   address(path: "$.city.altitude") # scalar JSON field -> property -> property\n   address(path: "city") # scalar JSON field -> property; \'$.\' prefix is optional\n   contacts(path: "[0]") # scalar JSON field -> array_item\n   contacts(path: "[0].phone") # scalar JSON field -> array_item_property\n   contacts(path: "[\'Hello world!\']") # scalar JSON field -> property; used for special characters key\n   contacts(path: "[\\"Hello world!\\"]") # same as above; the syntax is ugly, but still works\n\n   article {  # nested object\n     title\n   }\n\n   article_aggregate {  # aggregate nested object\n     aggregate {\n       count\n     }\n     nodes {\n       title\n     }\n   }\n}\n')),(0,l.kt)("h4",{id:"aggregateobject"},"Aggregate object"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"object-name_aggregate {\n  aggregate {\n    count\n    sum {\n      field\n      ..\n    }\n    avg {\n      field\n      ..\n    }\n    stddev {\n      field\n      ..\n    }\n    stddev_samp {\n      field\n      ..\n    }\n    stddev_pop {\n      field\n      ..\n    }\n    variance {\n      field\n      ..\n    }\n    var_samp {\n      field\n      ..\n    }\n    var_pop {\n      field\n      ..\n    }\n    max {\n      field\n      ..\n    }\n    min {\n      field\n      ..\n    }\n  nodes {\n    field1\n    field2\n    ..\n    nested object1\n    nested object2\n    aggregate nested object1\n    ..\n  }\n}\n")),(0,l.kt)("p",null,"(For more details on aggregate functions, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE"},"Postgres\ndocs"),")."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"author_aggregate {\n  aggregate {\n    count  # total count\n    sum {\n      id  # sum aggregate on id\n    }\n    avg {\n      id  # avg aggregate on id\n    }\n    stddev {\n      id  # stddev aggregate on id\n    }\n    stddev_samp {\n      id  # stddev_samp aggregate on id\n    }\n    stddev_pop {\n      id  # stddev_pop aggregate on id\n    }\n    variance {\n      id  # variance aggregate on id\n    }\n    var_samp {\n      id  # var_samp aggregate on id\n    }\n    var_pop {\n      id  # var_pop aggregate on id\n    }\n    max {\n      id  # max aggregate on id\n    }\n    min {\n      id  # min aggregate on id\n    }\n  }\n\n  nodes {  # objects\n    id  # scalar field\n    name  # scalar field\n\n    article {  # nested object\n      title\n    }\n\n    article_aggregate {  # aggregate nested object\n      aggregate {\n        count\n      }\n      nodes {\n        title\n      }\n    }\n  }\n}\n")),(0,l.kt)("h3",{id:"argument"},"Argument"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#distinctonexp"},"DistinctOnExp")," | ",(0,l.kt)("a",{href:"#whereexp"},"WhereExp")," | ",(0,l.kt)("a",{href:"#orderbyexp"},"OrderByExp")," | ",(0,l.kt)("a",{href:"#paginationexp"},"PaginationExp")))),(0,l.kt)("h4",{id:"distinctonexp"},"DistinctOnExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"distinct_on: [",(0,l.kt)("a",{href:"#tableselectcolumnenum"},"TableSelectColumnEnum"),"]"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(distinct_on: title) {\n    title\n    content\n  }\n}\n")),(0,l.kt)("h5",{id:"tableselectcolumnenum"},"TableSelectColumnEnum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'#example table_select_column enum for "article" table\nenum article_select_column {\n  id\n  title\n  content\n  author_id\n  is_published\n}\n')),(0,l.kt)("h4",{id:"whereexp"},"WhereExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"where: ",(0,l.kt)("a",{href:"#boolexp"},"BoolExp")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(where: {rating: {_gt: 4}}) {\n    name\n    articles {\n      title\n    }\n  }\n}\n")),(0,l.kt)("h5",{id:"boolexp"},"BoolExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#andexp"},"AndExp")," | ",(0,l.kt)("a",{href:"#orexp"},"OrExp")," | ",(0,l.kt)("a",{href:"#notexp"},"NotExp")," | ",(0,l.kt)("a",{href:"#trueexp"},"TrueExp")," | ",(0,l.kt)("a",{href:"#columnexp"},"ColumnExp")))),(0,l.kt)("h6",{id:"andexp"},"AndExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _and: [",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"]\n}"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  article(where: {_and: [{rating: {_gt: 4}}, {published_on: {_gt: "2018-01-01"}}]}) {\n    title\n    content\n  }\n}\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Syntactic sugar")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can simplify an ",(0,l.kt)("inlineCode",{parentName:"p"},"_and")," expression by passing the sub-expressions\nseparated by a ",(0,l.kt)("inlineCode",{parentName:"p"},","),"."),(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"First example: ","_","and expression with different fields")),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  _and: [\n    { rating: { _gte: 4 } },\n    { published_on: { _gte: "2018-01-01" } }\n  ]\n}\n\n# can be simplified to:\n\n{\n  rating: { _gte: 4 },\n  published_on: { _gte: "2018-01-01" }\n}\n')),(0,l.kt)("p",{parentName:"div"},(0,l.kt)("strong",{parentName:"p"},"Second example: ","_","and expression with same field")),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"_and: [\n  {\n    rating: {\n      _gt: 1\n    }\n  },\n  {\n    rating: {\n      _lt: 5\n    }\n  }\n]\n\n# can be simplified to:\n\nrating: {\n  _gt: 1,\n  _lt: 5\n}\n")))),(0,l.kt)("h6",{id:"orexp"},"OrExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _or: [",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"]\n}"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(where: {_or: [{rating: {_gt: 4}}, {is_published: {_eq: true}}]}) {\n    title\n    content\n  }\n}\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"_or")," operator expects an array of expressions as input. Passing an\nobject to it will result in the behaviour of the ",(0,l.kt)("inlineCode",{parentName:"p"},"_and")," operator due to\nthe way ",(0,l.kt)("a",{parentName:"p",href:"https://graphql.github.io/graphql-spec/June2018/#sec-Type-System.List"},"GraphQL list input\ncoercion"),"\nbehaves."),(0,l.kt)("p",{parentName:"div"},(0,l.kt)("em",{parentName:"p"},"Example:")),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  _or: {\n   rating: { _gte: 4 },\n   published_on: { _gte: "2018-01-01" }\n  }\n}\n\n# will be coerced to:\n\n{\n  _or: [\n    {\n      rating: { _gte: 4 },\n      published_on: { _gte: "2018-01-01" }\n    }\n  ]\n}\n\n# which is equivalent to:\n\n{\n  _or: [\n    _and: [\n      { rating: { _gte: 4 } },\n      { published_on: { _gte: "2018-01-01" } }\n    ]\n  ]\n}\n')))),(0,l.kt)("h6",{id:"notexp"},"NotExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _not: ",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"\n}"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  article(where: {_not: {title: {_eq: ""}}} ) {\n    title\n    content\n  }\n}\n')),(0,l.kt)("h6",{id:"trueexp"},"TrueExp"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"{}")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(where: {articles: {}}) {\n    name\n  }\n}\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"{}")," evaluates to true whenever an object exists (even if it's ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),")."))),(0,l.kt)("h6",{id:"columnexp"},"ColumnExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  field-name: { ",(0,l.kt)("a",{href:"#operator"},"Operator"),": Value }\n}"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  article(where: {title: {_eq: "GraphQL Tutorial"}}) {\n    title\n    content\n  }\n}\n')),(0,l.kt)("h6",{id:"operator"},"Operator"),(0,l.kt)("div",{id:"generic-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generic operators (all column types except json, jsonb):")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_eq")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"="))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_neq")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<>"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_gt")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_lt")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_gte")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">="))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_lte")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<="))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_in")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IN"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_nin")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NOT IN"))))),(0,l.kt)("p",null,"(For more details, refer to the Postgres docs for ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-comparison.html"},"comparison\noperators"),"\nand ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-comparisons.html"},"list based search\noperators"),".)"),(0,l.kt)("div",{id:"text-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Text related operators:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_like")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIKE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_nlike")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NOT LIKE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_ilike")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ILIKE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_nilike")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NOT ILIKE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_similar")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SIMILAR TO"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_nsimilar")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NOT SIMILAR TO"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_regex")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"~"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_iregex")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"~*"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_nregex")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!~"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_niregex")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!~*"))))),(0,l.kt)("p",null,"(For more details on text related operators, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-matching.html"},"Postgres\ndocs"),".)"),(0,l.kt)("div",{id:"null-expression"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Checking for NULL values:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_is_null")," (takes true/false as values)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NULL"))))),(0,l.kt)("p",null,"(For more details on the ",(0,l.kt)("inlineCode",{parentName:"p"},"IS NULL")," expression, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-comparison.html"},"Postgres\ndocs"),".)"),(0,l.kt)("div",{id:"type-casting"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type casting:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_cast")," (takes a ",(0,l.kt)("a",{parentName:"td",href:"#castexp"},"CastExp")," as a value)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"::"))))),(0,l.kt)("p",null,"(For more details on type casting, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-createcast.html"},"Postgres\ndocs"),".)"),(0,l.kt)("div",{id:"jsonb-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"JSONB operators:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_contains")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@>"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_contained_in")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<@"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_has_key")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_has_keys_any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?!"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_has_keys_all")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?&"))))),(0,l.kt)("p",null,"(For more details on JSONB operators, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/static/functions-json.html#FUNCTIONS-JSONB-OP-TABLE"},"Postgres\ndocs"),".)"),(0,l.kt)("div",{id:"geometry-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"PostGIS related operators on GEOMETRY columns:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostGIS equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_contains")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Contains(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_crosses")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Crosses(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_equals")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Equals(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_intersects")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Intersects(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_overlaps")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Overlaps(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_touches")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Touches(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_within")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Within(column, input)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_d_within")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_DWithin(column, input)"))))),(0,l.kt)("p",null,"(For more details on spatial relationship operators, refer to the\n",(0,l.kt)("a",{parentName:"p",href:"http://postgis.net/workshops/postgis-intro/spatial_relationships.html"},"PostGIS\ndocs"),".)"),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All operators take a JSON representation of ",(0,l.kt)("inlineCode",{parentName:"p"},"geometry/geography"),"\nvalues as input value.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The input value for ",(0,l.kt)("inlineCode",{parentName:"p"},"_st_d_within")," operator is an object:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"{  \n  field-name : {_st_d_within: {distance: Float, from: Value} }\n}\n")))))),(0,l.kt)("div",{id:"intersect-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Intersect Operators on RASTER columns:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"),(0,l.kt)("th",{parentName:"tr",align:null},"Input object"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_intersects_rast")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Intersects(column, value)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{ _st_intersects_rast: raster }"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_intersects_nband_geom")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Intersects(column, nband, geommin)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{ _st_intersects_nband_geom: {nband: Integer! geommin: geometry!}"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_st_intersects_geom_nband")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ST_Intersects(column, geommin, nband)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"{ _st_intersects_geom_nband: {geommin: geometry! nband: Integer }"))))),(0,l.kt)("p",null,"(For more details on intersect operators on ",(0,l.kt)("inlineCode",{parentName:"p"},"raster")," columns refer to\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://postgis.net/docs/RT_ST_Intersects.html"},"PostGIS docs"),".)"),(0,l.kt)("div",{id:"ltree-operators"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"ltree operators:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL equivalent"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_ancestor")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@>"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_ancestor_any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@>"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_descendant")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<@"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_descendant_any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<@"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_matches")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"~"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_matches_any")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"?"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_matches_fulltext")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"@"))))),(0,l.kt)("p",null,"(For more details on operators on ",(0,l.kt)("inlineCode",{parentName:"p"},"ltree")," columns refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/ltree.html"},"Postgres\ndocs"),".)"),(0,l.kt)("h6",{id:"castexp"},"CastExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ type-name: {",(0,l.kt)("a",{href:"#operator"},"Operator"),": Value} }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery($coordinate: geography!) {\n  postgis_test_table(\n    where: {\n      geometry_column: {\n        _cast: {\n          geography: { _st_d_within: { distance: 1000000, from: $coordinate } }\n        }\n      }\n    }\n  ) {\n    id\n  }\n}\n\nVariables:\n{\n  "coordinate": {\n    "type": "Point",\n    "coordinates": [ 2.5559, 49.0083 ]\n  }\n}\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Currently, only the following type casts are supported:"),(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},"between PostGIS ",(0,l.kt)("inlineCode",{parentName:"li"},"geometry")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"geography")," types"),(0,l.kt)("li",{parentName:"ul"},"from Postgres ",(0,l.kt)("inlineCode",{parentName:"li"},"jsonb")," type to ",(0,l.kt)("inlineCode",{parentName:"li"},"string")," type.")))),(0,l.kt)("h4",{id:"orderbyexp"},"OrderByExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"order_by: (",(0,l.kt)("a",{href:"#tableorderby"},"TableOrderBy")," | [",(0,l.kt)("a",{href:"#tableorderby"},"TableOrderBy"),"])"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example 1")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(order_by: {rating: desc}) {\n    name\n    rating\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example 2")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(order_by: [{id: desc}, {author: {id: asc}}]) {\n    title\n    rating\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example 3")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(order_by: [{id: desc}, {author: {id: asc}}]) {\n    title\n    rating\n  }\n}\n")),(0,l.kt)("h5",{id:"tableorderby"},"TableOrderBy"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For columns")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ column: ",(0,l.kt)("a",{href:"#orderbyenum"},"OrderByEnum")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(order_by: {rating: asc}) {\n    title\n    content\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For object relations")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ relation-name: ",(0,l.kt)("a",{href:"#tableorderby"},"TableOrderBy")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(order_by: {author: {rating: desc}}) {\n    title\n    content\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For array relations aggregate")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ relation-name_aggregate: ",(0,l.kt)("a",{href:"#aggregateorderby"},"AggregateOrderBy")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(order_by: {articles_aggregate: {max: {rating: asc}}}) {\n    name\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For computed fields")),(0,l.kt)("p",null,"Returning scalar values:"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ computed-field-name: ",(0,l.kt)("a",{href:"#orderbyenum"},"OrderByEnum")," }"))),(0,l.kt)("p",null,"Returning set of table rows:"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ computed-field-name: ",(0,l.kt)("a",{href:"#tableorderby"},"TableOrderBy")," }"))),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ computed-field-name_aggregate: ",(0,l.kt)("a",{href:"#aggregateorderby"},"AggregateOrderBy")," }"))),(0,l.kt)("p",null,"Order by type for ",(0,l.kt)("inlineCode",{parentName:"p"},"article")," table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'input article_order_by {\n  id: order_by\n  title: order_by\n  content: order_by\n  author_id: order_by\n  #order by using "author" object relationship columns\n  author: author_order_by\n  #order by using "likes" array relationship aggregates\n  likes_aggregate: likes_aggregate_order_by\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For computed fields returning scalar type")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ computed-field-name: ",(0,l.kt)("a",{href:"#orderbyenum"},"OrderByEnum")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Consider a table ",(0,l.kt)("inlineCode",{parentName:"p"},"student")," contains integer columns for course subjects\nto store marks. A computed field with the name ",(0,l.kt)("inlineCode",{parentName:"p"},"total_marks")," defined to\ncalculate sum of all subject marks. We need to fetch ",(0,l.kt)("inlineCode",{parentName:"p"},"student")," rows\nsorted by ",(0,l.kt)("inlineCode",{parentName:"p"},"total_marks"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  student(order_by: {total_marks: desc}){\n    id\n    name\n    total_marks\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"For computed fields returning table row type")),(0,l.kt)("p",null,"Computed fields returning set of table rows can be used to sort the\nquery by their aggregate fields."),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ computed-field-name_aggregate: ",(0,l.kt)("a",{href:"#aggregateorderby"},"AggregateOrderBy")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("p",null,"A computed field ",(0,l.kt)("inlineCode",{parentName:"p"},"get_articles")," is defined on the ",(0,l.kt)("inlineCode",{parentName:"p"},"author")," table which\nreturns set of ",(0,l.kt)("inlineCode",{parentName:"p"},"article")," table rows. Fetch authors sorted by the count\nof their articles."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(order_by: {get_articles_aggregate: {count: desc}}){\n    id\n    name\n    get_articles{\n      id\n      title\n      content\n    }\n  }\n}\n")),(0,l.kt)("h6",{id:"orderbyenum"},"OrderByEnum"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"#the order_by enum type\nenum order_by {\n  #in the ascending order, nulls last\n  asc\n  #in the ascending order, nulls last\n  asc_nulls_last\n  #in the ascending order, nulls first\n  asc_nulls_first\n  #in the descending order, nulls first\n  desc\n  #in the descending order, nulls first\n  desc_nulls_first\n  #in the descending order, nulls last\n  desc_nulls_last\n}\n")),(0,l.kt)("h6",{id:"aggregateorderby"},"AggregateOrderBy"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Count aggregate")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ count: ",(0,l.kt)("a",{href:"#orderbyenum"},"OrderByEnum")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author(order_by: {articles_aggregate: {count: desc}}) {\n    name\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Operation aggregate")),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ op_name: ",(0,l.kt)("a",{href:"#tableaggoporderby"},"TableAggOpOrderBy")," }"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  author (order_by: {articles_aggregate: {sum: {id: desc}}}) {\n    id\n  }\n}\n")),(0,l.kt)("p",null,"Available operations are ",(0,l.kt)("inlineCode",{parentName:"p"},"sum"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"avg"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"max"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stddev"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"stddev_samp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stddev_pop"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"variance"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"var_samp")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"var_pop"),"."),(0,l.kt)("h6",{id:"tableaggoporderby"},"TableAggOpOrderBy"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{ column: ",(0,l.kt)("a",{href:"#orderbyenum"},"OrderByEnum")," }"))),(0,l.kt)("h4",{id:"paginationexp"},"PaginationExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"limit: Integer\n[offset: Integer]"))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  article(limit: 6, offset: 2) {\n    title\n    content\n  }\n}\n")))}u.isMDXComponent=!0}}]);