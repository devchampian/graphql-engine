"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2662],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(a),m=o,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||n;return a?r.createElement(h,s(s({ref:t},p),{},{components:a})):r.createElement(h,s({ref:t},p))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,s=new Array(n);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<n;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78939:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=a(83117),o=a(80102),n=(a(67294),a(3905)),s=["components"],i={sidebar_label:"Data Federation",sidebar_position:13,description:"Join data across remote data sources",keywords:["hasura","docs","remote join","data federation"],slug:"data-federation/index"},c="Data Federation",l={unversionedId:"graphql/core/data-federation",id:"graphql/core/data-federation",title:"Data Federation",description:"Join data across remote data sources",source:"@site/docs/graphql/core/data-federation.mdx",sourceDirName:"graphql/core",slug:"/graphql/core/data-federation/index",permalink:"/graphql-engine/latest/graphql/core/data-federation/index",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/data-federation.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_label:"Data Federation",sidebar_position:13,description:"Join data across remote data sources",keywords:["hasura","docs","remote join","data federation"],slug:"data-federation/index"},sidebar:"docsSidebar",previous:{title:"Metadata catalogue",permalink:"/graphql-engine/latest/graphql/core/how-it-works/metadata-schema"},next:{title:"Troubleshooting",permalink:"/graphql-engine/latest/graphql/core/troubleshooting/index"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Types of remote relationships",id:"types-of-remote-relationships",level:2}],u={toc:d};function m(e){var t=e.components,a=(0,o.Z)(e,s);return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"data-federation"},"Data Federation"),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"Hasura\u2019s data federation capabilities allow you to compose data from different sources\nthat reside in independent data stores but are semantically related. This is done by creating\na single GraphQL schema from multiple data sources thereby making the data access process\nself-serve, allowing you to query, mutate or federate real-time and stream data across services\nwithout writing any custom code."),(0,n.kt)("p",null,"The remote data sources can either be a table from a ",(0,n.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/index"},"database source"),",\na GraphQL API added as a ",(0,n.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/remote-schemas/index"},"remote schema"),",\nor a REST API added as an ",(0,n.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/actions/index"},"action"),'. Once you create\nrelationships between types from your database tables, remote schemas and actions, you can then "join" data\nacross them by running GraphQL queries.'),(0,n.kt)("h2",{id:"types-of-remote-relationships"},"Types of remote relationships"),(0,n.kt)("p",null,"Hasura GraphQL engine supports the following relationships across your various data sources:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-source-relationships"},"Database to database relationships"),": To join\ndata across tables between two different database sources, such as order information stored in a Postgres database, and user information stored\nin a separate Postgres or say a SQL Server database."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-schema-relationships"},"Database to Remote Schema relationships"),": To\njoin data across tables and remote GraphQL APIs. For example, you can join customer data from your tables with account data from Stripe, Spotify,\nor Auth0 via their GraphQL APIs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/remote-schemas/remote-relationships/remote-schema-db-relationships"},"Remote Schema to database relationships"),": To join\ndata from remote GraphQL schemas to database tables. For example connecting account data from Stripe, Spotify or Auth0 GraphQL APIs to customer data in your tables."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/remote-schemas/remote-relationships/remote-schema-relationships"},"Remote Schema to Remote Schema relationships (a.k.a GraphQL joins)"),": To\njoin data between two remote GraphQL schemas. For example connecting customer data from your custom GraphQL API to account data from Stripe, Spotify or\nAuth0 GraphQL APIs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/postgres/schema/remote-relationships/action-relationships"},"Action to database relationships"),": To join data across\ntables and actions (i.e. Rest APIs). For example, you can join user data from your database with the response from a ",(0,n.kt)("inlineCode",{parentName:"li"},"createUser")," action.")))}m.isMDXComponent=!0}}]);