"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6904],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},50152:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),s=["components"],o={description:"Manage subscriptions on Postgres with Hasura",keywords:["hasura","docs","postgres","subscription"],slug:"index"},l="Postgres: Subscriptions",p={unversionedId:"graphql/core/databases/postgres/subscriptions/index",id:"graphql/core/databases/postgres/subscriptions/index",title:"Postgres: Subscriptions",description:"Manage subscriptions on Postgres with Hasura",source:"@site/docs/graphql/core/databases/postgres/subscriptions/index.mdx",sourceDirName:"graphql/core/databases/postgres/subscriptions",slug:"/graphql/core/databases/postgres/subscriptions/index",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/index",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/postgres/subscriptions/index.mdx",tags:[],version:"current",frontMatter:{description:"Manage subscriptions on Postgres with Hasura",keywords:["hasura","docs","postgres","subscription"],slug:"index"},sidebar:"docsSidebar",previous:{title:"Multiple mutations in a request",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/multiple-mutations"},next:{title:"Live queries",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/livequery/index"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Types of subscriptions",id:"types-of-subscriptions",level:2},{value:"Live queries",id:"live-queries",level:3},{value:"Streaming subscriptions",id:"streaming-subscriptions",level:3},{value:"Live query vs Streaming subscriptions",id:"live-query-vs-streaming-subscriptions",level:3},{value:"Communication protocol",id:"communication-protocol",level:2},{value:"Cookies and WebSockets",id:"cookies-and-websockets",level:2},{value:"Cookies, WebSockets and CORS",id:"cookies-websockets-and-cors",level:3}],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"postgres-subscriptions"},"Postgres: Subscriptions"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"A GraphQL subscription is essentially a query where the client receives\nan update whenever the value of any field changes upstream."),(0,i.kt)("p",null,"Subscriptions are supported for all kinds of queries. All the concepts\nof ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/queries/index"},"queries")," hold true for subscriptions as well."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Caveat")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Hasura follows the ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.github.io/graphql-spec/June2018/#sec-Single-root-field"},"GraphQL spec"),"\nwhich allows for only one root field in a subscription."))),(0,i.kt)("h2",{id:"types-of-subscriptions"},"Types of subscriptions"),(0,i.kt)("h3",{id:"live-queries"},"Live queries"),(0,i.kt)("p",null,"A live query subscription will return the latest result of the query being made\nand not necessarily all the individual events leading up to the result.\nBy default, updates are delivered to clients every ",(0,i.kt)("strong",{parentName:"p"},"1 sec"),"."),(0,i.kt)("p",null,"See more details ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/livequery/index"},"here"),"."),(0,i.kt)("h3",{id:"streaming-subscriptions"},"Streaming subscriptions"),(0,i.kt)("p",null,"A streaming subscription streams the response according to the cursor input\nby the user. A streaming subscription is different from a live query as it sends individual rows\nat a time and not the entire result set."),(0,i.kt)("p",null,"See more details ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/subscriptions/streaming/index"},"here"),"."),(0,i.kt)("h3",{id:"live-query-vs-streaming-subscriptions"},"Live query vs Streaming subscriptions"),(0,i.kt)("p",null,"Suppose we need to display the messages of a group chat on a page, this can be done either via\nlive queries or streaming subscriptions. Let's see how they can be used and how they differ from each other."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using ",(0,i.kt)("strong",{parentName:"p"},"live query")),(0,i.kt)("p",{parentName:"li"},"With live query, we'll make the following query:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"\n   subscription {\n     messages (\n       where: {group_id: 1},\n       order_by: {created_at: asc}\n     ) {\n       id\n       sender\n       reciever\n       content\n       created_at\n       edited_at\n     }\n   }\n")),(0,i.kt)("p",{parentName:"li"},"The initial response for this subscription will be all the messages of the group. Let's say the initial\nresponse contained 100 messages. Now, if there is one more message sent to the group, then all 101 messages\nwill be sent in a new response."))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using ",(0,i.kt)("strong",{parentName:"p"},"streaming subscriptions")),(0,i.kt)("p",{parentName:"li"},"With streaming subscriptions, we'll make the following query:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"\n   subscription {\n     messages_stream (\n       where: {group_id: 1},\n       cursor: {initial_value: {created_at: now}},\n       batch_size: 10\n     ) {\n       id\n       sender\n       reciever\n       content\n       created_at\n       edited_at\n     }\n   }\n")),(0,i.kt)("p",{parentName:"li"},"Here, we'll start getting all messages of the group in batches given by ",(0,i.kt)("inlineCode",{parentName:"p"},"batch_size")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at"),"\ngreater than ",(0,i.kt)("inlineCode",{parentName:"p"},"now"),"."),(0,i.kt)("p",{parentName:"li"},"Following the example of the live query, if we have 100 messages corresponding to the group and only\n5 messages with ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," greater than the current value of the cursor maintained by the cursor, then\nwe will get only the 5 messages."))),(0,i.kt)("h2",{id:"communication-protocol"},"Communication protocol"),(0,i.kt)("p",null,"Hasura GraphQL engine uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md"},"GraphQL over WebSocket Protocol"),"\nby the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apollographql/subscriptions-transport-ws"},"apollographql/subscriptions-transport-ws"),"\nlibrary and the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md"},"GraphQL over WebSocket Protocol"),"\nby the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/enisdenjo/graphql-ws"},"graphql-ws")," library for\nsending and receiving events. The GraphQL engine uses the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Sec-WebSocket-Protocol")," header to determine the communication protocol\nthat'll be used. By default, the GraphQL engine will use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"apollographql/subscriptions-transport-ws")," protocol."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Setting headers for subscriptions with Apollo client")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you are using Apollo Client, headers can be passed to a subscription\nby setting ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionParams")," while ",(0,i.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/data/subscriptions/#client-setup"},"creating the wsLink"),":"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"{6-8}","{6-8}":!0},"// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `<graphql-endpoint>`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      headers: {headers-object}\n    }\n  }\n});\n")),(0,i.kt)("p",{parentName:"div"},"See ",(0,i.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/data/subscriptions/#authentication-over-websocket"},"this"),"\nfor more info on using ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionParams"),"."))),(0,i.kt)("h2",{id:"cookies-and-websockets"},"Cookies and WebSockets"),(0,i.kt)("p",null,"The Hasura GraphQL engine will read cookies sent by the browser when\ninitiating a WebSocket connection. The browser will send the cookie only\nif it is a secure cookie (",(0,i.kt)("inlineCode",{parentName:"p"},"secure")," flag in the cookie) and if the cookie\nhas a ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpOnly")," flag."),(0,i.kt)("p",null,"Hasura will read this cookie and use it as headers when resolving\nauthorization (i.e. when resolving the auth webhook)."),(0,i.kt)("h3",{id:"cookies-websockets-and-cors"},"Cookies, WebSockets and CORS"),(0,i.kt)("p",null,"As browsers don't enforce Same Origin Policy (SOP) for websockets, the\nHasura server enforces the CORS rules when accepting the websocket\nconnection."),(0,i.kt)("p",null,"It uses the provided CORS configuration (as per ",(0,i.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/deployment/graphql-engine-flags/config-examples#configure-cors"},"Configure CORS"),")."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"When it is ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),", the cookie is read and the CORS check is not\nenforced."),(0,i.kt)("li",{parentName:"ol"},"When there are explicit domains, the cookie will only be read if the\nrequest originates from one of the listed domains."),(0,i.kt)("li",{parentName:"ol"},"If CORS is disabled, the default behaviour is that the cookie won't\nbe read (because of potential security issues). To override the\nbehaviour, you can use the flag ",(0,i.kt)("inlineCode",{parentName:"li"},"--ws-read-cookie")," or the\nenvironment variable ",(0,i.kt)("inlineCode",{parentName:"li"},"HASURA_GRAPHQL_WS_READ_COOKIE"),". See\n",(0,i.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/deployment/graphql-engine-flags/reference"},"GraphQL Engine server config reference")," for the setting.")))}h.isMDXComponent=!0}}]);