"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9100],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return c}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(a),c=r,g=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},57109:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var n=a(83117),r=a(80102),l=(a(67294),a(3905)),i=["components"],o={sidebar_label:"Databases",sidebar_position:1,description:"Manage databases with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","database","source"]},s="Metadata API Reference: Databases",d={unversionedId:"graphql/core/api-reference/metadata-api/source",id:"graphql/core/api-reference/metadata-api/source",title:"Metadata API Reference: Databases",description:"Manage databases with the Hasura metadata API",source:"@site/docs/graphql/core/api-reference/metadata-api/source.mdx",sourceDirName:"graphql/core/api-reference/metadata-api",slug:"/graphql/core/api-reference/metadata-api/source",permalink:"/docs/latest/graphql/core/api-reference/metadata-api/source",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/metadata-api/source.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Databases",sidebar_position:1,description:"Manage databases with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","database","source"]},sidebar:"docsSidebar",previous:{title:"Metadata API Reference",permalink:"/docs/latest/graphql/core/api-reference/metadata-api/index"},next:{title:"Tables/Views",permalink:"/docs/latest/graphql/core/api-reference/metadata-api/table-view"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"pg_add_source",id:"metadata-pg-add-source",level:2},{value:"Args syntax",id:"metadata-pg-add-source-syntax",level:3},{value:"pg_drop_source",id:"metadata-pg-drop-source",level:2},{value:"Args syntax",id:"metadata-pg-drop-source-syntax",level:3},{value:"rename_source",id:"metadata-rename-source",level:2},{value:"Args syntax",id:"metadata-rename-source-syntax",level:3},{value:"mssql_add_source",id:"mssql-add-source",level:2},{value:"Args syntax",id:"mssql-add-source-syntax",level:3},{value:"mssql_drop_source",id:"mssql-drop-source",level:2},{value:"Args syntax",id:"mssql-drop-source-syntax",level:3},{value:"bigquery_add_source",id:"metadata-bigquery-add-source",level:2},{value:"Args syntax",id:"metadata-bigquery-add-source-syntax",level:3},{value:"bigquery_drop_source",id:"metadata-bigquery-drop-source",level:2},{value:"Args syntax",id:"metadata-bigquery-drop-source-syntax",level:3}],u={toc:m};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"metadata-api-reference-databases"},"Metadata API Reference: Databases"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Add/remove databases in Hasura GraphQL engine."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The metadata API is supported for versions ",(0,l.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above and\nreplaces the older ",(0,l.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/schema-metadata-api/index"},"schema/metadata API"),"."))),(0,l.kt)("h2",{id:"metadata-pg-add-source"},"pg_add_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_add_source")," is used to connect a Postgres database to Hasura."),(0,l.kt)("p",null,"Add a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"pg1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_add_source",\n  "args": {\n    "name": "pg1",\n    "configuration": {\n      "connection_info": {\n        "database_url": {\n           "from_env": "<DB_URL_ENV_VAR>"\n         },\n        "pool_settings": {\n          "max_connections": 50,\n          "idle_timeout": 180,\n          "retries": 1,\n          "pool_timeout": 360,\n          "connection_lifetime": 600\n        },\n        "use_prepared_statements": true,\n        "isolation_level": "read-committed",\n      }\n    },\n    "replace_configuration": false,\n    "customization": {\n      "root_fields": {\n        "namespace": "some_field_name",\n        "prefix": "some_field_name_prefix",\n        "suffix": "some_field_name_suffix"\n      },\n      "type_names": {\n        "prefix": "some_type_name_prefix",\n        "suffix": "some_type_name_suffix"\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-add-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the Postgres database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#pgconfiguration"},"PGConfiguration")),(0,l.kt)("td",{parentName:"tr",align:null},"Database connection configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"replace_configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," the configuration will be replaced if the source with given name already exists (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customization"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcecustomization"},"SourceCustomization")),(0,l.kt)("td",{parentName:"tr",align:null},"Customize root fields and type names for the source")))),(0,l.kt)("h2",{id:"metadata-pg-drop-source"},"pg_drop_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_drop_source")," is used to remove a Postgres database from Hasura."),(0,l.kt)("p",null,"Remove a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"pg1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_drop_source",\n  "args": {\n    "name": "pg1",\n    "cascade": true\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-drop-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the Postgres database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions etc.) from other sources (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")))),(0,l.kt)("h2",{id:"metadata-rename-source"},"rename_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"rename_source")," is used to rename an existing source."),(0,l.kt)("p",null,"Given there already exists a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"pg1"),", we can rename it to ",(0,l.kt)("inlineCode",{parentName:"p"},"pg2")," using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "rename_source",\n  "args": {\n    "name": "pg1",\n    "new_name": "pg2"\n  }\n}\n')),(0,l.kt)("p",null,"Note that all settings are kept, only the name is changed."),(0,l.kt)("h3",{id:"metadata-rename-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"new_name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the database")))),(0,l.kt)("h2",{id:"mssql-add-source"},"mssql_add_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mssql_add_source")," is used to connect an MS SQL Server database to Hasura."),(0,l.kt)("p",null,"Add a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"mssql1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "mssql_add_source",\n  "args": {\n    "name": "mssql1",\n    "configuration": {\n      "connection_info": {\n        "connection_string": {\n           "from_env": "<CONN_STRING_ENV_VAR>"\n         },\n        "pool_settings": {\n          "max_connections": 50,\n          "idle_timeout": 180\n        }\n      }\n    },\n    "customization": {\n      "root_fields": {\n        "namespace": "some_field_name",\n        "prefix": "some_field_name_prefix",\n        "suffix": "some_field_name_suffix"\n      },\n      "type_names": {\n        "prefix": "some_type_name_prefix",\n        "suffix": "some_type_name_suffix"\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"mssql-add-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the MS SQL Server database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#mssqlconfiguration"},"MsSQLConfiguration")),(0,l.kt)("td",{parentName:"tr",align:null},"Database connection configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"replace_configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," the configuration will be replaced if the source with given name already exists (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customization"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcecustomization"},"SourceCustomization")),(0,l.kt)("td",{parentName:"tr",align:null},"Customize root fields and type names for the source")))),(0,l.kt)("h2",{id:"mssql-drop-source"},"mssql_drop_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mssql_drop_source")," is used to remove an MS SQL Server database from Hasura."),(0,l.kt)("p",null,"Remove a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"mssql1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "mssql_drop_source",\n  "args": {\n    "name": "mssql1"\n  }\n}\n')),(0,l.kt)("h3",{id:"mssql-drop-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the MS SQL Server database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions etc.) from other sources (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")))),(0,l.kt)("h2",{id:"metadata-bigquery-add-source"},"bigquery_add_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bigquery_add_source")," is used to connect a BigQuery database to Hasura."),(0,l.kt)("p",null,"Add a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"bigquery1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "bigquery_add_source",\n  "args": {\n    "name": "bigquery1",\n    "configuration": {\n      "service_account": "bigquery_service_account",\n      "project_id": "bigquery_project_id",\n      "datasets": "dataset1, dataset2"\n    },\n    "customization": {\n      "root_fields": {\n        "namespace": "some_field_name",\n        "prefix": "some_field_name_prefix",\n        "suffix": "some_field_name_suffix"\n      },\n      "type_names": {\n        "prefix": "some_type_name_prefix",\n        "suffix": "some_type_name_suffix"\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-bigquery-add-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the BigQuery database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#bigqueryconfiguration"},"BigQueryConfiguration")),(0,l.kt)("td",{parentName:"tr",align:null},"Database connection configuration")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"replace_configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," the configuration will be replaced if the source with given name already exists (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customization"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcecustomization"},"SourceCustomization")),(0,l.kt)("td",{parentName:"tr",align:null},"Customize root fields and type names for the source")))),(0,l.kt)("h2",{id:"metadata-bigquery-drop-source"},"bigquery_drop_source"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bigquery_drop_source")," is used to remove a BigQuery database from Hasura."),(0,l.kt)("p",null,"Remove a database with name ",(0,l.kt)("inlineCode",{parentName:"p"},"bigquery1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "bigquery_drop_source",\n  "args": {\n    "name": "bigquery1"\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-bigquery-drop-source-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the BigQuery database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions etc.) from other sources (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")))))}c.isMDXComponent=!0}}]);