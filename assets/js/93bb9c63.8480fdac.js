"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2697],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function m(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?m(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):m(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},m=Object.keys(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)a=m[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,m=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=i(a),h=r,u=c["".concat(s,".").concat(h)]||c[h]||d[h]||m;return a?n.createElement(u,l(l({ref:t},p),{},{components:a})):n.createElement(u,l({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var m=a.length,l=new Array(m);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<m;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},36855:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var n=a(83117),r=a(80102),m=(a(67294),a(3905)),l=["components"],o={sidebar_label:"Remote Schemas",sidebar_position:11,description:"Manage remote schemas with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","remote schema"]},s="Metadata API Reference: Remote schemas",i={unversionedId:"graphql/core/api-reference/metadata-api/remote-schemas",id:"graphql/core/api-reference/metadata-api/remote-schemas",title:"Metadata API Reference: Remote schemas",description:"Manage remote schemas with the Hasura metadata API",source:"@site/docs/graphql/core/api-reference/metadata-api/remote-schemas.mdx",sourceDirName:"graphql/core/api-reference/metadata-api",slug:"/graphql/core/api-reference/metadata-api/remote-schemas",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/remote-schemas",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/metadata-api/remote-schemas.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"Remote Schemas",sidebar_position:11,description:"Manage remote schemas with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","remote schema"]},sidebar:"docsSidebar",previous:{title:"Scheduled Triggers",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/scheduled-triggers"},next:{title:"Remote Relationships",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/remote-relationships"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"add_remote_schema",id:"metadata-add-remote-schema",level:2},{value:"Args syntax",id:"metadata-add-remote-schema-syntax",level:3},{value:"update_remote_schema",id:"metadata-update-remote-schema",level:2},{value:"Args syntax",id:"metadata-update-remote-schema-syntax",level:3},{value:"remove_remote_schema",id:"metadata-remove-remote-schema",level:2},{value:"Args syntax",id:"metadata-remove-remote-schema-syntax",level:3},{value:"reload_remote_schema",id:"metadata-reload-remote-schema",level:2},{value:"Args syntax",id:"metadata-reload-remote-schema-syntax",level:3}],c={toc:d};function h(e){var t=e.components,a=(0,r.Z)(e,l);return(0,m.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"metadata-api-reference-remote-schemas"},"Metadata API Reference: Remote schemas"),(0,m.kt)("h2",{id:"introduction"},"Introduction"),(0,m.kt)("p",null,"Add/Remove a remote GraphQL server as remote schema in Hasura GraphQL\nengine."),(0,m.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,m.kt)("div",{parentName:"div",className:"admonition-heading"},(0,m.kt)("h5",{parentName:"div"},(0,m.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,m.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,m.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,m.kt)("div",{parentName:"div",className:"admonition-content"},(0,m.kt)("p",{parentName:"div"},"The metadata API is supported for versions ",(0,m.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above and\nreplaces the older ",(0,m.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/index"},"schema/metadata API"),"."))),(0,m.kt)("h2",{id:"metadata-add-remote-schema"},"add_remote_schema"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"add_remote_schema")," is used to add a remote GraphQL server as remote\nschema. GraphQL engine stitches it's schema with existing."),(0,m.kt)("p",null,"An example request as follows:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "add_remote_schema",\n    "args": {\n        "name": "my remote schema",\n        "definition": {\n            "url": "https://remote-server.com/graphql",\n            "headers": [{"name": "X-Server-Request-From", "value": "Hasura"}],\n            "forward_client_headers": false,\n            "timeout_seconds": 60,\n            "customization": {\n               "root_fields_namespace": "some_field_name",\n               "type_names": {\n                   "prefix": "some_type_name_prefix",\n                   "suffix": "some_type_name_suffix",\n                   "mapping": {\n                       "some_type_name": "some_new_type_name"\n                   }\n               },\n               "field_names": [ {\n                   "parent_type": "some_type_name",\n                   "prefix": "some_field_name_prefix",\n                   "suffix": "some_field_name_suffix",\n                   "mapping": {\n                       "some_field_name": "some_new_field_name"\n                   }\n               } ]\n            }\n        },\n        "comment": "some optional comment"\n    }\n}\n')),(0,m.kt)("h3",{id:"metadata-add-remote-schema-syntax"},"Args syntax"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Key"),(0,m.kt)("th",{parentName:"tr",align:null},"Required"),(0,m.kt)("th",{parentName:"tr",align:null},"Schema"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"name"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,m.kt)("td",{parentName:"tr",align:null},"Name of the remote schema")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"definition"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemadef"},"RemoteSchemaDef")),(0,m.kt)("td",{parentName:"tr",align:null},"Definition for the remote schema")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"comment"),(0,m.kt)("td",{parentName:"tr",align:null},"false"),(0,m.kt)("td",{parentName:"tr",align:null},"Text"),(0,m.kt)("td",{parentName:"tr",align:null},"comment")))),(0,m.kt)("h2",{id:"metadata-update-remote-schema"},"update_remote_schema"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"update_remote_schema")," is used to update the configuration of a remote\nschema. If the remote schema URL has changed then it will perform a\nintrospection as well. After introspection, if there are any\ninconsistencies detected with other metadata objects (like remote\nrelationships or remote schema permissions) they will be reported as"),(0,m.kt)("em",null,"inconsistent_metadata"),".",(0,m.kt)("p",null,"An example request as follows:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "update_remote_schema",\n    "args": {\n        "name": "my remote schema",\n        "definition": {\n            "url": "https://remote-server.com/graphql",\n            "headers": [{"name": "X-Server-Request-From", "value": "Hasura"}],\n            "forward_client_headers": false,\n            "timeout_seconds": 60,\n            "customization": {\n               "root_fields_namespace": "some_field_name",\n               "type_names": {\n                   "prefix": "some_type_name_prefix",\n                   "suffix": "some_type_name_suffix",\n                   "mapping": {\n                       "some_type_name": "some_new_type_name"\n                   }\n               },\n               "field_names": [ {\n                   "parent_type": "some_type_name",\n                   "prefix": "some_field_name_prefix",\n                   "suffix": "some_field_name_suffix",\n                   "mapping": {\n                       "some_field_name": "some_new_field_name"\n                   }\n               } ]\n            }\n        },\n        "comment": "some optional comment"\n    }\n}\n')),(0,m.kt)("h3",{id:"metadata-update-remote-schema-syntax"},"Args syntax"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Key"),(0,m.kt)("th",{parentName:"tr",align:null},"Required"),(0,m.kt)("th",{parentName:"tr",align:null},"Schema"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"name"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,m.kt)("td",{parentName:"tr",align:null},"Name of the remote schema")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"definition"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemadef"},"RemoteSchemaDef")),(0,m.kt)("td",{parentName:"tr",align:null},"Definition for the remote schema")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"comment"),(0,m.kt)("td",{parentName:"tr",align:null},"false"),(0,m.kt)("td",{parentName:"tr",align:null},"Text"),(0,m.kt)("td",{parentName:"tr",align:null},"comment")))),(0,m.kt)("h2",{id:"metadata-remove-remote-schema"},"remove_remote_schema"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"remove_remote_schema")," is used to delete a remote schema. GraphQL engine\nde-stitches it's schema."),(0,m.kt)("p",null,"An example request as follows:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "remove_remote_schema",\n    "args": {\n        "name": "my remote schema"\n    }\n}\n')),(0,m.kt)("h3",{id:"metadata-remove-remote-schema-syntax"},"Args syntax"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Key"),(0,m.kt)("th",{parentName:"tr",align:null},"Required"),(0,m.kt)("th",{parentName:"tr",align:null},"Schema"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"name"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,m.kt)("td",{parentName:"tr",align:null},"Name of the remote schema")))),(0,m.kt)("h2",{id:"metadata-reload-remote-schema"},"reload_remote_schema"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"reload_remote_schema")," is used to refresh schema of the remote server.\nGraphQL engine refetches schema from server and stitches."),(0,m.kt)("p",null,"An example request as follows:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "reload_remote_schema",\n    "args": {\n        "name": "my remote schema"\n    }\n}\n')),(0,m.kt)("h3",{id:"metadata-reload-remote-schema-syntax"},"Args syntax"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Key"),(0,m.kt)("th",{parentName:"tr",align:null},"Required"),(0,m.kt)("th",{parentName:"tr",align:null},"Schema"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"name"),(0,m.kt)("td",{parentName:"tr",align:null},"true"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,m.kt)("td",{parentName:"tr",align:null},"Name of the remote schema")))))}h.isMDXComponent=!0}}]);