"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8497],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=o,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1075:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),i=["components"],s={sidebar_label:"hasura completion",sidebar_position:8,description:"Generate auto completion code using the Hasura CLI",keywords:["hasura","docs","CLI","hasura completion"]},l="Hasura CLI: hasura completion",c={unversionedId:"graphql/core/hasura-cli/hasura_completion",id:"graphql/core/hasura-cli/hasura_completion",title:"Hasura CLI: hasura completion",description:"Generate auto completion code using the Hasura CLI",source:"@site/docs/graphql/core/hasura-cli/hasura_completion.mdx",sourceDirName:"graphql/core/hasura-cli",slug:"/graphql/core/hasura-cli/hasura_completion",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_completion",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/hasura-cli/hasura_completion.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_label:"hasura completion",sidebar_position:8,description:"Generate auto completion code using the Hasura CLI",keywords:["hasura","docs","CLI","hasura completion"]},sidebar:"docsSidebar",previous:{title:"hasura actions use-codegen",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_actions_use-codegen"},next:{title:"hasura console",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_console"}},p={},u=[{value:"Synopsis",id:"synopsis",level:2},{value:"Examples",id:"examples",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2},{value:"SEE ALSO",id:"see-also",level:2}],h={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hasura-cli-hasura-completion"},"Hasura CLI: hasura completion"),(0,a.kt)("p",null,"Generate auto completion code."),(0,a.kt)("h2",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Output shell completion code for the specified shell (bash or zsh)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"hasura completion [shell] [flags]\n")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Bash\n    # Linux\n      # Add Bash completion file using:\n      $ sudo hasura completion bash --file=/etc/bash_completion.d/hasura\n    # Mac\n      # Install bash-completion using homebrew:\n      $ brew install bash-completion\n      # Add to your ~/.bash_profile:\n      if [ -f $(brew --prefix)/etc/bash_completion ]; then\n          . $(brew --prefix)/etc/bash_completion\n      fi\n      # Add the completion file:\n      $ sudo hasura completion bash --file=$(brew --prefix)/etc/bash_completion.d/hasura\n    # Windows (Git Bash)\n      # open git bash\n      $ mkdir -p ~/.bash_completion.d\n      # Add the completion file:\n      $ cd ~ && hasura completion bash --file=.bash_completion.d/hasura\n      # Add the following to ~/.bash_profile\n        if [ -f ~/.bash_completion.d/hasura ]; then\n          . ~/.bash_completion.d/hasura\n        fi\n      # restart git bash\n\n  # Zsh (using oh-my-zsh)\n    $ mkdir -p $HOME/.oh-my-zsh/completions\n    $ hasura completion zsh --file=$HOME/.oh-my-zsh/completions/_hasura\n\n  # Reload the shell for the changes to take effect!\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    --file string   file to which output has to be written\n-h, --help          help for completion\n")),(0,a.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--envfile string      .env filename to load ENV vars from (default ".env")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default "INFO")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n')),(0,a.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/hasura-cli/hasura"},"hasura")," - Hasura GraphQL engine command line tool")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Auto generated by spf13/cobra")))}d.isMDXComponent=!0}}]);