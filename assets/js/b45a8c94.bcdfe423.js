"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5227],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},31980:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=n(83117),i=n(80102),r=(n(67294),n(3905)),s=["components"],o={sidebar_label:"Custom types",sidebar_position:2,description:"Custom GraphQL types for Hasura actions",keywords:["hasura","docs","actions","custom types"],slug:"types/index"},l="Custom GraphQL types",p={unversionedId:"graphql/core/actions/types",id:"graphql/core/actions/types",title:"Custom GraphQL types",description:"Custom GraphQL types for Hasura actions",source:"@site/docs/graphql/core/actions/types.mdx",sourceDirName:"graphql/core/actions",slug:"/graphql/core/actions/types/index",permalink:"/docs/latest/graphql/core/actions/types/index",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/actions/types.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Custom types",sidebar_position:2,description:"Custom GraphQL types for Hasura actions",keywords:["hasura","docs","actions","custom types"],slug:"types/index"},sidebar:"docsSidebar",previous:{title:"Creating actions",permalink:"/docs/latest/graphql/core/actions/create"},next:{title:"Action handlers",permalink:"/docs/latest/graphql/core/actions/action-handlers"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Object types",id:"object-types",level:2},{value:"Relationships",id:"relationships",level:3},{value:"Input types",id:"input-types",level:2},{value:"Scalar types",id:"scalar-types",level:2},{value:"Inbuilt scalars",id:"inbuilt-scalars",level:3},{value:"Custom scalars",id:"custom-scalars",level:3},{value:"Enum types",id:"enum-types",level:2}],m={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-graphql-types"},"Custom GraphQL types"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"You can add custom GraphQL types in Hasura that you can utilise for\ndefining your actions."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Limitations")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It is currently not possible to define ",(0,r.kt)("inlineCode",{parentName:"p"},"Interfaces")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Union types")," as\ncustom types"))),(0,r.kt)("h2",{id:"object-types"},"Object types"),(0,r.kt)("p",null,"The most basic components of a GraphQL schema are object types, which\njust represent a kind of object a GraphQL query can return, and what\nfields it has. In the GraphQL SDL, we might represent it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type UserInfo {\n  accessToken: String!\n  userId: Int!\n}\n")),(0,r.kt)("p",null,"This is an object type called ",(0,r.kt)("inlineCode",{parentName:"p"},"UserInfo")," that has two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"accessToken"),": This field is of type ",(0,r.kt)("inlineCode",{parentName:"li"},"String!")," (non-nullable\n",(0,r.kt)("inlineCode",{parentName:"li"},"String"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userId"),": This field is of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Int!")," (non-nullable ",(0,r.kt)("inlineCode",{parentName:"li"},"Int"),")")),(0,r.kt)("p",null,"From version ",(0,r.kt)("inlineCode",{parentName:"p"},"v2.2.0")," onwards, Hasura GraphQL engine supports nested objects."),(0,r.kt)("p",null,"For example, you can define a type like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type UserInfo {\n  accessToken: String!\n  userId: Int!\n  user: UserObj!\n}\n\ntype UserObj {\n  name: String!\n  favFood: String!\n  isAdmin: Boolean!\n}\n")),(0,r.kt)("p",null,"Recursive nested objects are also supported."),(0,r.kt)("p",null,"For example, you can use the following type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type UserObj {\n  name: String!\n  favFood: String!\n  isAdmin: Boolean!\n  friends: [UserObj]!\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#object-types-and-fields"},"See reference")),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"Custom object types can be connected to the rest of the graph by setting up\n",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/action-relationships"},"action relationships")," with tables/views."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For example"),", given the object type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type UserInfo {\n  accessToken: String!\n  userId: Int!\n}\n")),(0,r.kt)("p",null,"and tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"user (id int, name text)\norder (id int, user_id int, ...)\n")),(0,r.kt)("p",null,"We can create:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an ",(0,r.kt)("strong",{parentName:"li"},"object relationship")," called ",(0,r.kt)("inlineCode",{parentName:"li"},"loggedInUser")," between the\n",(0,r.kt)("inlineCode",{parentName:"li"},"UserInfo")," object type and the ",(0,r.kt)("inlineCode",{parentName:"li"},"user")," table via the\n",(0,r.kt)("inlineCode",{parentName:"li"},"UserInfo.userId")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"user.id")," fields."),(0,r.kt)("li",{parentName:"ul"},"an ",(0,r.kt)("strong",{parentName:"li"},"array relationship")," called ",(0,r.kt)("inlineCode",{parentName:"li"},"userOrders")," between the ",(0,r.kt)("inlineCode",{parentName:"li"},"UserInfo"),"\nobject type and the ",(0,r.kt)("inlineCode",{parentName:"li"},"order")," table via the ",(0,r.kt)("inlineCode",{parentName:"li"},"UserInfo.userId")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"order.user_id")," fields.")),(0,r.kt)("p",null,"The object type will now be modified as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{4,5}","{4,5}":!0},"type UserInfo {\n  accessToken: String!\n  userId: Int!\n  loggedInUser: user\n  userOrders: [order]\n}\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Only fields with non-list scalar types (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),") can be\nused to define relationships"))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Limitations")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Hasura has the following limitations for relationship in nested object\ntypes:"),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"For nested objects, relationships can only be defined for top-level\nfields. For example, for the following type definition:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type UserInfo {\n  accessToken: String!\n  userId: Int!\n  user: UserObj!\n}\n\ntype UserObj {\n  name: String!\n  favFood: String!\n  isAdmin: Boolean!\n}\n")),(0,r.kt)("p",{parentName:"li"},"relationships can only be defined using ",(0,r.kt)("inlineCode",{parentName:"p"},"accessToken")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"userID"),",\nyou cannot use ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"favFood")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"isAdmin")," fields in a\nrelationship definition.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"For ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," actions, you cannot have nested object types and\nrelationships in the same action."))))),(0,r.kt)("h2",{id:"input-types"},"Input types"),(0,r.kt)("p",null,"You can pass complex objects as arguments to queries and mutations. This\nis particularly valuable in cases where you might want to pass in a\nwhole object to be created. In the GraphQL SDL, input types look exactly\nthe same as regular object types, but with the keyword input instead of\ntype:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"input LoginInfo {\n  username: String!\n  password: String!\n}\n")),(0,r.kt)("p",null,"A field of an input type could be a ",(0,r.kt)("inlineCode",{parentName:"p"},"scalar"),", an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," or another input\ntype."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#input-types"},"See reference")),(0,r.kt)("h2",{id:"scalar-types"},"Scalar types"),(0,r.kt)("p",null,"A GraphQL object type has a name and fields, but at some point those\nfields have to resolve to some concrete data. That's where the scalar\ntypes come in: they represent the leaves of the query."),(0,r.kt)("h3",{id:"inbuilt-scalars"},"Inbuilt scalars"),(0,r.kt)("p",null,"Hasura comes with some default GraphQL scalars that you can directly\nstart using while defining your actions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Int"),": A signed 32\u2010bit integer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Float"),": A signed double-precision floating-point value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"String"),": A UTF\u20108 character sequence."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Boolean"),": true or false."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ID"),": The ID scalar type represents a unique identifier, often used\nto refetch an object or as the key for a cache. The ID type is\nserialized in the same way as a String; however, defining it as an\nID signifies that it is not intended to be human\u2010readable.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#scalar-types"},"See reference")),(0,r.kt)("h3",{id:"custom-scalars"},"Custom scalars"),(0,r.kt)("p",null,"Hasura allows you to define custom scalars. For example, if you want to\ndefine a scalar called ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),", you can define it like."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"scalar Date\n")),(0,r.kt)("p",null,"These scalars can be used as arguments of queries and mutations or as\nfields of object types and input types."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Postgres scalars")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Postgres base types are implicitly made available as GraphQL scalars;\nthere is no need to declare them separately. For example, in the\ndefinition"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type User {\n  id: uuid!\n  name: String!\n  location: geography\n}\n")),(0,r.kt)("p",{parentName:"div"},"the ",(0,r.kt)("inlineCode",{parentName:"p"},"uuid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"geography")," types are assumed to refer to Postgres\nscalars (assuming no other definition for them is provided)."))),(0,r.kt)("h2",{id:"enum-types"},"Enum types"),(0,r.kt)("p",null,"Enums are a special kind of scalar that is restricted to a particular\nset of allowed values. This allows you to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Validate that any arguments of this type are one of the allowed\nvalues"),(0,r.kt)("li",{parentName:"ul"},"Communicate through the type system that a field will always be one\nof a finite set of values")),(0,r.kt)("p",null,"Here's what an enum definition might look like in the GraphQL schema\nlanguage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"enum Color {\n  RED\n  GREEN\n  BLUE\n}\n")),(0,r.kt)("p",null,"This means that wherever we use the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Color")," in our schema, we\nexpect it to be exactly one of RED, GREEN, or BLUE."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#enumeration-types"},"See reference")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Additional Resources")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Introduction to Hasura Actions - ",(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/events/webinar/hasura-actions/?pg=docs&plcmt=body&cta=view-recording&tech="},"View Recording"),"."))))}u.isMDXComponent=!0}}]);