"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2515],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return t?a.createElement(h,s(s({ref:n},d),{},{components:t})):a.createElement(h,s({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},22138:function(e,n,t){var a=t(67294),i=t(57932),r=t(72389),s=t(86010),o=t(71077);n.Z=function(e){var n=e.query,t=e.variables,l=e.response,p=e.viewOnly,d=void 0===p||p,c=(0,r.Z)();return a.createElement("div",{className:"graphiql "+(0,s.Z)({"with-vars":!!t,"view-only":d})},a.createElement(i.ZP,{readOnly:d,editorTheme:"dracula",schema:null,fetcher:c?(0,o.n)({url:"https://hasura.io/graphql"}):function(){return null},query:n,variables:t,response:l}))}},62293:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return m}});var a=t(83117),i=t(80102),r=(t(67294),t(3905)),s=t(22138),o=["components"],l={sidebar_label:"Insert",sidebar_position:1,description:"Insert an object into Postgres using a mutation",keywords:["hasura","docs","postgres","mutation","insert"]},p="Postgres: Insert mutation",d={unversionedId:"graphql/core/databases/postgres/mutations/insert",id:"graphql/core/databases/postgres/mutations/insert",title:"Postgres: Insert mutation",description:"Insert an object into Postgres using a mutation",source:"@site/docs/graphql/core/databases/postgres/mutations/insert.mdx",sourceDirName:"graphql/core/databases/postgres/mutations",slug:"/graphql/core/databases/postgres/mutations/insert",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/insert",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/postgres/mutations/insert.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Insert",sidebar_position:1,description:"Insert an object into Postgres using a mutation",keywords:["hasura","docs","postgres","mutation","insert"]},sidebar:"docsSidebar",previous:{title:"Postgres: Mutations",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/index"},next:{title:"Upsert",permalink:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/upsert"}},c={},m=[{value:"Auto-generated insert mutation schema",id:"auto-generated-insert-mutation-schema",level:2},{value:"Insert a single object",id:"insert-a-single-object",level:2},{value:"Insert multiple objects of the same type in the same mutation",id:"insert-multiple-objects-of-the-same-type-in-the-same-mutation",level:2},{value:"Insert an object and get a nested object in response",id:"insert-an-object-and-get-a-nested-object-in-response",level:2},{value:"Insert an object along with its related objects through relationships",id:"pg-nested-inserts",level:2},{value:"One-to-one / One-to-many relationships",id:"one-to-one--one-to-many-relationships",level:3},{value:"Many-to-many relationships",id:"many-to-many-relationships",level:3},{value:"Insert an object with a JSONB field",id:"insert-an-object-with-a-jsonb-field",level:2},{value:"Insert an object with an ARRAY field",id:"insert-an-object-with-an-array-field",level:2},{value:"Set a field to its default value during insert",id:"set-a-field-to-its-default-value-during-insert",level:2},{value:"Set a field to NULL during insert",id:"set-a-field-to-null-during-insert",level:2}],u={toc:m};function h(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"postgres-insert-mutation"},"Postgres: Insert mutation"),(0,r.kt)("h2",{id:"auto-generated-insert-mutation-schema"},"Auto-generated insert mutation schema"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For example"),", the auto-generated schema for the insert mutation field\nfor a table ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," looks like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'insert_article (\n  objects: [article_insert_input!]!\n  on_conflict: article_on_conflict\n): article_mutation_response\n\n# response of any mutation on the table "article"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object insert (supported from v1.2.0)\ninsert_article_one (\n  object: article_insert_input!\n  on_conflict: article_on_conflict\n): article\n')),(0,r.kt)("p",null,"As you can see from the schema:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"objects")," argument is necessary and you can pass multiple ",(0,r.kt)("inlineCode",{parentName:"li"},"objects"),"\nto the mutation."),(0,r.kt)("li",{parentName:"ul"},"You can pass an ",(0,r.kt)("inlineCode",{parentName:"li"},"on_conflict")," argument to convert the mutation to an\n",(0,r.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/upsert"},"upsert mutation"),"."),(0,r.kt)("li",{parentName:"ul"},"You can return the number of affected rows and the affected objects\n(with nested objects) in the response."),(0,r.kt)("li",{parentName:"ul"},"You can use the single object insert to get the inserted object\ndirectly as the mutation response.")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/mutation#insert-upsert-syntax"},"insert mutation API reference")," for the\nfull specifications."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If a table is not in the ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," Postgres schema, the insert mutation\nfield will be of the format ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_<schema_name>_<table_name>"),"."))),(0,r.kt)("h2",{id:"insert-a-single-object"},"Insert a single object"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a new ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," object and return the inserted\narticle object in the response:"),(0,r.kt)(s.Z,{query:'mutation insert_single_article {\n  insert_article_one(\n    object: {\n      title: "Article 1",\n      content: "Sample article content",\n      author_id: 3\n    }\n  ) {\n    id\n    title\n  }\n}',response:'{\n  "data": {\n    "insert_article_one": {\n      "id": 21,\n      "title": "Article 1"\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,"Using variables:"),(0,r.kt)(s.Z,{query:"mutation insert_single_article($object: article_insert_input! ) {\n  insert_article_one(object: $object) {\n    id\n    title\n  }\n}",response:'{\n  "data": {\n    "insert_article_one": {\n      "id": 21,\n      "title": "Article 1"\n    }\n  }\n}',variables:'{\n  "object": {\n    "title": "Article 1",\n    "content": "Sample article content",\n    "author_id": 3\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"insert_<object>_one")," will ",(0,r.kt)("strong",{parentName:"p"},"only")," be available if you have select\npermissions on the table, as it returns the inserted row."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_<object>_one")," mutation is supported in versions ",(0,r.kt)("inlineCode",{parentName:"p"},"v1.2.0")," and above."))),(0,r.kt)("h2",{id:"insert-multiple-objects-of-the-same-type-in-the-same-mutation"},"Insert multiple objects of the same type in the same mutation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert 2 new ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," objects and return both the article\nobjects in the response:"),(0,r.kt)(s.Z,{query:'mutation insert_multiple_articles {\n  insert_article(\n    objects: [\n      {\n        title: "Article 2",\n        content: "Sample article content",\n        author_id: 4\n      },\n      {\n        title: "Article 3",\n        content: "Sample article content",\n        author_id: 5\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "affected_rows": 2,\n      "returning": [\n        {\n          "id": 22,\n          "title": "Article 2"\n        },\n        {\n          "id": 23,\n          "title": "Article 3"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,"Using variables:"),(0,r.kt)(s.Z,{query:"mutation insert_multiple_articles($objects: [article_insert_input!]! ) {\n  insert_article(objects: $objects) {\n    returning {\n      id\n      title\n    }\n  }\n}",response:'{\n    "data": {\n      "insert_article": {\n        "affected_rows": 2,\n        "returning": [\n          {\n            "id": 22,\n            "title": "Article 2"\n          },\n          {\n            "id": 23,\n            "title": "Article 3"\n          }\n        ]\n      }\n    }\n}',variables:'{\n  "objects": [\n    {\n      "title": "Article 2",\n      "content": "Sample article content",\n      "author_id": 4\n    },\n    {\n      "title": "Article 3",\n      "content": "Sample article content",\n      "author_id": 5\n    }\n  ]\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"insert-an-object-and-get-a-nested-object-in-response"},"Insert an object and get a nested object in response"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a new ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," object and return the inserted\narticle object with its author in the response:"),(0,r.kt)(s.Z,{query:'mutation insert_article {\n  insert_article(\n    objects: [\n      {\n        title: "Article 1",\n        content: "Sample article content",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n      author {\n        id\n        name\n      }\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "affected_rows": 1,\n      "returning": [\n        {\n          "id": 21,\n          "title": "Article 1",\n          "author": {\n            "id": 3,\n            "name": "Sidney"\n          }\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"pg-nested-inserts"},"Insert an object along with its related objects through relationships"),(0,r.kt)("h3",{id:"one-to-one--one-to-many-relationships"},"One-to-one / One-to-many relationships"),(0,r.kt)("p",null,"Let's say an ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," has an ",(0,r.kt)("inlineCode",{parentName:"p"},"object relationship")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"addresses")," table and an ",(0,r.kt)("inlineCode",{parentName:"p"},"array relationship")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"articles")," to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"articles")," table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert an ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," along with their ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," and a few\n",(0,r.kt)("inlineCode",{parentName:"p"},"articles"),"."),(0,r.kt)(s.Z,{query:'mutation insertData {\n  insert_authors\n    (objects: [\n      {\n        name: "John",\n        address: {\n          data: {\n            location: "San Francisco"\n          }\n        },\n        articles: {\n          data: [\n            {\n              title: "GraphQL Guide",\n              content: "Let\'s see what we can do with GraphQL"\n            },\n            {\n              title: "Authentication Guide",\n              content: "Let\'s look at best practices for authentication"\n            }\n          ]\n        }\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      address_id\n      address {\n        id\n        location\n      }\n      articles {\n        id\n        title\n        author_id\n      }\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_authors": {\n      "affected_rows": 4,\n      "returning": [\n        {\n          "id": 26,\n          "name": "John",\n          "address_id": 27,\n          "address": {\n            "id": 27,\n            "location": "San Francisco"\n          },            \n          "articles": [\n            {\n              "id": 28,\n              "title": "GraphQL Guide",\n              "author_id": 26\n            },\n            {\n              "id": 29,\n              "title": "Authentication Guide",\n              "author_id": 26,\n            }\n          ]\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How it works")),(0,r.kt)("p",null,"A nested insert mutation is processed as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The object relationship objects are inserted first, i.e. in this\ncase, the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," is inserted and its ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is collected in this\nstep.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The parent object is inserted next. i.e. in this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"author"),"\nis now inserted with the ",(0,r.kt)("inlineCode",{parentName:"p"},"address_id")," being set to the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of the\naddress that was inserted. Because of this, it is not allowed to\npass ",(0,r.kt)("inlineCode",{parentName:"p"},"address_id")," in the author object if you are also providing\ndata for the address relationship."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of the author is collected in this step.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The array relationship objects are inserted at the end. i.e. in this\ncase, the ",(0,r.kt)("inlineCode",{parentName:"p"},"articles")," are now inserted with their ",(0,r.kt)("inlineCode",{parentName:"p"},"author_id")," set to\nthe author's ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," collected in the step 2. Hence, it's not possible\nto specify ",(0,r.kt)("inlineCode",{parentName:"p"},"author_id")," in the data for the articles relationship."))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The order of object insertion can be controlled using the\n",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#objrelusingmanualmapping"},"insertion_order")," option while creating a\nmanual relationship. This is necessary to ensure\n",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/guides/data-modelling/one-to-one#one-to-one-insert"},"nested inserts")," in one-to-one relationships are\npossible using either side as the parent which would otherwise error out\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},"Not-NULL violation")," error in one of the cases."))),(0,r.kt)("h3",{id:"many-to-many-relationships"},"Many-to-many relationships"),(0,r.kt)("p",null,"Let's say the ",(0,r.kt)("inlineCode",{parentName:"p"},"articles")," has a\n",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/guides/data-modelling/many-to-many"},"many-to-many relationship")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags"),"\ntable via a bridge table ",(0,r.kt)("inlineCode",{parentName:"p"},"article_tags"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert an ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," along with a few ",(0,r.kt)("inlineCode",{parentName:"p"},"tags"),"."),(0,r.kt)(s.Z,{query:'mutation insertArticle {\n  insert_articles(objects: [\n    {\n      title: "How to make fajitas",\n      content: "Guide on making the best fajitas in the world",\n      author_id: 3,\n      article_tags: {\n        data: [\n          {\n            tag: {\n              data: {\n                label: "Recipes"\n              },\n              on_conflict: {\n                constraint: tags_label_key,\n                update_columns: [label]\n              }\n            }\n          },\n          {\n            tag: {\n              data: {\n                label: "Cooking"\n              },\n              on_conflict: {\n                constraint: tags_label_key,\n                update_columns: [label]\n              }\n            }\n          }  \n        ]\n      }\n    }\n  ]) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      author_id\n      article_tags {\n        tag {\n          label\n        }\n      }\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_articles": {\n      "affected_rows": 5,\n      "returning": [\n        {\n          "author_id": 3,\n          "article_tags": [\n            {\n              "tag": {\n                "label": "Recipes"\n              }\n            },\n            {\n              "tag": {\n                "label": "Cooking"\n              }\n            }\n          ],\n          "content": "Guide on making the best fajitas in the world",\n          "id": 34,\n          "title": "How to make fajitas"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How it works")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The parent object (from the perspective of ",(0,r.kt)("inlineCode",{parentName:"p"},"article"),") is inserted\nfirst i.e. the ",(0,r.kt)("inlineCode",{parentName:"p"},"article")," is inserted."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of the article is collected in this step.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The array relationship objects (from the perspective of ",(0,r.kt)("inlineCode",{parentName:"p"},"article"),")\nare inserted next i.e. the ",(0,r.kt)("inlineCode",{parentName:"p"},"article_tags")," are inserted."),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The object relationship objects (from the perspective of\n",(0,r.kt)("inlineCode",{parentName:"p"},"article_tags"),") are inserted now i.e. the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," are now\ninserted."),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ids")," of the tags are collected in this step.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The parent object (from the perspective of ",(0,r.kt)("inlineCode",{parentName:"p"},"article_tags"),") is\ninserted at the end i.e. the ",(0,r.kt)("inlineCode",{parentName:"p"},"article_tags")," are now inserted\nwith their ",(0,r.kt)("inlineCode",{parentName:"p"},"article_id")," set to the article's ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," collected in\nstep 1. The ",(0,r.kt)("inlineCode",{parentName:"p"},"tag_id")," is set to the tag's ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," collected in step\n2.1. Hence, it\u2019s not possible to specify ",(0,r.kt)("inlineCode",{parentName:"p"},"article_id")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"tag_id")," in the data for the ",(0,r.kt)("em",null,"article_tags")," relationship."))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"on_conflict")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"on_conflict")," can be passed as an argument in a nested insert statement.\nIn our example, we say that if the unique key (",(0,r.kt)("inlineCode",{parentName:"p"},"label"),") already exists\nfor a tag, we update the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," of this respective tag (see\n",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/upsert#pg-nested-upsert-caveats"},"nested upsert caveats"),")."),(0,r.kt)("h2",{id:"insert-an-object-with-a-jsonb-field"},"Insert an object with a JSONB field"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a new ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," object with a JSONB ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," field:"),(0,r.kt)(s.Z,{query:'mutation insert_author($address: jsonb) {\n  insert_author (\n    objects: [\n      {\n        name: "Ash",\n        address: $address\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      address\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_author": {\n      "affected_rows": 1,\n      "returning": [\n        {\n          "id": 1,\n          "name": "Ash",\n          "address": {\n            "city": "Bengaluru",\n            "phone": "9090909090",\n            "state": "Karnataka",\n            "pincode": 560095,\n            "street_address": "161, 19th Main Road, Koramangala 6th Block"\n          }\n        }\n      ]\n    }\n  }\n}',variables:'{\n  "address": {\n    "street_address": "161, 19th Main Road, Koramangala 6th Block",\n    "city": "Bengaluru",\n    "phone": "9090909090",\n    "state": "Karnataka",\n    "pincode": 560095\n  }\n',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"insert-an-object-with-an-array-field"},"Insert an object with an ARRAY field"),(0,r.kt)("p",null,"To insert fields of array types, you currently have to pass them as a\n",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/arrays.html#ARRAYS-INPUT"},"Postgres array literal"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Insert a new ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," with a text array ",(0,r.kt)("inlineCode",{parentName:"p"},"emails")," field:"),(0,r.kt)(s.Z,{query:'mutation insert_author {\n  insert_author (\n    objects: [\n      {\n        name: "Ash",\n        emails: "{ash@ash.com, ash123@ash.com}"\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      emails\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_author": {\n      "affected_rows": 1,\n      "returning": [\n        {\n          "id": 1,\n          "name": "Ash",\n          "emails": ["ash@ash.com", "ash123@ash.com"]\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,"Using variables:"),(0,r.kt)(s.Z,{query:'mutation insert_author($emails: _text) {\n  insert_author (\n    objects: [\n      {\n        name: "Ash",\n        emails: $emails\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      emails\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_author": {\n      "affected_rows": 1,\n      "returning": [\n        {\n          "id": 1,\n          "name": "Ash",\n          "emails": ["ash@ash.com", "ash123@ash.com"]\n        }\n      ]\n    }\n  }\n}',variables:'{\n  "emails": "{ash@ash.com, ash123@ash.com}"\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"set-a-field-to-its-default-value-during-insert"},"Set a field to its default value during insert"),(0,r.kt)("p",null,"To set a field to its ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," value, just omit it from the input\nobject, irrespective of the\n",(0,r.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/schema/default-values/postgres-defaults"},"default value configuration")," i.e. via Postgres\ndefaults or using column presets."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," If the default value of ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is set to auto-incrementing\ninteger, there's no need to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field to the input object:"),(0,r.kt)(s.Z,{query:'mutation insert_article_with_def_id {\n  insert_article(\n    objects: [\n      {\n        title: "Article 1",\n        content: "Sample article content",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_article": {\n      "affected_rows": 1,\n      "returning": [\n        {\n          "id": 21,\n          "title": "Article 1"\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"set-a-field-to-null-during-insert"},"Set a field to NULL during insert"),(0,r.kt)("p",null,"If a field is ",(0,r.kt)("inlineCode",{parentName:"p"},"nullable")," in the database, to set its value to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),",\neither pass its value as ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or just omit it from the input object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," If ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," is a nullable field, to set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", either\ndon't pass the age field to the input object or pass it as ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,r.kt)(s.Z,{query:'mutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: "Jeff"\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_author": {\n      "returning": [\n        {\n            "id": 11,\n            "name": "Jeff",\n            "age": null\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,"OR"),(0,r.kt)(s.Z,{query:'mutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: "Jeff",\n        age: null\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}',response:'{\n  "data": {\n    "insert_author": {\n      "returning": [\n        {\n            "id": 11,\n            "name": "Jeff",\n            "age": null\n        }\n      ]\n    }\n  }\n}',mdxType:"GraphiQLIDE"}))}h.isMDXComponent=!0}}]);