"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8233],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(t),m=i,c=h["".concat(o,".").concat(m)]||h[m]||u[m]||r;return t?a.createElement(c,l(l({ref:n},d),{},{components:t})):a.createElement(c,l({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},22138:function(e,n,t){var a=t(67294),i=t(57932),r=t(72389),l=t(86010),s=t(71077);n.Z=function(e){var n=e.query,t=e.variables,o=e.response,p=e.viewOnly,d=void 0===p||p,u=(0,r.Z)();return a.createElement("div",{className:"graphiql "+(0,l.Z)({"with-vars":!!t,"view-only":d})},a.createElement(i.ZP,{readOnly:d,editorTheme:"dracula",schema:null,fetcher:u?(0,s.n)({url:"https://hasura.io/graphql"}):function(){return null},query:n,variables:t,response:o}))}},58025:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return h}});var a=t(83117),i=t(80102),r=(t(67294),t(3905)),l=t(22138),s=["components"],o={sidebar_label:"Filter query results / search queries",sidebar_position:4,description:"Filter query results and search queries on MS SQL Server in Hasura",keywords:["hasura","docs","ms sql server","query","filter","search"]},p="MS SQL Server: Filter query results / search queries",d={unversionedId:"graphql/core/databases/ms-sql-server/queries/query-filters",id:"graphql/core/databases/ms-sql-server/queries/query-filters",title:"MS SQL Server: Filter query results / search queries",description:"Filter query results and search queries on MS SQL Server in Hasura",source:"@site/docs/graphql/core/databases/ms-sql-server/queries/query-filters.mdx",sourceDirName:"graphql/core/databases/ms-sql-server/queries",slug:"/graphql/core/databases/ms-sql-server/queries/query-filters",permalink:"/docs/latest/graphql/core/databases/ms-sql-server/queries/query-filters",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/ms-sql-server/queries/query-filters.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Filter query results / search queries",sidebar_position:4,description:"Filter query results and search queries on MS SQL Server in Hasura",keywords:["hasura","docs","ms sql server","query","filter","search"]},sidebar:"docsSidebar",previous:{title:"Aggregation queries",permalink:"/docs/latest/graphql/core/databases/ms-sql-server/queries/aggregation-queries"},next:{title:"Sort query results",permalink:"/docs/latest/graphql/core/databases/ms-sql-server/queries/sorting"}},u={},h=[{value:"The <strong>where</strong> argument",id:"the-where-argument",level:2},{value:"Comparison operators",id:"comparison-operators",level:2},{value:"Equality operators (_eq, _neq)",id:"equality-operators-_eq-_neq",level:3},{value:"Greater than or less than operators (_gt, _lt, _gte, _lte)",id:"greater-than-or-less-than-operators-_gt-_lt-_gte-_lte",level:3},{value:"List based search operators (_in, _nin)",id:"list-based-search-operators-_in-_nin",level:3},{value:"Text search or pattern matching operators (_like)",id:"text-search-or-pattern-matching-operators-_like",level:3},{value:"Spatial relationship operators (_st_contains, _st_crosses, etc.)",id:"spatial-relationship-operators-_st_contains-_st_crosses-etc",level:3},{value:"Filter or check for null values (_is_null)",id:"filter-or-check-for-null-values-_is_null",level:3},{value:"Filter based on failure of some criteria (_not)",id:"filter-based-on-failure-of-some-criteria-_not",level:2},{value:"Using multiple filters in the same query (_and, _or)",id:"using-multiple-filters-in-the-same-query-_and-_or",level:2},{value:"Filter nested objects",id:"ms-sql-server-nested-filter",level:2},{value:"Filter based on nested objects&#39; fields",id:"filter-based-on-nested-objects-fields",level:2},{value:"Fetch if the single nested object defined via an object relationship satisfies a condition",id:"fetch-if-the-single-nested-object-defined-via-an-object-relationship-satisfies-a-condition",level:3},{value:"Fetch if <strong>any</strong> of the nested objects defined via an array relationship satisfy a condition",id:"fetch-if-any-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition",level:3},{value:"Fetch if <strong>all</strong> of the nested objects defined via an array relationship satisfy a condition",id:"fetch-if-all-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition",level:3},{value:"Fetch if <strong>none</strong> of the nested objects defined via an array relationship satisfy a condition",id:"fetch-if-none-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition",level:3},{value:"Fetch if nested object(s) exist/do not exist",id:"fetch-if-nested-objects-existdo-not-exist",level:3},{value:"The TRUE expression ( <strong>{ }</strong> )",id:"ms-sql-server-true-expression",level:2},{value:"Evaluation of <strong>null</strong> values in comparison expressions",id:"ms-sql-server-null-value-evaluation",level:2}],m={toc:h};function c(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ms-sql-server-filter-query-results--search-queries"},"MS SQL Server: Filter query results / search queries"),(0,r.kt)("h2",{id:"the-where-argument"},"The ",(0,r.kt)("strong",{parentName:"h2"},"where")," argument"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument in your queries to filter results based\non some field\u2019s values (even nested objects' fields). You can even use\nmultiple filters in the same ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," clause using the ",(0,r.kt)("inlineCode",{parentName:"p"},"_and")," or the\n",(0,r.kt)("inlineCode",{parentName:"p"},"_or")," operators."),(0,r.kt)("p",null,'For example, to fetch data for an author whose name is "Sidney":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{3}","{3}":!0},'query {\n  authors(\n    where: { name: { _eq: "Sidney" } }\n    ) {\n    id\n    name\n  }\n}\n')),(0,r.kt)("p",null,"You can also use nested objects' fields to filter rows from a table and\nalso filter the nested objects as well."),(0,r.kt)("p",null,"For example, to fetch a list of authors who have articles with a rating\ngreater than 4 along with those articles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{2,5}","{2,5}":!0},"query {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n")),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"_eq")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_gt")," are examples of comparison operators that can be\nused in the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument to filter on equality."),(0,r.kt)("p",null,"You can see the complete specification of the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/graphql-api/query#whereexp"},"API reference"),"."),(0,r.kt)("h2",{id:"comparison-operators"},"Comparison operators"),(0,r.kt)("p",null,"Let\u2019s take a look at different comparison operators that can be used to\nfilter results."),(0,r.kt)("h3",{id:"equality-operators-_eq-_neq"},"Equality operators (","_","eq, ","_","neq)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_eq")," (equal to) or the ",(0,r.kt)("inlineCode",{parentName:"p"},"_neq")," (not equal to) operators are\ncompatible with any MS SQL Server type (like ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Float"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"Double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Text"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Time"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Timestamp"),", etc.)."),(0,r.kt)("p",null,"The following are examples of using the equality operators on different\ntypes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Integer (works with Double, Float, Int, etc.)")),(0,r.kt)("p",null,"Fetch data about an author whose ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," ",(0,r.kt)("em",{parentName:"p"},"(an integer field)")," is equal to\n3:"),(0,r.kt)(l.Z,{query:"query {\n  authors(\n    where: {id: {_eq: 3}}\n  ) {\n    id\n    name\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 3,\n        "name": "Sidney"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: String or Text")),(0,r.kt)("p",null,"Fetch a list of authors with ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("em",{parentName:"p"},"(a text field)"),' as "Sidney":'),(0,r.kt)(l.Z,{query:'query {\n  authors(\n    where: {name: {_eq: "Sidney"}}\n  ) {\n    id\n    name\n  }\n}',response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 3,\n        "name": "Sidney"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Boolean")),(0,r.kt)("p",null,"Fetch a list of articles that have not been published (",(0,r.kt)("inlineCode",{parentName:"p"},"is_published")," is\na boolean field):"),(0,r.kt)(l.Z,{query:"query {\n  articles(\n    where: {is_published: {_eq: false}}\n  ) {\n    id\n    title\n    is_published\n  }\n}",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 5,\n        "title": "ut blandit",\n        "is_published": false\n      },\n      {\n        "id": 8,\n        "title": "donec semper sapien",\n        "is_published": false\n      },\n      {\n        "id": 10,\n        "title": "dui proin leo",\n        "is_published": false\n      },\n      {\n        "id": 14,\n        "title": "congue etiam justo",\n        "is_published": false\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Date (works with Time, Timezone, etc.)")),(0,r.kt)("p",null,"Fetch a list of articles that were published on a certain date\n(",(0,r.kt)("inlineCode",{parentName:"p"},"published_on")," is a Date field):"),(0,r.kt)(l.Z,{query:'query {\n  articles(\n    where: {published_on: {_eq: "2017-05-26"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}',response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "published_on": "2017-05-26"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"greater-than-or-less-than-operators-_gt-_lt-_gte-_lte"},"Greater than or less than operators (","_","gt, ","_","lt, ","_","gte, ","_","lte)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_gt")," (greater than), ",(0,r.kt)("inlineCode",{parentName:"p"},"_lt")," (less than), ",(0,r.kt)("inlineCode",{parentName:"p"},"_gte")," (greater than or\nequal to), ",(0,r.kt)("inlineCode",{parentName:"p"},"_lte")," (less than or equal to) operators are compatible with\nany MS SQL Server type (like ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Text"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Time"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Timestamp"),", etc.)."),(0,r.kt)("p",null,"The following are examples of using these operators on different types:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Integer (works with Double, Float, etc.)")),(0,r.kt)("p",null,"Fetch a list of articles rated 4 or more (",(0,r.kt)("inlineCode",{parentName:"p"},"rating")," is an integer field):"),(0,r.kt)(l.Z,{query:"query {\n  articles(\n    where: {rating: {_gte: 4}}\n  ) {\n    id\n    title\n    rating\n  }\n}",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "rating": 4\n      },\n      {\n        "id": 7,\n        "title": "nisl duis ac",\n        "rating": 4\n      },\n      {\n        "id": 17,\n        "title": "montes nascetur ridiculus",\n        "rating": 5\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: String or Text")),(0,r.kt)("p",null,"Fetch a list of authors whose names begin with M or any letter that\nfollows M ",(0,r.kt)("em",{parentName:"p"},"(essentially, a filter based on a dictionary sort)"),":"),(0,r.kt)(l.Z,{query:'query {\n  authors(\n    where: {name: {_gt: "M"}}\n  ) {\n    id\n    name\n  }\n}',response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 3,\n        "name": "Sidney"\n      },\n      {\n        "id": 9,\n        "name": "Ninnetta"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Date (works with Time, Timezone, etc.)")),(0,r.kt)("p",null,'Fetch a list of articles that were published on or after date\n"01/01/2018":'),(0,r.kt)(l.Z,{query:'query {\n  articles(\n    where: {published_on: {_gte: "2018-01-01"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}',response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 2,\n        "title": "a nibh",\n        "published_on": "2018-06-10"\n      },\n      {\n        "id": 6,\n        "title": "sapien ut",\n        "published_on": "2018-01-08"\n      },\n      {\n        "id": 13,\n        "title": "vulputate elementum",\n        "published_on": "2018-03-10"\n      },\n      {\n        "id": 15,\n        "title": "vel dapibus at",\n        "published_on": "2018-01-02"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"list-based-search-operators-_in-_nin"},"List based search operators (","_","in, ","_","nin)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_in")," (in a list) and ",(0,r.kt)("inlineCode",{parentName:"p"},"_nin")," (not in list) operators are used to\ncompare field values to a list of values. They are compatible with any\nMS SQL Server type (like ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Text"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Date"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Time"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"Timestamp"),", etc.)."),(0,r.kt)("p",null,"The following are examples of using these operators on different types:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Integer (works with Double, Float, etc.)")),(0,r.kt)("p",null,"Fetch a list of articles rated 1, 3 or 5:"),(0,r.kt)(l.Z,{query:"query {\n  articles(\n    where: {rating: {_in: [1,3,5]}}\n  ) {\n    id\n    title\n    rating\n  }\n}",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "rating": 1\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "rating": 3\n      },\n      {\n        "id": 6,\n        "title": "sapien ut",\n        "rating": 1\n      },\n      {\n        "id": 17,\n        "title": "montes nascetur ridiculus",\n        "rating": 5\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: String or Text")),(0,r.kt)("p",null,"Fetch a list of those authors whose names are NOT part of a list:"),(0,r.kt)(l.Z,{query:'query {\n  authors(\n    where: {name: {_nin: ["Justin","Sidney","April"]}}\n  ) {\n    id\n    name\n  }\n}',response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 2,\n        "name": "Beltran"\n      },\n      {\n        "id": 4,\n        "name": "Anjela"\n      },\n      {\n        "id": 5,\n        "name": "Amii"\n      },\n      {\n        "id": 6,\n        "name": "Corny"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"text-search-or-pattern-matching-operators-_like"},"Text search or pattern matching operators (","_","like)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_like"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_nlike")," operators are used for pattern matching on\nstring/text fields."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ","_","like")),(0,r.kt)("p",null,"Fetch a list of articles whose titles contain the word \u201camet\u201d:"),(0,r.kt)(l.Z,{query:'query {\n  articles(\n    where: {title: {_like: "%amet%"}}\n  ) {\n    id\n    title\n  }\n}',response:'{\n"data": {\n  "articles": [\n    {\n      "id": 1,\n      "title": "sit amet"\n    },\n    {\n      "id": 3,\n      "title": "amet justo morbi"\n    },\n    {\n      "id": 9,\n      "title": "sit amet"\n    }\n  ]',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"spatial-relationship-operators-_st_contains-_st_crosses-etc"},"Spatial relationship operators (","_","st_contains, ","_","st_crosses, etc.)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_contains"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_crosses"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_equals"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_intersects"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"_st_overlaps"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_touches"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_st_within")," operators are used to filter\nbased on ",(0,r.kt)("inlineCode",{parentName:"p"},"geometry")," like columns."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"_st_intersects")," can be used on ",(0,r.kt)("inlineCode",{parentName:"p"},"geography")," columns also."),(0,r.kt)("p",null,"Use JSON representation (see\n",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7946"},"GeoJSON"),") of ",(0,r.kt)("inlineCode",{parentName:"p"},"geometry")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"geography")," values in ",(0,r.kt)("inlineCode",{parentName:"p"},"variables")," as shown in the following examples:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ","_","st_within")),(0,r.kt)("p",null,"Fetch a list of geometry values which are within the given ",(0,r.kt)("inlineCode",{parentName:"p"},"polygon"),"\nvalue:"),(0,r.kt)(l.Z,{query:"query geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_within: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}",variables:'{\n  "polygon": {\n    "type": "Polygon",\n    "coordinates": [\n      [\n        [ 0, 0 ],\n        [ 0, 2 ],\n        [ 2, 2 ],\n        [ 2, 0 ],\n        [ 0, 0 ]\n      ]\n    ]\n  }\n}',response:'{\n  "data": {\n    "geom_table": [\n      {\n        "id": 1,\n        "geom_col": {\n          "type": "Point",\n          "coordinates": [\n            1,\n            2\n          ]\n        }\n      }\n    ]\n  }\n}\n',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"filter-or-check-for-null-values-_is_null"},"Filter or check for null values (","_","is_null)"),(0,r.kt)("p",null,"Checking for null values can be achieved using the ",(0,r.kt)("inlineCode",{parentName:"p"},"_is_null")," operator."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Filter null values in a field")),(0,r.kt)("p",null,"Fetch a list of articles that have a value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"published_on")," field:"),(0,r.kt)(l.Z,{query:"query {\n  articles(\n    where: {published_on: {_is_null: false}}\n  ) {\n    id\n    title\n    published_on\n  }\n}",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "published_on": "2017-08-09"\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "published_on": "2018-06-10"\n      },\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "published_on": "2017-05-26"\n      },\n      {\n        "id": 4,\n        "title": "vestibulum ac est",\n        "published_on": "2017-03-05"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"filter-based-on-failure-of-some-criteria-_not"},"Filter based on failure of some criteria (","_","not)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_not")," operator can be used to fetch results for which some\ncondition does not hold true. i.e. to invert the filter set for a\ncondition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ","_","not")),(0,r.kt)("p",null,"Fetch all authors who don't have any published articles:"),(0,r.kt)(l.Z,{query:"{\n  authors(\n    where: {\n      _not: {\n        articles: { is_published: {_eq: true} }\n      }\n    }) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 7,\n        "name": "Berti",\n        "articles": [\n          {\n            "title": "ipsum primis in",\n            "is_published": false\n          }\n        ]\n      },\n      {\n        "id": 9,\n        "name": "Ninnetta",\n        "articles": []\n      },\n      {\n        "id": 10,\n        "name": "Lyndsay",\n        "articles": [\n          {\n            "title": "dui proin leo",\n            "is_published": false\n          }\n        ]\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"using-multiple-filters-in-the-same-query-_and-_or"},"Using multiple filters in the same query (","_","and, ","_","or)"),(0,r.kt)("p",null,"You can group multiple parameters in the same ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"_and")," or the ",(0,r.kt)("inlineCode",{parentName:"p"},"_or")," operators to filter results based on more than one\ncriteria."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"_or")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_and")," operators along with the ",(0,r.kt)("inlineCode",{parentName:"p"},"_not"),"\noperator to create arbitrarily complex boolean expressions involving\nmultiple filtering criteria."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ","_","and")),(0,r.kt)("p",null,"Fetch a list of articles published in a specific time-frame (for\nexample: in year 2017):"),(0,r.kt)(l.Z,{query:'query {\n  articles (\n    where: {\n      _and: [\n        { published_on: {_gte: "2017-01-01"}},\n        { published_on: {_lte: "2017-12-31"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    published_on\n  }\n}',response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "published_on": "2017-08-09"\n      },\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "published_on": "2017-05-26"\n      },\n      {\n        "id": 4,\n        "title": "vestibulum ac est",\n        "published_on": "2017-03-05"\n      },\n      {\n        "id": 9,\n        "title": "sit amet",\n        "published_on": "2017-05-16"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Certain ",(0,r.kt)("inlineCode",{parentName:"p"},"_and")," expressions can be expressed in a simpler format using\nsome syntactic sugar. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/graphql-api/query#andexp"},"API reference")," for more details."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: ","_","or")),(0,r.kt)("p",null,'Fetch a list of articles rated more than 4 or published after\n"01/01/2018":'),(0,r.kt)(l.Z,{query:'query {\n  articles (\n    where: {\n      _or: [\n        {rating: {_gte: 4}},\n        {published_on: {_gte: "2018-01-01"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    rating\n    published_on\n  }\n}',response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 2,\n        "title": "a nibh",\n        "rating": 3,\n        "published_on": "2018-06-10"\n      },\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "rating": 4,\n        "published_on": "2017-05-26"\n      },\n      {\n        "id": 6,\n        "title": "sapien ut",\n        "rating": 1,\n        "published_on": "2018-01-08"\n      },\n      {\n        "id": 7,\n        "title": "nisl duis ac",\n        "rating": 4,\n        "published_on": "2016-07-09"\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_or")," operator expects an array of expressions as input. If an\nobject is passed as input it will behave like the ",(0,r.kt)("inlineCode",{parentName:"p"},"_and")," operator as\nexplained in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/graphql-api/query#orexp"},"API reference")))),(0,r.kt)("h2",{id:"ms-sql-server-nested-filter"},"Filter nested objects"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument can be used in ",(0,r.kt)("strong",{parentName:"p"},"array relationships")," as well to\nfilter the nested objects. ",(0,r.kt)("strong",{parentName:"p"},"Object relationships")," have only one nested\nobject and hence they do not expose the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Fetch all authors with only their 5 rated articles:"),(0,r.kt)(l.Z,{query:"{\n  authors {\n    id\n    name\n    articles(where: {rating: {_eq: 5}}) {\n      title\n      rating\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 1,\n        "name": "Justin",\n        "articles": []\n      },\n      {\n        "id": 2,\n        "name": "Beltran",\n        "articles": []\n      },\n      {\n        "id": 5,\n        "name": "Amii",\n        "articles": [\n          {\n            "title": "montes nascetur ridiculus",\n            "rating": 5\n          }\n        ]\n      },\n      {\n        "id": 6,\n        "name": "Corny",\n        "articles": []\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"filter-based-on-nested-objects-fields"},"Filter based on nested objects' fields"),(0,r.kt)("p",null,"You can use the fields of nested objects as well to filter your query\nresults."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{2}","{2}":!0},'query {\n  articles(where: { author: { name: { _eq: "Sidney" } } }) {\n    id\n    title\n  }\n}\n')),(0,r.kt)("p",null,"The behaviour of the comparison operators depends on whether the nested\nobjects are a single object related via an object relationship or an\narray of objects related via an array relationship."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In case of an ",(0,r.kt)("strong",{parentName:"li"},"object relationship"),", a row will be returned if the\nsingle nested object satisfies the defined condition."),(0,r.kt)("li",{parentName:"ul"},"In case of an ",(0,r.kt)("strong",{parentName:"li"},"array relationship"),", a row will be returned if\n",(0,r.kt)("strong",{parentName:"li"},"any of the nested objects")," satisfy the defined condition.")),(0,r.kt)("p",null,"Let's look at a few use cases based on the above:"),(0,r.kt)("h3",{id:"fetch-if-the-single-nested-object-defined-via-an-object-relationship-satisfies-a-condition"},"Fetch if the single nested object defined via an object relationship satisfies a condition"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,'Fetch all articles whose author\'s name starts with "A":'),(0,r.kt)(l.Z,{query:'{\n  articles (\n    where: {\n      author: {\n        name: { _like: "A%"}\n      }\n    }\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}',response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "author": {\n          "name": "Anjela"\n        }\n      },\n      {\n        "id": 3,\n        "title": "amet justo morbi",\n        "author": {\n          "name": "Anjela"\n        }\n      },\n      {\n        "id": 4,\n        "title": "vestibulum ac est",\n        "author": {\n          "name": "Amii"\n        }\n      },\n      {\n        "id": 12,\n        "title": "volutpat quam pede",\n        "author": {\n          "name": "Amii"\n        }\n      },\n      {\n        "id": 13,\n        "title": "vulputate elementum",\n        "author": {\n          "name": "April"\n        }\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"fetch-if-any-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition"},"Fetch if ",(0,r.kt)("strong",{parentName:"h3"},"any")," of the nested objects defined via an array relationship satisfy a condition"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Fetch all authors which have written at least one article which is rated 1:"),(0,r.kt)(l.Z,{query:"{\n  authors(\n    where: {\n      articles: {rating: {_eq: 1}}\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      rating\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 1,\n        "name": "Justin",\n        "articles": [\n          {\n            "title": "sem duis aliquam",\n            "rating": 1\n          },\n          {\n            "title": "vel dapibus at",\n            "rating": 4\n          }\n        ]\n      },\n      {\n        "id": 4,\n        "name": "Anjela",\n        "articles": [\n          {\n            "title": "sit amet",\n            "rating": 1\n          },\n          {\n            "title": "amet justo morbi",\n            "rating": 4\n          }\n        ]\n      },\n      {\n        "id": 3,\n        "name": "Sidney",\n        "articles": [\n          {\n            "title": "sapien ut",\n            "rating": 1\n          },\n          {\n            "title": "turpis eget",\n            "rating": 3\n          },\n          {\n            "title": "congue etiam justo",\n            "rating": 4\n          }\n        ]\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"fetch-if-all-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition"},"Fetch if ",(0,r.kt)("strong",{parentName:"h3"},"all")," of the nested objects defined via an array relationship satisfy a condition"),(0,r.kt)("p",null,"By default a row is returned if any of the nested objects satisfy a\ncondition. To achieve the above, we need to frame the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," expression\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"{_not: {inverse-of-condition}}"),". This reads as: fetch if not (any of\nthe nested objects satisfy the inverted condition) i.e. all of the\nnested objects satisfy the condition."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"condition"),(0,r.kt)("th",{parentName:"tr",align:null},"where expression"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{object: {field: {_eq: "value"}}}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{_not: {object: {field: {_neq: "value"}}}'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{object: {field: {_gt: "value"}}}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{_not: {object: {field: {_lte: "value"}}}'))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Fetch all authors which have all of their articles published i.e. have\n",(0,r.kt)("inlineCode",{parentName:"p"},"{is_published {_eq: true}"),"."),(0,r.kt)(l.Z,{query:"{\n  authors (\n    where: {\n      _not: {\n        articles: {is_published: {_neq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 1,\n        "name": "Justin",\n        "articles": [\n          {\n            "title": "vel dapibus at",\n            "is_published": true\n          },\n          {\n            "title": "sem duis aliquam",\n            "is_published": true\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "name": "Beltran",\n        "articles": [\n          {\n            "title": "a nibh",\n            "is_published": true\n          },\n          {\n            "title": "sit amet",\n            "is_published": true\n          }\n        ]\n      },\n      {\n        "id": 4,\n        "name": "Anjela",\n        "articles": [\n          {\n            "title": "sit amet",\n            "is_published": true\n          }\n        ]\n      },\n      {\n        "id": 8,\n        "name": "April",\n        "articles": [\n          {\n            "title": "vulputate elementum",\n            "is_published": true\n          },\n          {\n            "title": "eu nibh",\n            "is_published": true\n          }\n        ]\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"fetch-if-none-of-the-nested-objects-defined-via-an-array-relationship-satisfy-a-condition"},"Fetch if ",(0,r.kt)("strong",{parentName:"h3"},"none")," of the nested objects defined via an array relationship satisfy a condition"),(0,r.kt)("p",null,"By default a row is returned if any of the nested objects satisfy a\ncondition. To achieve the above, we need to frame the ",(0,r.kt)("inlineCode",{parentName:"p"},"where")," expression\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"{_not: {condition}}"),". This reads as: fetch if not (any of the nested\nobjects satisfy the condition) i.e. none of the nested objects satisy\nthe condition."),(0,r.kt)("p",null,"For example,"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"condition"),(0,r.kt)("th",{parentName:"tr",align:null},"where expression"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{object: {field: {_eq: "value"}}}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{_not: {object: {field: {_eq: "value"}}}'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{object: {field: {_gt: "value"}}}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{_not: {object: {field: {_gt: "value"}}}'))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Fetch all authors which have none of their articles published i.e. have\n",(0,r.kt)("inlineCode",{parentName:"p"},"{is_published {_eq: true}"),":"),(0,r.kt)(l.Z,{query:"{\n  authors(\n    where: {\n      _not: {\n        articles: {is_published: {_eq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 7,\n        "name": "Berti",\n        "articles": [\n          {\n            "title": "ipsum primis in",\n            "is_published": false\n          }\n        ]\n      },\n      {\n        "id": 10,\n        "name": "Lyndsay",\n        "articles": [\n          {\n            "title": "dui proin leo",\n            "is_published": false\n          }\n        ]\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h3",{id:"fetch-if-nested-objects-existdo-not-exist"},"Fetch if nested object(s) exist/do not exist"),(0,r.kt)("p",null,"You can filter results based on if they have nested objects by checking\nif any nested objects exist. This can be achieved by using the\nexpression ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," which evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if any object exists."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example where nested object(s) exist:")),(0,r.kt)("p",null,"Fetch all authors which have at least one article written by them:"),(0,r.kt)(l.Z,{query:"{\n  authors (\n    where: {\n      articles: {}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 1,\n        "name": "Justin",\n        "articles_aggregate": {\n          "aggregate": {\n            "count": 2\n          }\n        }\n      },\n      {\n        "id": 4,\n        "name": "Anjela",\n        "articles_aggregate": {\n          "aggregate": {\n            "count": 1\n          }\n        }\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example where nested object(s) do not exist:")),(0,r.kt)("p",null,"Fetch all authors which have not written any articles:"),(0,r.kt)(l.Z,{query:"{\n  authors (\n    where: {\n      _not: {\n        articles: {}\n      }\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 2,\n        "name": "Beltran",\n        "articles_aggregate": {\n          "aggregate": {\n            "count": 0\n          }\n        }\n      },\n      {\n        "id": 3,\n        "name": "Sidney",\n        "articles_aggregate": {\n          "aggregate": {\n            "count": 0\n          }\n        }\n      }\n    ]\n  }\n}',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"ms-sql-server-true-expression"},"The TRUE expression ( ",(0,r.kt)("strong",{parentName:"h2"},"{ }")," )"),(0,r.kt)("p",null,"The expression ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if an object exists (even if\nit's ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For example"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"any query with the condition ",(0,r.kt)("inlineCode",{parentName:"li"},"{ where: {} }")," will return all objects\nwithout applying any filter."),(0,r.kt)("li",{parentName:"ul"},"any query with the condition ",(0,r.kt)("inlineCode",{parentName:"li"},"{ where: { nested_object: {} } }")," will\nreturn all objects for which atleast one ",(0,r.kt)("inlineCode",{parentName:"li"},"nested_object")," exists.")),(0,r.kt)("h2",{id:"ms-sql-server-null-value-evaluation"},"Evaluation of ",(0,r.kt)("strong",{parentName:"h2"},"null")," values in comparison expressions"),(0,r.kt)("p",null,"If in any comparison expression a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," value is passed, a type\nmismatch error will be thrown."),(0,r.kt)("p",null,"For example, the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"{ where: {id: { _eq: null }}}")," will throw\nan error."))}c.isMDXComponent=!0}}]);