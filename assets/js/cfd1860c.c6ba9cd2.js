"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[428],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),h=m(a),u=r,c=h["".concat(o,".").concat(u)]||h[u]||d[u]||l;return a?n.createElement(c,i(i({ref:t},s),{},{components:a})):n.createElement(c,i({ref:t},s))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=h;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},32:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return d}});var n=a(83117),r=a(80102),l=(a(67294),a(3905)),i=["components"],p={sidebar_label:"Remote Relationships",sidebar_position:12,description:"Manage remote relationships with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","remote joins","remote relationships"]},o="Metadata API Reference: Remote Relationships",m={unversionedId:"graphql/core/api-reference/metadata-api/remote-relationships",id:"graphql/core/api-reference/metadata-api/remote-relationships",title:"Metadata API Reference: Remote Relationships",description:"Manage remote relationships with the Hasura metadata API",source:"@site/docs/graphql/core/api-reference/metadata-api/remote-relationships.mdx",sourceDirName:"graphql/core/api-reference/metadata-api",slug:"/graphql/core/api-reference/metadata-api/remote-relationships",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/remote-relationships",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/metadata-api/remote-relationships.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_label:"Remote Relationships",sidebar_position:12,description:"Manage remote relationships with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","remote joins","remote relationships"]},sidebar:"docsSidebar",previous:{title:"Remote Schemas",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/remote-schemas"},next:{title:"Query Collections",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/query-collections"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"pg_create_remote_relationship",id:"metadata-pg-create-remote-relationship",level:2},{value:"Args syntax",id:"metadata-pg-create-remote-relationship-syntax",level:3},{value:"pg_update_remote_relationship",id:"metadata-pg-update-remote-relationship",level:2},{value:"Args syntax",id:"metadata-pg-update-remote-relationship-syntax",level:3},{value:"pg_delete_remote_relationship",id:"metadata-pg-delete-remote-relationship",level:2},{value:"Args syntax",id:"metadata-pg-delete-remote-relationship-syntax",level:3}],h={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"metadata-api-reference-remote-relationships"},"Metadata API Reference: Remote Relationships"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Remote Relationships allow you to join tables with remote schemas."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The metadata API is supported for versions ",(0,l.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above and\nreplaces the older ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/index"},"schema/metadata API"),"."))),(0,l.kt)("h2",{id:"metadata-pg-create-remote-relationship"},"pg_create_remote_relationship"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_create_remote_relationship")," is used to create a new remote\nrelationship with an existing remote schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   "type":"pg_create_remote_relationship",\n   "args":{\n      "name": "sample_remote_relationship",\n      "table": "users",\n      "hasura_fields": ["id"],\n      "remote_schema": "my-remote-schema",\n      "remote_field": {\n        "messages": {\n           "arguments": {\n              "id":"$id"\n           }\n        }\n      }\n   }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-create-remote-relationship-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoterelationshipname"},"RemoteRelationshipName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the remote relationship")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#qualifiedtable"},"QualifiedTable")),(0,l.kt)("td",{parentName:"tr",align:null},"Object with table name and schema")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hasura_fields"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"[",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#pgcolumn"},"PGColumn")," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#computedfieldname"},"ComputedFieldName"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"Column/Computed field(s) in the table that is used for joining with remote schema field. All join keys in ",(0,l.kt)("inlineCode",{parentName:"td"},"remote_field")," must appear here.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remote_schema"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the remote schema to join with")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remote_field"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remotefield"},"RemoteField")),(0,l.kt)("td",{parentName:"tr",align:null},"The schema tree ending at the field in remote schema which needs to be joined with.")))),(0,l.kt)("h2",{id:"metadata-pg-update-remote-relationship"},"pg_update_remote_relationship"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_update_remote_relationship")," is used to update an existing remote relationship."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_update_remote_relationship",\n  "args": {\n     "name": "sample_remote_relationship",\n     "table": "users",\n     "hasura_fields": ["id"],\n     "remote_schema": "my-remote-schema",\n     "remote_field": {\n       "posts": {\n          "arguments": {\n             "id": "$id",\n             "likes": {\n                "lte":"1000"\n             }\n          }\n       }\n     }\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-update-remote-relationship-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoterelationshipname"},"RemoteRelationshipName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the remote relationship")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#qualifiedtable"},"QualifiedTable")),(0,l.kt)("td",{parentName:"tr",align:null},"Object with table name and schema")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hasura_fields"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"[",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#pgcolumn"},"PGColumn"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"Column(s) in the table that is used for joining with remote schema field. All join keys in ",(0,l.kt)("inlineCode",{parentName:"td"},"remote_field")," must appear here.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remote_schema"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the remote schema to join with")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remote_field"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remotefield"},"RemoteField")),(0,l.kt)("td",{parentName:"tr",align:null},"The schema tree ending at the field in remote schema which needs to be joined with.")))),(0,l.kt)("h2",{id:"metadata-pg-delete-remote-relationship"},"pg_delete_remote_relationship"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_delete_remote_relationship")," is used to delete an existing remote relationship."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "pg_delete_remote_relationship",\n    "args" : {\n       "table":{\n          "name":"users",\n          "schema":"public"\n       },\n       "name":"sample_remote_relationship"\n    }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-delete-remote-relationship-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#qualifiedtable"},"QualifiedTable")),(0,l.kt)("td",{parentName:"tr",align:null},"Object with table name and schema")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoterelationshipname"},"RemoteRelationshipName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the remote relationship")))))}u.isMDXComponent=!0}}]);