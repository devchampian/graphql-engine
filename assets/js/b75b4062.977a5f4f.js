"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5983],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=a,u=d["".concat(l,".").concat(g)]||d[g]||h[g]||o;return n?r.createElement(u,i(i({ref:t},p),{},{components:n})):r.createElement(u,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31689:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return h}});var r=n(83117),a=n(80102),o=(n(67294),n(3905)),i=["components"],s={sidebar_label:"How Hasura migrations work (config v2)",sidebar_position:1,description:"How Hasura migrations work",keywords:["hasura","docs","migration","how it works"]},l="How Hasura migrations work (config v2)",c={unversionedId:"graphql/core/migrations/config-v2/reference/how-it-works",id:"graphql/core/migrations/config-v2/reference/how-it-works",title:"How Hasura migrations work (config v2)",description:"How Hasura migrations work",source:"@site/docs/graphql/core/migrations/config-v2/reference/how-it-works.mdx",sourceDirName:"graphql/core/migrations/config-v2/reference",slug:"/graphql/core/migrations/config-v2/reference/how-it-works",permalink:"/graphql-engine/latest/graphql/core/migrations/config-v2/reference/how-it-works",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/migrations/config-v2/reference/how-it-works.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"How Hasura migrations work (config v2)",sidebar_position:1,description:"How Hasura migrations work",keywords:["hasura","docs","migration","how it works"]},sidebar:"docsSidebar",previous:{title:"Reference documentation",permalink:"/graphql-engine/latest/graphql/core/migrations/config-v2/reference/"},next:{title:"Migration file format",permalink:"/graphql-engine/latest/graphql/core/migrations/config-v2/reference/migration-file-format"}},p={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Metadata",id:"metadata",level:2},{value:"Migrations",id:"migrations",level:2}],d={toc:h};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-hasura-migrations-work-config-v2"},"How Hasura migrations work (config v2)"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This is an explanation on how the Hasura migration system works. To\nunderstand how to use the system, refer to ",(0,o.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/migrations/config-v2/index"},"Migrations & Metadata"),"."),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("p",null,"Let's first talk about metadata. Whenever you do certain actions on the\nconsole or via the API, Hasura records it in the ",(0,o.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/how-it-works/metadata-schema"},"metadata catalogue")," which is a schema called\n",(0,o.kt)("inlineCode",{parentName:"p"},"hdb_catalog")," in your Postgres database. For example, if you track a\ntable, a new entry is created in the ",(0,o.kt)("inlineCode",{parentName:"p"},"hdb_catalog.hdb_table")," table in\nPostgres. Similarly, there are more tables in this schema to track\nrelationships, event triggers, functions and remote schemas."),(0,o.kt)("p",null,"All information in this schema can be exported as files. Export options\nare available on the console, CLI and via the API. These files when\nimported to an existing or new Hasura instance, will clear out the\n",(0,o.kt)("inlineCode",{parentName:"p"},"hdb_catalog")," schema on that instance and populates it again with the\nimported data. One thing to note is that all the Postgres resources the\nmetadata refers to should already exist when the import happens,\notherwise Hasura will throw an error."),(0,o.kt)("h2",{id:"migrations"},"Migrations"),(0,o.kt)("p",null,"While metadata can be exported as files as a representation of the state\nof Hasura, you might want more granular step-by-step checkpoints on the\nevolution of the state. You might also want to track the Postgres schema\nchanges through Hasura's migration system."),(0,o.kt)("p",null,"Migrations are stored and applied as steps (or versions). A migration\nstep (or version) contains changes to the Postgres schema. The migration\nversion can also store the ",(0,o.kt)("inlineCode",{parentName:"p"},"up")," migration (creating resources) and the\n",(0,o.kt)("inlineCode",{parentName:"p"},"down")," migration (deleting resources). For example, migration version\n",(0,o.kt)("inlineCode",{parentName:"p"},"1")," can include the SQL statements required to create a table called\n",(0,o.kt)("inlineCode",{parentName:"p"},"profile")," as the ",(0,o.kt)("inlineCode",{parentName:"p"},"up")," migration and SQL statements to drop this table as\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"down")," migration."),(0,o.kt)("p",null,"The migration versions can be automatically generated by the Hasura\nconsole or can be written by hand. They are stored as SQL files in a\ndirectory called ",(0,o.kt)("inlineCode",{parentName:"p"},"migrations"),"."),(0,o.kt)("p",null,"For more details on the format of these files, refer to ",(0,o.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/migrations/config-v2/reference/migration-file-format"},"Migration file format reference (config v2)"),"."),(0,o.kt)("p",null,"When someone executes ",(0,o.kt)("inlineCode",{parentName:"p"},"migrate apply")," using the Hasura CLI, the CLI will\nfirst read the migration files present in the designated directory. The\nCLI would then contact the Hasura Server and get the status of all\nmigrations applied to the server by reading the\n",(0,o.kt)("inlineCode",{parentName:"p"},"hdb_catalog.schema_migrations")," table. Each row in this table denotes a\nmigration version that is already applied on the server."),(0,o.kt)("p",null,"By comparing these two sets of versions, the CLI derives which versions\nare already applied and which are not. The CLI would then go ahead and\napply the migrations on the server. This is done by executing the\nactions against the database through the Hasura metadata APIs. Whenever\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"apply")," command is used, all migrations that are to be applied are\nexecuted in a Postgres transaction (through a ",(0,o.kt)("inlineCode",{parentName:"p"},"bulk")," API call). The\nadvantage of doing this is that if there are any errors, all actions are\nrolled back and the user can properly debug the error without worrying\nabout partial changes."),(0,o.kt)("p",null,"The default action of the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrate apply")," command is to execute all the\n",(0,o.kt)("inlineCode",{parentName:"p"},"up")," migrations. In order to roll back changes, you would need to\nexecute ",(0,o.kt)("inlineCode",{parentName:"p"},"down")," migrations using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--down")," flag on the CLI."),(0,o.kt)("p",null,"This guide provides an overall idea of how the system works. For more\ndetails on how to actually use the system, refer to ",(0,o.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/migrations/config-v2/index"},"Migrations & Metadata (config v2)"),"."))}g.isMDXComponent=!0}}]);