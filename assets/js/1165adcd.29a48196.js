"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6969],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return u}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(r),u=n,d=h["".concat(l,".").concat(u)]||h[u]||m[u]||s;return r?a.createElement(d,o(o({ref:t},p),{},{components:r})):a.createElement(d,o({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},15943:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var a=r(83117),n=r(80102),s=(r(67294),r(3905)),o=["components"],i={slug:"index",description:"Manage remote relationships with MS SQL Server in Hasura",keywords:["hasura","docs","ms sql server","schema","relationship","remote relationship"]},l="MS SQL Server: Remote relationships",c={unversionedId:"graphql/core/databases/ms-sql-server/schema/remote-relationships/index",id:"graphql/core/databases/ms-sql-server/schema/remote-relationships/index",title:"MS SQL Server: Remote relationships",description:"Manage remote relationships with MS SQL Server in Hasura",source:"@site/docs/graphql/core/databases/ms-sql-server/schema/remote-relationships/index.mdx",sourceDirName:"graphql/core/databases/ms-sql-server/schema/remote-relationships",slug:"/graphql/core/databases/ms-sql-server/schema/remote-relationships/index",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/schema/remote-relationships/index",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/ms-sql-server/schema/remote-relationships/index.mdx",tags:[],version:"current",frontMatter:{slug:"index",description:"Manage remote relationships with MS SQL Server in Hasura",keywords:["hasura","docs","ms sql server","schema","relationship","remote relationship"]},sidebar:"docsSidebar",previous:{title:"Database modelling",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/schema/table-relationships/database-modelling"},next:{title:"To remote database",permalink:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/schema/remote-relationships/remote-source-relationships"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Benefits",id:"benefits",level:2}],h={toc:m};function u(e){var t=e.components,r=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ms-sql-server-remote-relationships"},"MS SQL Server: Remote relationships"),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,'Remote relationships (aka "remote joins") allow you to join data across\ntables and remote data sources. The remote data source can either be a\n',(0,s.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/remote-schemas/index"},"remote schema"),' or a table from a second database source.\nOnce you create relationships between types from your database tables and types created from remote schemas,\nyou can then "join" them by running GraphQL queries.'),(0,s.kt)("p",null,"See the following guides on how to create different types of remote\nrelationships related to MS SQL Server:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/schema/remote-relationships/remote-source-relationships"},"Database to database relationships"),": To join\ndata across tables between two different database sources, such as order information stored in a SQL Server database, and user information stored\nin a separate SQL Server or say a Postgres database."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/databases/ms-sql-server/schema/remote-relationships/remote-schema-relationships"},"Database to Remote Schema relationships"),": To\njoin data across tables and remote GraphQL APIs. For example, you can join customer data from your tables with account data from Stripe, Spotify, or Auth0."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/remote-schemas/remote-relationships/remote-schema-db-relationships"},"Remote Schema to database relationships"),": To join\ndata from your remote schemas (such as Stripe, Spotify or Auth0) to customer data from your tables.")),(0,s.kt)("h2",{id:"benefits"},"Benefits"),(0,s.kt)("p",null,"Hasura's remote joins architecture provides the following benefits."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Security"),": Hasura's ",(0,s.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/auth/authorization/index"},"authorization model")," gives\nyou role-based access control. This extends to remote\nschemas as well. Hasura will ",(0,s.kt)("a",{parentName:"li",href:"/graphql-engine/latest/graphql/core/remote-schemas/auth/index"},"forward your session variables"),"\nwhich can be used to implement custom authorization in your remote\nschemas. Native role-based permissions on remote schemas is in the\nworks."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Performance"),": Hasura strives for optimal performance. It creates\nan efficient execution plan which pushes down most of the\nheavy-lifting involved to underlying sources. For example, Hasura\ncreates a single efficient query to your database and batches calls\nto remote schemas to avoid the ",(0,s.kt)("a",{parentName:"li",href:"https://hasura.io/learn/graphql/intro-graphql/graphql-server/"},"n+1\nproblem"),"\n. More improvements to performance are upcoming."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Schema integrity & consistency"),": Hasura has metadata consistency\nchecks at every level. Whenever you add a table or remote schema,\nHasura makes sure that the graph that is exposed is\nconsistent, and that all the relationships make sense at a type\nlevel. This helps you in creating robust workflows to test changes\nin your CI and making safe deployments of your unified graph."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Data federation"),": With remote joins, the join, authorization, and\nconsistency checks of added sources all happen at the Hasura layer\nvia metadata. This allows underlying data sources and APIs to evolve\nindependently. Your applications have a unified API to query the\nfull data landscape in your org.")))}u.isMDXComponent=!0}}]);