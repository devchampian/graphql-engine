"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1383],{3905:function(a,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function n(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function o(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,r)}return t}function s(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){n(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function i(a,e){if(null==a)return{};var t,r,n=function(a,e){if(null==a)return{};var t,r,n={},o=Object.keys(a);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(n[t]=a[t]);return n}(a,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(n[t]=a[t])}return n}var p=r.createContext({}),l=function(a){var e=r.useContext(p),t=e;return a&&(t="function"==typeof a?a(e):s(s({},e),a)),t},u=function(a){var e=l(a.components);return r.createElement(p.Provider,{value:e},a.children)},c={inlineCode:"code",wrapper:function(a){var e=a.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(a,e){var t=a.components,n=a.mdxType,o=a.originalType,p=a.parentName,u=i(a,["components","mdxType","originalType","parentName"]),d=l(t),m=n,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return t?r.createElement(h,s(s({ref:e},u),{},{components:t})):r.createElement(h,s({ref:e},u))}));function m(a,e){var t=arguments,n=e&&e.mdxType;if("string"==typeof a||n){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=a,i.mdxType="string"==typeof a?a:n,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24161:function(a,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=t(83117),n=t(80102),o=(t(67294),t(3905)),s=["components"],i={sidebar_label:"hasura metadata apply",sidebar_position:13,description:"Apply Hasura metadata on a database using the Hasura CLI",keywords:["hasura","docs","CLI","hasura metadata apply"]},p="Hasura CLI: hasura metadata apply",l={unversionedId:"graphql/core/hasura-cli/hasura_metadata_apply",id:"graphql/core/hasura-cli/hasura_metadata_apply",title:"Hasura CLI: hasura metadata apply",description:"Apply Hasura metadata on a database using the Hasura CLI",source:"@site/docs/graphql/core/hasura-cli/hasura_metadata_apply.mdx",sourceDirName:"graphql/core/hasura-cli",slug:"/graphql/core/hasura-cli/hasura_metadata_apply",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_metadata_apply",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/hasura-cli/hasura_metadata_apply.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_label:"hasura metadata apply",sidebar_position:13,description:"Apply Hasura metadata on a database using the Hasura CLI",keywords:["hasura","docs","CLI","hasura metadata apply"]},sidebar:"docsSidebar",previous:{title:"hasura metadata",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_metadata"},next:{title:"hasura metadata clear",permalink:"/docs/latest/graphql/core/hasura-cli/hasura_metadata_clear"}},u={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Examples",id:"examples",level:2},{value:"Options",id:"options",level:2},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:2},{value:"SEE ALSO",id:"see-also",level:2}],d={toc:c};function m(a){var e=a.components,t=(0,n.Z)(a,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hasura-cli-hasura-metadata-apply"},"Hasura CLI: hasura metadata apply"),(0,o.kt)("p",null,"Apply Hasura metadata on a database."),(0,o.kt)("h2",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"Apply Hasura metadata on a database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hasura metadata apply [flags]\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Apply Hasura GraphQL engine metadata present in metadata.[yaml|json] file:\nhasura metadata apply\n\n# Use with admin secret:\nhasura metadata apply --admin-secret "<admin-secret>"\n\n# Apply metadata to an instance specified by the flag:\nhasura metadata apply --endpoint "<endpoint>"\n')),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    --dry-run         show metadata generated from project directory without applying to server.  generated metadata will be printed as JSON by default, use -o flag for other display formats\n-h, --help            help for apply\n-o, --output string   specify an output format to show applied metadata. Allowed values: json, yaml (default "json")\n')),(0,o.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'--admin-secret string            admin secret for Hasura GraphQL engine (env "HASURA_GRAPHQL_ADMIN_SECRET")\n--certificate-authority string   path to a cert file for the certificate authority (env "HASURA_GRAPHQL_CERTIFICATE_AUTHORITY")\n--endpoint string                http(s) endpoint for Hasura GraphQL engine (env "HASURA_GRAPHQL_ENDPOINT")\n--envfile string                 .env filename to load ENV vars from (default ".env")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env "HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default "INFO")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n')),(0,o.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/hasura-cli/hasura_metadata"},"hasura metadata")," - Manage Hasura GraphQL engine metadata saved in the database")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Auto generated by spf13/cobra")))}m.isMDXComponent=!0}}]);