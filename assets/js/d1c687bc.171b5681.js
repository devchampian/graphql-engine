"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9388],{3905:function(e,a,t){t.d(a,{Zo:function(){return m},kt:function(){return u}});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=d(t),u=r,h=p["".concat(s,".").concat(u)]||p[u]||c[u]||i;return t?n.createElement(h,l(l({ref:a},m),{},{components:t})):n.createElement(h,l({ref:a},m))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},70942:function(e,a,t){t.r(a),t.d(a,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var n=t(83117),r=t(80102),i=(t(67294),t(3905)),l=["components"],o={sidebar_label:"Manage Metadata",sidebar_position:16,description:"Manage metadata with the Hasura schema/metadata API",keywords:["hasura","docs","schema/metadata API","API reference","metadata"],toc_max_heading_level:2},s="Schema/Metadata API Reference: Manage metadata (Deprecated)",d={unversionedId:"graphql/core/api-reference/schema-metadata-api/manage-metadata",id:"graphql/core/api-reference/schema-metadata-api/manage-metadata",title:"Schema/Metadata API Reference: Manage metadata (Deprecated)",description:"Manage metadata with the Hasura schema/metadata API",source:"@site/docs/graphql/core/api-reference/schema-metadata-api/manage-metadata.mdx",sourceDirName:"graphql/core/api-reference/schema-metadata-api",slug:"/graphql/core/api-reference/schema-metadata-api/manage-metadata",permalink:"/docs/latest/graphql/core/api-reference/schema-metadata-api/manage-metadata",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/schema-metadata-api/manage-metadata.mdx",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_label:"Manage Metadata",sidebar_position:16,description:"Manage metadata with the Hasura schema/metadata API",keywords:["hasura","docs","schema/metadata API","API reference","metadata"],toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"Actions",permalink:"/docs/latest/graphql/core/api-reference/schema-metadata-api/actions"},next:{title:"RESTified GraphQL Endpoints",permalink:"/docs/latest/graphql/core/api-reference/restified"}},m={},c=[{value:"Introduction",id:"introduction",level:2},{value:"export_metadata",id:"schema-metadata-export-metadata",level:2},{value:"replace_metadata",id:"schema-metadata-replace-metadata",level:2},{value:"Args syntax",id:"schema-metadata-replace-metadata-syntax",level:3},{value:"Responses",id:"responses",level:3},{value:"reload_metadata",id:"schema-metadata-reload-metadata",level:2},{value:"Args syntax",id:"schema-metadata-reload-metadata-syntax",level:3},{value:"clear_metadata",id:"schema-metadata-clear-metadata",level:2},{value:"get_inconsistent_metadata",id:"schema-metadata-get-inconsistent-metadata",level:2},{value:"drop_inconsistent_metadata",id:"schema-metadata-drop-inconsistent-metadata",level:2}],p={toc:c};function u(e){var a=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"schemametadata-api-reference-manage-metadata-deprecated"},"Schema/Metadata API Reference: Manage metadata (Deprecated)"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Deprecation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In versions ",(0,i.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above, the schema/metadata API is deprecated in\nfavour of the ",(0,i.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/schema-api/index"},"schema API")," and the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/metadata-api/index"},"metadata API"),"."),(0,i.kt)("p",{parentName:"div"},"Though for backwards compatibility, the schema/metadata APIs will\ncontinue to function."))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"APIs to manage Hasura metadata which is stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"hdb_catalog")," schema."),(0,i.kt)("h2",{id:"schema-metadata-export-metadata"},"export_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"export_metadata")," is used to export the current metadata from the server as a JSON file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "export_metadata",\n    "args": {}\n}\n')),(0,i.kt)("p",null,"Response:"),(0,i.kt)("p",null,"The response JSON will be the metadata object. The structure of the\nmetadata object is just a JSON version of the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/migrations/config-v2/reference/metadata-format"},"metadata files")," generated by the CLI."),(0,i.kt)("h2",{id:"schema-metadata-replace-metadata"},"replace_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"replace_metadata")," is used to replace/import metadata into Hasura.\nExisting metadata will be replaced with the new one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "replace_metadata",\n    "version": 1 | 2 (optional),\n    "args": <replace-metadata-args>\n}\n')),(0,i.kt)("h3",{id:"schema-metadata-replace-metadata-syntax"},"Args syntax"),(0,i.kt)("p",null,"If version is set to 1, then args should be the JSON object which is\nsame as the output of ",(0,i.kt)("a",{parentName:"p",href:"#schema-metadata-export-metadata"},"export_metadata"),"."),(0,i.kt)("p",null,"For version 2, the following structure is used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"{\n    allow_inconsistent_metadata: Boolean,\n    metadata: metadata-object\n}\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Schema"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"allow_inconsistent_metadata"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"If set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", metadata will be replaced with a warning in the response indicating which items are inconsistent (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"metadata"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#schema-metadata-export-metadata"},"export_metadata")),(0,i.kt)("td",{parentName:"tr",align:null},"The metadata that will replace the current metadata.")))),(0,i.kt)("p",null,"If the version is not specified, then it is inferred from the format of ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),"."),(0,i.kt)("h3",{id:"responses"},"Responses"),(0,i.kt)("p",null,"Example with inconsistencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 400 Bad Request\n\n{\n  "internal": [\n    {\n      "type": "remote_schema",\n      "reason": "HTTP exception occurred while sending the request to http://localhost:5000/hello-graphql",\n      "definition": {\n        "definition": {\n          "url": "http://localhost:5000/hello-graphql",\n          "forward_client_headers": false\n        },\n        "name": "test",\n        "permissions": [],\n        "comment": "testing replace metadata with remote schemas"\n      }\n    }, ...\n  ]\n}\n')),(0,i.kt)("h2",{id:"schema-metadata-reload-metadata"},"reload_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"reload_metadata")," should be used when there is a change in underlying\nPostgres database that Hasura should be aware of. Example: a new column\nis added to a table using ",(0,i.kt)("inlineCode",{parentName:"p"},"psql")," and this column should now be added to\nthe GraphQL schema."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "reload_metadata",\n    "args": {\n        "reload_remote_schemas": true\n    }\n}\n')),(0,i.kt)("p",null,"Response:"),(0,i.kt)("p",null,"If the metadata is consistent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "is_consistent": true,\n    "message": "success"\n}\n')),(0,i.kt)("p",null,"If the metadata is not consistent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "is_consistent": false,\n    "message": "success",\n    "inconsistent_objects": [\n        {\n            "definition": {\n                "schema": "public",\n                "name": "article"\n            },\n            "name": "table article in source default",\n            "reason": "Inconsistent object: no such table/view exists in source: \\"article\\"",\n            "type": "table"\n        }\n    ]\n}\n')),(0,i.kt)("h3",{id:"schema-metadata-reload-metadata-syntax"},"Args syntax"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Schema"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"reload_remote_schemas"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")," ","|"," ","[",(0,i.kt)("a",{parentName:"td",href:"/docs/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"If set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", all remote schemas' (including inconsistent ones) cached GraphQL schemas are refreshed (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),")")))),(0,i.kt)("h2",{id:"schema-metadata-clear-metadata"},"clear_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clear_metadata")," can be used to reset the state of Hasura -- clean the\ncurrent state by forgetting the tables tracked, relationships,\npermissions, event triggers etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "clear_metadata",\n    "args": {}\n}\n')),(0,i.kt)("h2",{id:"schema-metadata-get-inconsistent-metadata"},"get_inconsistent_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"get_inconsistent_metadata")," can be used to fetch all inconsistent metadata objects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "get_inconsistent_metadata",\n    "args": {}\n}\n')),(0,i.kt)("p",null,"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "definition": {\n            "using": {\n                "foreign_key_constraint_on": {\n                    "column": "author_id",\n                    "table": "article"\n                }\n            },\n            "name": "articles",\n            "comment": null,\n            "table": "author"\n        },\n        "reason": "table \\"article\\" does not exist",\n        "type": "array_relation"\n    },\n    {\n        "definition": {\n            "using": {\n                "foreign_key_constraint_on": "author_id"\n            },\n            "name": "author",\n            "comment": null,\n            "table": "article"\n        },\n        "reason": "table \\"article\\" does not exist",\n        "type": "object_relation"\n    },\n    {\n        "definition": "article",\n        "reason": "no such table/view exists in source : \\"article\\"",\n        "type": "table"\n    }\n]\n')),(0,i.kt)("h2",{id:"schema-metadata-drop-inconsistent-metadata"},"drop_inconsistent_metadata"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"drop_inconsistent_metadata")," can be used to purge all inconsistent\nobjects from the metadata."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "drop_inconsistent_metadata",\n    "args": {}\n}\n')))}u.isMDXComponent=!0}}]);