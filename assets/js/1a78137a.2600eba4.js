"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3837],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},87588:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var n=a(83117),r=a(80102),l=(a(67294),a(3905)),i=["components"],o={sidebar_label:"Tables/Views",sidebar_position:2,description:"Manage tables and views with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","table","view"]},s="Metadata API Reference: Tables/Views",p={unversionedId:"graphql/core/api-reference/metadata-api/table-view",id:"graphql/core/api-reference/metadata-api/table-view",title:"Metadata API Reference: Tables/Views",description:"Manage tables and views with the Hasura metadata API",source:"@site/docs/graphql/core/api-reference/metadata-api/table-view.mdx",sourceDirName:"graphql/core/api-reference/metadata-api",slug:"/graphql/core/api-reference/metadata-api/table-view",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/table-view",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/metadata-api/table-view.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Tables/Views",sidebar_position:2,description:"Manage tables and views with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","table","view"]},sidebar:"docsSidebar",previous:{title:"Databases",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/source"},next:{title:"Custom Functions",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/custom-functions"}},m={},d=[{value:"Introduction",id:"introduction",level:2},{value:"pg_track_table",id:"metadata-pg-track-table",level:2},{value:"Args syntax",id:"metadata-pg-track-table-syntax",level:3},{value:"pg_untrack_table",id:"metadata-pg-untrack-table",level:2},{value:"Args syntax",id:"metadata-pg-untrack-table-syntax",level:3},{value:"pg_set_table_is_enum",id:"metadata-pg-set-table-is-enum",level:2},{value:"Args syntax",id:"metadata-pg-set-table-is-enum-syntax",level:3},{value:"pg_set_table_customization",id:"metadata-pg-set-table-customization",level:2},{value:"Args syntax",id:"metadata-pg-set-table-customization-syntax",level:3},{value:"mssql_track_table",id:"mssql-track-table",level:2},{value:"Args syntax",id:"mssql-track-table-syntax",level:3},{value:"mssql_untrack_table",id:"mssql-untrack-table",level:2},{value:"Args syntax",id:"mssql-untrack-table-syntax",level:3},{value:"mssql_set_table_customization",id:"mssql-set-table-customization",level:2},{value:"Args syntax",id:"mssql-set-table-customization-syntax",level:3},{value:"bigquery_track_table",id:"metadata-bigquery-track-table",level:2},{value:"Args syntax",id:"metadata-bigquery-track-table-syntax",level:3},{value:"bigquery_untrack_table",id:"metadata-bigquery-untrack-table",level:2},{value:"Args syntax",id:"metadata-bigquery-untrack-table-syntax",level:3},{value:"bigquery_set_table_customization",id:"metadata-bigquery-set-table-customization",level:2},{value:"Args syntax",id:"metadata-bigquery-set-table-customization-syntax",level:3}],u={toc:d};function c(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"metadata-api-reference-tablesviews"},"Metadata API Reference: Tables/Views"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Track/untrack a table/view in Hasura GraphQL engine."),(0,l.kt)("p",null,"Only tracked tables/views are available for\nquerying/mutating/subscribing data over the GraphQL API."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The metadata API is supported for versions ",(0,l.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above and\nreplaces the older ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/index"},"schema/metadata API"),"."))),(0,l.kt)("h2",{id:"metadata-pg-track-table"},"pg_track_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_track_table")," is used to add a table/view to the GraphQL schema with\nconfiguration. You can customise the root field names."),(0,l.kt)("p",null,"Add a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_track_table",\n  "args": {\n    "source": "default",\n    "table": "author",\n    "configuration": {\n      "custom_root_fields": {\n        "select": "Authors",\n        "select_by_pk": "Author",\n        "select_aggregate": "AuthorAggregate",\n        "insert": "AddAuthors",\n        "insert_one":"AddAuthor",\n        "update": "UpdateAuthors",\n        "update_by_pk": "UpdateAuthor",\n        "delete": "DeleteAuthors",\n        "delete_by_pk": "DeleteAuthor"\n      },\n      "column_config": {\n        "id": {\n          "custom_name": "authorId",\n          "comment": "The ID of the Author"\n        }\n      },\n      "comment": "Authors of books"\n    }\n  }\n}\n')),(0,l.kt)("p",null,"A table can be tracked with a ",(0,l.kt)("inlineCode",{parentName:"p"},"custom name"),". This can be useful when a\ntable name is not GraphQL compliant, like ",(0,l.kt)("inlineCode",{parentName:"p"},"Users Address"),". A\n",(0,l.kt)("inlineCode",{parentName:"p"},"custom name")," like ",(0,l.kt)("inlineCode",{parentName:"p"},"users_address")," will complement the ",(0,l.kt)("inlineCode",{parentName:"p"},'"Users Address"'),"\ntable, so that it can be added to the GraphQL schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   "type": "pg_track_table",\n   "args": {\n     "source": "default",\n     "table": "Author Details",\n     "configuration": {\n        "custom_name": "author_details"\n     }\n   }\n}\n')),(0,l.kt)("p",null,"The GraphQL nodes and typenames that are generated will be according to\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"identifier"),". For example, in this case, the nodes generated will\nbe:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"users_address")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"users_address_one")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"users_address_aggregate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"insert_users_address")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"insert_users_address_one")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update_users_address")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update_users_address_by_pk")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delete_users_address")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delete_users_address_by_pk"))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Hasura GraphQL engine requires the constraint names (if any) of a table\nto be ",(0,l.kt)("a",{parentName:"p",href:"https://spec.graphql.org/June2018/#sec-Names"},"GraphQL compliant"),"\nin order to be able to track it."))),(0,l.kt)("h3",{id:"metadata-pg-track-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"Table Config")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-pg-untrack-table"},"pg_untrack_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"untrack_table")," is used to remove a table/view from the GraphQL schema."),(0,l.kt)("p",null,"Remove a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "pg_untrack_table",\n    "args": {\n        "table": {\n            "schema": "public",\n            "name": "author"\n         },\n        "source": "default",\n        "cascade": true\n    }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-untrack-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions, templates)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-pg-set-table-is-enum"},"pg_set_table_is_enum"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_set_table_is_enum")," sets whether an already-tracked table should be\nused as an ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/schema/enums#pg-create-enum-table"},"enum table"),"."),(0,l.kt)("p",null,"Use table ",(0,l.kt)("inlineCode",{parentName:"p"},"user_role")," as an enum table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_set_table_is_enum",\n  "args": {\n    "table": {\n      "schema": "public",\n      "name": "user_role"\n    },\n    "source": "default",\n    "is_enum": true\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-set-table-is-enum-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is_enum"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether or not the table should be used as an ",(0,l.kt)("inlineCode",{parentName:"td"},"enum table <enum table>"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-pg-set-table-customization"},"pg_set_table_customization"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pg_set_table_customization")," allows you to customize any given table\nwith a custom name, custom root fields and custom column names of an\nalready tracked table. This will ",(0,l.kt)("strong",{parentName:"p"},"replace")," the already present\ncustomization."),(0,l.kt)("p",null,"Set the configuration for a table/view called ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "pg_set_table_customization",\n  "args": {\n    "table": "author_details",\n    "source": "default",\n    "configuration": {\n      "identifier": "author",\n      "custom_root_fields": {\n        "select": "Authors",\n        "select_by_pk": "Author",\n        "select_aggregate": "AuthorAggregate",\n        "insert": "AddAuthors",\n        "insert_one":"AddAuthor",\n        "update": "UpdateAuthors",\n        "update_by_pk": "UpdateAuthor",\n        "delete": "DeleteAuthors",\n        "delete_by_pk": "DeleteAuthor"\n      },\n      "column_config": {\n        "id": {\n          "custom_name": "authorId",\n          "comment": "The ID of the Author"\n        }\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-pg-set-table-customization-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"TableConfig")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"mssql-track-table"},"mssql_track_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mssql_track_table")," is used to add a table/view to the GraphQL schema\nwith configuration. You can customise the root field names."),(0,l.kt)("p",null,"Add a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "mssql_track_table",\n    "args": {\n      "table": "author",\n      "source": "default"\n    }\n}\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Hasura GraphQL engine requires the constraint names (if any) of a table\nto be ",(0,l.kt)("a",{parentName:"p",href:"https://spec.graphql.org/June2018/#sec-Names"},"GraphQL compliant"),"\nin order to be able to track it."))),(0,l.kt)("h3",{id:"mssql-track-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"Table Config")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"mssql-untrack-table"},"mssql_untrack_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"untrack_table")," is used to remove a table/view from the GraphQL schema."),(0,l.kt)("p",null,"Remove a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "mssql_untrack_table",\n    "args": {\n        "table": {\n            "schema": "dbo",\n            "name": "author"\n          },\n        "source": "default",\n        "cascade": true\n    }\n}\n')),(0,l.kt)("h3",{id:"mssql-untrack-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions, templates)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"mssql-set-table-customization"},"mssql_set_table_customization"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"mssql_set_table_customization")," allows you to customize any given table\nwith a custom name, custom root fields and custom column names of an\nalready tracked table. This will ",(0,l.kt)("strong",{parentName:"p"},"replace")," the already present\ncustomization."),(0,l.kt)("p",null,"Set the configuration for a table/view called ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "mssql_set_table_customization",\n  "args": {\n    "table": "author_details",\n    "source": "default",\n    "configuration": {\n      "identifier": "author",\n      "custom_root_fields": {\n        "select": "Authors",\n        "select_aggregate": "AuthorAggregate",\n      },\n      "column_config": {\n        "id": {\n          "custom_name": "authorId",\n          "comment": "The ID of the Author"\n        }\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"mssql-set-table-customization-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#tablename"},"TableName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"TableConfig")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-bigquery-track-table"},"bigquery_track_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bigquery_track_table")," is used to add a table/view to the GraphQL schema\nwith configuration. You can customise the root field names."),(0,l.kt)("p",null,"Add a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "bigquery_track_table",\n    "args": {\n      "table": {\n        "dataset": "hasura",\n        "name": "author",\n      },\n      "source": "default"\n    }\n}\n')),(0,l.kt)("p",null,"In the case of BigQuery, dataset names are prefixed to table/view names\nto form a unique root field name, such that the above example will\nresult in the root field name being ",(0,l.kt)("inlineCode",{parentName:"p"},"hasura_author"),"."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Hasura GraphQL engine requires the constraint names (if any) of a table\nto be ",(0,l.kt)("a",{parentName:"p",href:"https://spec.graphql.org/June2018/#sec-Names"},"GraphQL compliant"),"\nin order to be able to track it."))),(0,l.kt)("h3",{id:"metadata-bigquery-track-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},'{"dataset":',"_",', "name":',"_","}"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"Table Config")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-bigquery-untrack-table"},"bigquery_untrack_table"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bigquery_untrack_table")," is used to remove a table/view from the GraphQL schema."),(0,l.kt)("p",null,"Remove a table/view ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "bigquery_untrack_table",\n    "args": {\n        "table": {\n            "dataset": "hasura",\n            "name": "author"\n          },\n        "source": "default",\n        "cascade": true\n    }\n}\n')),(0,l.kt)("h3",{id:"metadata-bigquery-untrack-table-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},'{"dataset":',"_",', "name":',"_","}"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cascade"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the effect (if possible) is cascaded to any metadata dependent objects (relationships, permissions, templates)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))),(0,l.kt)("h2",{id:"metadata-bigquery-set-table-customization"},"bigquery_set_table_customization"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bigquery_set_table_customization")," allows you to customize any given\ntable with a custom name, custom root fields and custom column names of\nan already tracked table. This will ",(0,l.kt)("strong",{parentName:"p"},"replace")," the already present\ncustomization."),(0,l.kt)("p",null,"Set the configuration for a table/view called ",(0,l.kt)("inlineCode",{parentName:"p"},"hasura_author_details")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"author"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  "type": "bigquery_set_table_customization",\n  "args": {\n    "table": {\n      "dataset": "hasura",\n      "name": "author_details",\n    },\n    "source": "default",\n    "configuration": {\n      "custom_name": "author",\n      "custom_root_fields": {\n        "select": "Authors",\n        "select_aggregate": "AuthorAggregate",\n      },\n      "column_config": {\n        "id": {\n          "custom_name": "authorId",\n          "comment": "The ID of the Author"\n        }\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"metadata-bigquery-set-table-customization-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"table"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},'{"dataset":',"_",', "name":',"_","}"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#table-config"},"TableConfig")),(0,l.kt)("td",{parentName:"tr",align:null},"Configuration for the table/view")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the source database of the table (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"default"),")")))))}c.isMDXComponent=!0}}]);