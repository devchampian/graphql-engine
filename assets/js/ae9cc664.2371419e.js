"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1910],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return s}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),k=o(n),s=r,g=k["".concat(m,".").concat(s)]||k[s]||d[s]||l;return n?a.createElement(g,p(p({ref:t},u),{},{components:n})):a.createElement(g,p({ref:t},u))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=k;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var o=2;o<l;o++)p[o]=n[o];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},50694:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return s},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return d}});var a=n(83117),r=n(80102),l=(n(67294),n(3905)),p=["components"],i={sidebar_label:"Mutation",sidebar_position:2,description:"Hasura GraphQL API mutations API reference",keywords:["hasura","docs","GraphQL API","API reference","mutation"]},m="API Reference - Mutation",o={unversionedId:"graphql/core/api-reference/graphql-api/mutation",id:"graphql/core/api-reference/graphql-api/mutation",title:"API Reference - Mutation",description:"Hasura GraphQL API mutations API reference",source:"@site/docs/graphql/core/api-reference/graphql-api/mutation.mdx",sourceDirName:"graphql/core/api-reference/graphql-api",slug:"/graphql/core/api-reference/graphql-api/mutation",permalink:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/mutation",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/graphql-api/mutation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Mutation",sidebar_position:2,description:"Hasura GraphQL API mutations API reference",keywords:["hasura","docs","GraphQL API","API reference","mutation"]},sidebar:"docsSidebar",previous:{title:"Query / Subscription",permalink:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/query"},next:{title:"Relay GraphQL API Reference",permalink:"/graphql-engine/latest/graphql/core/api-reference/relay-graphql-api/index"}},u={},d=[{value:"<strong>insert</strong> (upsert) syntax",id:"insert-upsert-syntax",level:2},{value:"<strong>insert_one</strong> syntax",id:"insert-upsert-one-syntax",level:2},{value:"<strong>update_by_pk</strong> syntax",id:"update-by-pk-syntax",level:2},{value:"<strong>update</strong> syntax",id:"update-syntax",level:2},{value:"<strong>delete_by_pk</strong> syntax",id:"delete-by-pk-syntax",level:2},{value:"<strong>delete</strong> syntax",id:"delete-syntax",level:2},{value:"Syntax definitions",id:"syntax-definitions",level:2},{value:"Mutation response",id:"mutationresponse",level:3},{value:"<strong>objects</strong> argument",id:"inputobjects",level:3},{value:"<strong>object</strong> argument",id:"inputobject",level:3},{value:"<strong>on_conflict</strong> argument",id:"conflictclause",level:3},{value:"<strong>pk_columns</strong> argument",id:"pkcolumnsargexp",level:3},{value:"<strong>where</strong> argument",id:"whereargexp",level:3},{value:"BoolExp",id:"boolexp",level:4},{value:"AndExp",id:"andexp",level:5},{value:"OrExp",id:"orexp",level:5},{value:"NotExp",id:"notexp",level:5},{value:"TrueExp",id:"trueexp",level:5},{value:"ColumnExp",id:"columnexp",level:5},{value:"Operator",id:"operator",level:5},{value:"<strong>_set</strong> argument",id:"setargexp",level:3},{value:"<strong>_inc</strong> argument",id:"incargexp",level:3},{value:"<strong>_append</strong> argument",id:"appendargexp",level:3},{value:"<strong>_prepend</strong> argument",id:"prependargexp",level:3},{value:"<strong>_delete_key</strong> argument",id:"deletekeyargexp",level:3},{value:"<strong>_delete_elem</strong> argument",id:"deleteelemargexp",level:3},{value:"<strong>_delete_at_path</strong> argument",id:"deleteatpathargexp",level:3}],k={toc:d};function s(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference---mutation"},"API Reference - Mutation"),(0,l.kt)("h2",{id:"insert-upsert-syntax"},(0,l.kt)("strong",{parentName:"h2"},"insert")," (upsert) syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    [<input-object>!]\n    [conflict-clause]\n  )\n  [mutation-response!]\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"insert_author"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input-object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#inputobjects"},"InputObjects")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated mutation field")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-response"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mutationresponse"},"MutationResponse")),(0,l.kt)("td",{parentName:"tr",align:null},"Object to be returned after mutation succeeds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"on-conflict"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#conflictclause"},"ConflictClause")),(0,l.kt)("td",{parentName:"tr",align:null},"Converts ",(0,l.kt)("em",{parentName:"td"},"insert")," to ",(0,l.kt)("em",{parentName:"td"},"upsert")," by handling conflict")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Insert")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation insert_article {\n  insert_article(\n    objects: [\n      {\n        title: "Software is gluttonous",\n        content: "Something happened in HP",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Upsert")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation upsert_author {\n  insert_author (\n    objects: [\n      {\n        name: "John",\n        id:12\n      }\n    ],\n    on_conflict: {\n      constraint: author_name_key,\n      update_columns: [name, id]\n    }\n  ) {\n    affected_rows\n  }\n}\n')),(0,l.kt)("h2",{id:"insert-upsert-one-syntax"},(0,l.kt)("strong",{parentName:"h2"},"insert_one")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    [<input-object>!]\n    [conflict-clause]\n  )\n  [mutation-response!]\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"insert_author_one"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input-object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#inputobject"},"InputObject")),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated mutation field")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-response"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/graphql-api/query#simpleobject"},"SimpleObject")),(0,l.kt)("td",{parentName:"tr",align:null},"Object to be returned after mutation succeeds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"on-conflict"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#conflictclause"},"ConflictClause")),(0,l.kt)("td",{parentName:"tr",align:null},"Converts ",(0,l.kt)("em",{parentName:"td"},"insert")," to ",(0,l.kt)("em",{parentName:"td"},"upsert")," by handling conflict")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Insert One")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation insert_article_one {\n  insert_article_one(\n    object: {\n      title: "Software is gluttonous",\n      content: "Something happened in HP",\n      author_id: 3\n    }\n  ) {\n    id\n    title\n  }\n}\n')),(0,l.kt)("h2",{id:"update-by-pk-syntax"},(0,l.kt)("strong",{parentName:"h2"},"update_by_pk")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    [pk-columns-argument!],\n    [set-argument!]\n  )\n  <object-fields>\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated update mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"update_author_by_pk"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pk-columns-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#pkcolumnsargexp"},"pkColumnsArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Primary key(s) for row(s) to be updated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"set-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#setargexp"},"setArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Data to be updated in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inc-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#incargexp"},"incArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Integer value to be incremented to Int columns in the table (Negative integers can be used to decrement)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"append-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#appendargexp"},"appendArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"JSON value to be appended to JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"prepend-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prependargexp"},"prependArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"JSON value to be prepended to JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-key-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deletekeyargexp"},"deleteKeyArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Key to be deleted in the value of JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-elem-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deleteelemargexp"},"deleteElemArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Array element to be deleted in the value of JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-at-path-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deleteatpathargexp"},"deleteAtPathArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Element at path to be deleted in the value of JSONB columns in the table")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Update by PK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation update_articles {\n  update_article_by_pk (\n    pk_columns: {\n      id: 1\n    }\n    _set: { is_published: true }\n  ) {\n    id\n    title\n  }\n}\n")),(0,l.kt)("h2",{id:"update-syntax"},(0,l.kt)("strong",{parentName:"h2"},"update")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    [where-argument!],\n    [set-argument!]\n  )\n  [mutation-response!]\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated update mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"update_author"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#whereargexp"},"whereArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Selection criteria for rows to be updated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"set-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#setargexp"},"setArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Data to be updated in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inc-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#incargexp"},"incArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Integer value to be incremented to Int columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"append-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#appendargexp"},"appendArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"JSON value to be appended to JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"prepend-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prependargexp"},"prependArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"JSON value to be prepended to JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-key-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deletekeyargexp"},"deleteKeyArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Key to be deleted in the value of JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-elem-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deleteelemargexp"},"deleteElemArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Array element to be deleted in the value of JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"delete-at-path-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#deleteatpathargexp"},"deleteAtPathArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Element at path to be deleted in the value of JSONB columns in the table")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-response"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mutationresponse"},"MutationResponse")),(0,l.kt)("td",{parentName:"tr",align:null},"Object to be returned after mutation succeeds")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Update")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation update_author{\n  update_author(\n    where: {id: {_eq: 3}},\n    _set: {name: "Jane"}\n  ) {\n    affected_rows\n  }\n}\n')),(0,l.kt)("h2",{id:"delete-by-pk-syntax"},(0,l.kt)("strong",{parentName:"h2"},"delete_by_pk")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    column1: value1\n    column2: value2\n  )\n  <object-fields>\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated delete mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"delete_author_by_pk"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Delete by PK")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation delete_articles {\n  delete_article_by_pk (\n    id: 1\n  ) {\n    id\n    title\n  }\n}\n")),(0,l.kt)("h2",{id:"delete-syntax"},(0,l.kt)("strong",{parentName:"h2"},"delete")," syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"mutation [<mutation-name>] {\n  <mutation-field-name> (\n    [where-argument!]\n  )\n  [mutation-response!]\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-name"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of mutation for observability")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-field-name"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the auto-generated delete mutation field, e.g. ",(0,l.kt)("em",{parentName:"td"},"delete_author"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"where-argument"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#whereargexp"},"whereArgExp")),(0,l.kt)("td",{parentName:"tr",align:null},"Selection criteria for rows to delete")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mutation-response"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mutationresponse"},"MutationResponse")),(0,l.kt)("td",{parentName:"tr",align:null},"Object to be returned after mutation succeeds")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example: Delete")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation delete_articles {\n  delete_article(\n    where: {author: {id: {_eq: 7}}}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For more examples and details of usage, please see ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/databases/postgres/mutations/index"},"this"),"."))),(0,l.kt)("h2",{id:"syntax-definitions"},"Syntax definitions"),(0,l.kt)("h3",{id:"mutationresponse"},"Mutation response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"{\n  affected_rows\n  returning {\n    response-field1\n    response-field2\n    ..\n  }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  affected_rows\n  returning {\n    id\n    author_id\n  }\n}\n")),(0,l.kt)("h3",{id:"inputobjects"},(0,l.kt)("strong",{parentName:"h3"},"objects")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"objects: [\n  {\n    field1: value,\n    field2: value,\n    <object-rel-name>: {\n      data: <Input-Object>!,\n      on_conflict: <Conflict-Clause>\n    },\n    <array-rel-name>: {\n      data: [<Input-Object>!]!,\n      on_conflict: <Conflict-Clause>\n    }\n    ..\n  },\n  ..\n]\n# no nested objects\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'objects: [\n  {\n    title: "Software is eating the world",\n    content: "This week, Hewlett-Packard...",\n    author: {\n      data: {\n        id: 1,\n        name: "Sydney"\n      }\n    }\n  }\n]\n')),(0,l.kt)("h3",{id:"inputobject"},(0,l.kt)("strong",{parentName:"h3"},"object")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"object: {\n  field1: value,\n  field2: value,\n  <object-rel-name>: {\n    data: <Input-Object>!,\n    on_conflict: <Conflict-Clause>\n  },\n  <array-rel-name>: {\n    data: [<Input-Object>!]!,\n    on_conflict: <Conflict-Clause>\n  }\n  ..\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'object: {\n  title: "Software is eating the world",\n  content: "This week, Hewlett-Packard...",\n  author: {\n    data: {\n      id: 1,\n      name: "Sydney"\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"conflictclause"},(0,l.kt)("strong",{parentName:"h3"},"on_conflict")," argument"),(0,l.kt)("p",null,"The conflict clause is used to convert an ",(0,l.kt)("em",{parentName:"p"},"insert")," mutation to an\n",(0,l.kt)("em",{parentName:"p"},"upsert")," mutation. ",(0,l.kt)("em",{parentName:"p"},"Upsert")," respects the table's ",(0,l.kt)("em",{parentName:"p"},"update")," permissions\nbefore editing an existing row in case of a conflict. Hence the conflict\nclause is permitted only if a table has ",(0,l.kt)("em",{parentName:"p"},"update")," permissions defined."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"on_conflict: {\n  constraint: table_constraint!\n  update_columns: [table_update_column!]!\n  where: table_bool_exp\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"on_conflict: {\n  constraint: author_name_key\n  update_columns: [name]\n  where: {id: {_lt: 1}}\n}\n")),(0,l.kt)("h3",{id:"pkcolumnsargexp"},(0,l.kt)("strong",{parentName:"h3"},"pk_columns")," argument"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"pk_columns")," argument is used to identify an object by its primary\nkey columns in ",(0,l.kt)("em",{parentName:"p"},"update")," mutations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"pk_columns: {\n  column-1: value-1\n  column-2: value-2\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'pk_columns: {\n  id: 1\n  name: "Harry"\n}\n')),(0,l.kt)("h3",{id:"whereargexp"},(0,l.kt)("strong",{parentName:"h3"},"where")," argument"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"where: ",(0,l.kt)("a",{href:"#boolexp"},"BoolExp")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"where: {\n  rating: {_eq: 5}\n}\n")),(0,l.kt)("h4",{id:"boolexp"},"BoolExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#andexp"},"AndExp")," | ",(0,l.kt)("a",{href:"#orexp"},"OrExp")," | ",(0,l.kt)("a",{href:"#notexp"},"NotExp")," | ",(0,l.kt)("a",{href:"#trueexp"},"TrueExp")," | ",(0,l.kt)("a",{href:"#columnexp"},"ColumnExp")))),(0,l.kt)("h5",{id:"andexp"},"AndExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _and: [",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"]\n}"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'_and: [\n  {rating: {_gt: 5}}, \n  {updated_at: {_gt: "2019-01-01"}}\n]\n')),(0,l.kt)("h5",{id:"orexp"},"OrExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _or: [",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"]\n}"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"_or: [\n  {rating: {_is_null: true}}, \n  {rating: {_lt: 4}}\n]\n")),(0,l.kt)("h5",{id:"notexp"},"NotExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  _not: ",(0,l.kt)("a",{href:"#boolexp"},"BoolExp"),"\n}"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'_not: {\n  title: {_eq: ""}\n}\n')),(0,l.kt)("h5",{id:"trueexp"},"TrueExp"),(0,l.kt)("pre",null,(0,l.kt)("code",null,"{}")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"author(where: {articles: {}})\n")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"{}")," evaluates to true whenever an object exists (even if it's ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),")."))),(0,l.kt)("h5",{id:"columnexp"},"ColumnExp"),(0,l.kt)("div",{className:"parsed-literal"},(0,l.kt)("pre",null,(0,l.kt)("code",null,"{\n  field-name: { ",(0,l.kt)("a",{href:"#operator"},"Operator"),": Value }\n}"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"{rating: {_eq: 5}}\n")),(0,l.kt)("h5",{id:"operator"},"Operator"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Generic operators (all column types except json, jsonb):")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_eq")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_ne")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_in")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_nin")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_gt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_lt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_gte")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_lte"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Text related operators:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_like")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_nlike")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_ilike")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_nilike")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_similar")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_nsimilar")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_iregex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_niregex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_regex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_nregex"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Checking for NULL values:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_is_null")," (takes true/false as values)")),(0,l.kt)("h3",{id:"setargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","set")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"_set: {\n  field-name-1 : value,\n  field-name-2 : value,\n  ..\n}\n")),(0,l.kt)("h3",{id:"incargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","inc")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"_inc: {\n  field-name-1 : int-value,\n  field-name-2 : int-value,\n  ..\n}\n")),(0,l.kt)("h3",{id:"appendargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","append")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"_append: {\n  field-name-1 : $json-variable-1,\n  field-name-2 : $json-variable-1,\n  ..\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "json-variable-1": "value",\n  "json-variable-2": "value"\n}\n')),(0,l.kt)("h3",{id:"prependargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","prepend")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"_prepend: {\n  field-name-1 : $json-variable-1,\n  field-name-2 : $json-variable-1,\n  ..\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "json-variable-1": "value",\n  "json-variable-2": "value"\n}\n')),(0,l.kt)("h3",{id:"deletekeyargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","delete_key")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},'_delete_key: {\n  field-name-1 : "key",\n  field-name-2 : "key",\n  ..\n}\n')),(0,l.kt)("h3",{id:"deleteelemargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","delete_elem")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},"_delete_elem: {\n  field-name-1 : int-index,\n  field-name-2 : int-index,\n  ..\n}\n")),(0,l.kt)("h3",{id:"deleteatpathargexp"},(0,l.kt)("strong",{parentName:"h3"},"_","delete_at_path")," argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-none"},'_delete_at_path: {\n  field-name-1 : ["path-array"],\n  field-name-2 : ["path-array"],\n  ..\n}\n')))}s.isMDXComponent=!0}}]);