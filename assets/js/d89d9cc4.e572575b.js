"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3075],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(a),u=r,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},95482:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return m}});var n=a(83117),r=a(80102),l=(a(67294),a(3905)),o=["components"],i={sidebar_label:"Manage Metadata",sidebar_position:17,description:"Manage metadata with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","metadata"],toc_max_heading_level:2},s="Metadata API Reference: Manage metadata",d={unversionedId:"graphql/core/api-reference/metadata-api/manage-metadata",id:"graphql/core/api-reference/metadata-api/manage-metadata",title:"Metadata API Reference: Manage metadata",description:"Manage metadata with the Hasura metadata API",source:"@site/docs/graphql/core/api-reference/metadata-api/manage-metadata.mdx",sourceDirName:"graphql/core/api-reference/metadata-api",slug:"/graphql/core/api-reference/metadata-api/manage-metadata",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/manage-metadata",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/metadata-api/manage-metadata.mdx",tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_label:"Manage Metadata",sidebar_position:17,description:"Manage metadata with the Hasura metadata API",keywords:["hasura","docs","metadata API","API reference","metadata"],toc_max_heading_level:2},sidebar:"docsSidebar",previous:{title:"Actions",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/actions"},next:{title:"Introspection options",permalink:"/graphql-engine/latest/graphql/core/api-reference/metadata-api/introspection"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"export_metadata",id:"metadata-export-metadata",level:2},{value:"replace_metadata",id:"metadata-replace-metadata",level:2},{value:"Args syntax",id:"metadata-replace-metadata-syntax",level:3},{value:"Request",id:"request",level:3},{value:"Responses",id:"responses",level:3},{value:"reload_metadata",id:"metadata-reload-metadata",level:2},{value:"Args syntax",id:"metadata-reload-metadata-syntax",level:3},{value:"clear_metadata",id:"metadata-clear-metadata",level:2},{value:"get_inconsistent_metadata",id:"metadata-get-inconsistent-metadata",level:2},{value:"drop_inconsistent_metadata",id:"metadata-drop-inconsistent-metadata",level:2},{value:"test_webhook_transform",id:"test-webhook-transform",level:2}],c={toc:m};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"metadata-api-reference-manage-metadata"},"Metadata API Reference: Manage metadata"),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"APIs for managing Hasura metadata which is stored in the ",(0,l.kt)("inlineCode",{parentName:"p"},"hdb catalog")," schema."),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Supported from")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The metadata API is supported for versions ",(0,l.kt)("inlineCode",{parentName:"p"},"v2.0.0")," and above and\nreplaces the older ",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/api-reference/schema-metadata-api/index"},"schema/metadata API"),"."))),(0,l.kt)("h2",{id:"metadata-export-metadata"},"export_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"export_metadata")," is used to export the current metadata from the server as a JSON file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "export_metadata",\n    "version": 1 | 2\n    "args": {}\n}\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("p",null,"The response JSON will be the metadata object. The structure of the\nmetadata object is just a JSON version of the\n",(0,l.kt)("a",{parentName:"p",href:"/graphql-engine/latest/graphql/core/migrations/reference/metadata-format"},"metadata files")," generated by the CLI."),(0,l.kt)("p",null,"V2 Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n     "type": "export_metadata",\n     "version": 2,\n     "args": {}\n}\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "resource_version": 8,\n    "metadata": {\n        "version": 3,\n        "sources": [\n        {\n            "name": "default",\n            "tables": [\n            {\n                "table": {\n                 ...\n')),(0,l.kt)("h2",{id:"metadata-replace-metadata"},"replace_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"replace_metadata")," is used to replace/import metadata into Hasura.\nExisting metadata will be replaced with the new one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "replace_metadata",\n    "version": 1 | 2\n    "args": <replace-metadata-args>\n}\n')),(0,l.kt)("h3",{id:"metadata-replace-metadata-syntax"},"Args syntax"),(0,l.kt)("p",null,"If version is set to 1, then args should be the JSON object which is\nsame as the output of ",(0,l.kt)("a",{parentName:"p",href:"#metadata-export-metadata"},"export_metadata"),"."),(0,l.kt)("p",null,"For version 2, the following structure is used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"{\n    allow_inconsistent_metadata: Boolean\n    metadata: metadata-object\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"allow_inconsistent_metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", metadata will be replaced with a warning in the response indicating which items are inconsistent (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#metadata-export-metadata"},"export_metadata")),(0,l.kt)("td",{parentName:"tr",align:null},"The metadata that will replace the current metadata.")))),(0,l.kt)("p",null,"If the version is not specified, then it is inferred from the format of ",(0,l.kt)("inlineCode",{parentName:"p"},"args"),"."),(0,l.kt)("h3",{id:"request"},"Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "replace_metadata",\n    "version": 2\n    "args": {\n      "allow_inconsistent_metadata": Boolean,\n      "metadata": <metadata-object>\n    }\n}\n')),(0,l.kt)("h3",{id:"responses"},"Responses"),(0,l.kt)("p",null,"Version 2 with inconsistencies and allow_inconsistent_metadata=false, or\nomitted corresponds with the response document in\n",(0,l.kt)("a",{parentName:"p",href:"#metadata-replace-metadata"},"replace_metadata"),"."),(0,l.kt)("p",null,"Version 2 example with inconsistencies and\nallow_inconsistent_metadata=true includes an ",(0,l.kt)("inlineCode",{parentName:"p"},"is_consistent")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"inconsistent_objects")," corresponding to\n",(0,l.kt)("a",{parentName:"p",href:"#metadata-get-inconsistent-metadata"},"get_inconsistent_metadata"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 400 Bad Request\n\n{\n  "internal": [\n    {\n      "type": "remote_schema",\n      "reason": "HTTP exception occurred while sending the request to http://localhost:5000/hello-graphql",\n      "definition": {\n        "definition": {\n          "url": "http://localhost:5000/hello-graphql",\n          "forward_client_headers": false\n        },\n        "name": "test",\n        "permissions": [],\n        "comment": "testing replace metadata with remote schemas"\n      }\n    }, ...\n  ]\n}\n')),(0,l.kt)("p",null,"Version 2 example with inconsistencies and\nallow_inconsistent_metadata=true:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 200 OK\n\n{\n  "is_consistent": false,\n  "inconsistent_objects": [\n      {\n      "definition": {\n          "definition": {\n          "url": "http://localhost:5000/hello-graphql",\n          "forward_client_headers": false\n          },\n          "name": "test",\n          "permissions": [],\n          "comment": "testing replace metadata with remote schemas"\n      },\n      "reason": "HTTP exception occurred while sending the request to http://localhost:5000/hello-graphql",\n      "type": "remote_schema"\n      }, ...\n')),(0,l.kt)("p",null,"Version 2 example with invalid ",(0,l.kt)("inlineCode",{parentName:"p"},"resource_version"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 409 Conflict\n\n{\n  "path": "$",\n  "error": "metadata resource version referenced (2) did not match current version",\n  "code": "conflict"\n}\n')),(0,l.kt)("h2",{id:"metadata-reload-metadata"},"reload_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"reload_metadata")," should be used when there is a change in underlying\nPostgres database that Hasura should be aware of. Example: a new column\nis added to a table using ",(0,l.kt)("inlineCode",{parentName:"p"},"psql")," and this column should now be added to\nthe GraphQL schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "reload_metadata",\n    "args": {\n        "reload_remote_schemas": true,\n        "reload_sources": false,\n        "recreate_event_triggers": true\n    }\n}\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("p",null,"If the metadata is consistent:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "is_consistent": true,\n    "message": "success"\n}\n')),(0,l.kt)("p",null,"If the metadata is not consistent:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "is_consistent": false,\n    "message": "success",\n    "inconsistent_objects": [\n        {\n            "definition": {\n                "schema": "public",\n                "name": "article"\n            },\n            "name": "table article in source default",\n            "reason": "Inconsistent object: no such table/view exists in source: \\"article\\"",\n            "type": "table"\n        }\n    ]\n}\n')),(0,l.kt)("h3",{id:"metadata-reload-metadata-syntax"},"Args syntax"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"reload_remote_schemas"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")," ","|"," ","[",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#remoteschemaname"},"RemoteSchemaName"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", all remote schemas' (including inconsistent ones) cached GraphQL schemas are refreshed (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"reload_sources"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")," ","|"," ","[",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", all sources' (including inconsistent ones) cached GraphQL schemas are refreshed (default: ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"recreate_event_triggers"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Boolean")," ","|"," ","[",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", all sources' (including inconsistent ones) cached event triggers and their corresponding SQL triggers present in the source database will be recreated. When an array of ",(0,l.kt)("a",{parentName:"td",href:"/graphql-engine/latest/graphql/core/api-reference/syntax-defs#sourcename"},"SourceName")," is provided, the event triggers will only be recreated for those sources. (default: ",(0,l.kt)("em",null,"false")," i.e. no sources' event triggers will be recreated)")))),(0,l.kt)("h2",{id:"metadata-clear-metadata"},"clear_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"clear_metadata")," can be used to reset the state of Hasura -- clean the\ncurrent state by forgetting the tables tracked, relationships,\npermissions, event triggers etc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "clear_metadata",\n    "args": {}\n}\n')),(0,l.kt)("h2",{id:"metadata-get-inconsistent-metadata"},"get_inconsistent_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"get_inconsistent_metadata")," can be used to fetch all inconsistent metadata objects."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "get_inconsistent_metadata",\n    "args": {}\n}\n')),(0,l.kt)("p",null,"Response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "is_consistent": false,\n  "inconsistent_objects": [\n    {\n      "type": "table",\n      "name": "table public.article in source default",\n      "definition": {\n        "schema": "public",\n        "name": "article"\n      },\n      "reason": "Inconsistent object: no such table/view exists in source: \\"public.article\\""\n    },\n    {\n      "type": "array_relation",\n      "name": "array_relation articles in table public.author in source default",\n      "definition": {\n        "name": "articles",\n        "source": "default",\n        "comment": null,\n        "table": {\n          "schema": "public",\n          "name": "author"\n        },\n        "using": {\n          "foreign_key_constraint_on": {\n            "column": "author_id",\n            "table": {\n              "schema": "public",\n              "name": "article"\n            }\n          }\n        }\n      },\n      "reason": "Inconsistent object: in table \\"public.author\\": in relationship \\"articles\\": table \\"public.article\\" does not exist"\n    }\n  ]\n}\n')),(0,l.kt)("h2",{id:"metadata-drop-inconsistent-metadata"},"drop_inconsistent_metadata"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"drop_inconsistent_metadata")," can be used to purge all inconsistent\nobjects from the metadata."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type": "drop_inconsistent_metadata",\n    "args": {}\n}\n')),(0,l.kt)("h2",{id:"test-webhook-transform"},"test_webhook_transform"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"test_webhook_transform")," can be used to test out request transformations using mock data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "test_webhook_transform",\n    "args" : {\n      "webhook_url": "http://localhost:1234",\n      "request_headers": [["myKey", "myValue"]],\n      "body": { "hello": "world" },\n      "request_transform": {\n        "body": "{{ $body.world }}",\n        "template_engine": "Kriti"\n      }\n    }\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"webhook_url")," can be provided in an Environment Variable supplied in an object with the ",(0,l.kt)("em",{parentName:"p"},"from_env")," key:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    "type" : "test_webhook_transform",\n    "args" : {\n      "webhook_url": {"from_env": "url_env_var" },\n      "request_headers": [["myKey", "myValue"]],\n      "body": { "hello": "world" },\n      "request_transform": {\n        "body": "{{ $body.world }}",\n        "template_engine": "Kriti"\n      }\n    }\n}\n')))}u.isMDXComponent=!0}}]);