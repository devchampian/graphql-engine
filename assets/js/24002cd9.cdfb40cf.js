"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4593],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return S}});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),u=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),S=a,E=d["".concat(i,".").concat(S)]||d[S]||c[S]||s;return r?t.createElement(E,o(o({ref:n},p),{},{components:r})):t.createElement(E,o({ref:n},p))}));function S(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<s;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},39643:function(e,n,r){r.r(n),r.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return S},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var t=r(83117),a=r(80102),s=(r(67294),r(3905)),o=["components"],l={sidebar_label:"Explain API",sidebar_position:11,description:"Hasura explain API reference",keywords:["hasura","docs","explain API","API reference"]},i="Explain API Reference",u={unversionedId:"graphql/core/api-reference/explain",id:"graphql/core/api-reference/explain",title:"Explain API Reference",description:"Hasura explain API reference",source:"@site/docs/graphql/core/api-reference/explain.mdx",sourceDirName:"graphql/core/api-reference",slug:"/graphql/core/api-reference/explain",permalink:"/docs/latest/graphql/core/api-reference/explain",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/api-reference/explain.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"Explain API",sidebar_position:11,description:"Hasura explain API reference",keywords:["hasura","docs","explain API","API reference"]},sidebar:"docsSidebar",previous:{title:"Config API",permalink:"/docs/latest/graphql/core/api-reference/config"},next:{title:"Common syntax definitions",permalink:"/docs/latest/graphql/core/api-reference/syntax-defs"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"API Spec",id:"api-spec",level:2},{value:"Request",id:"request",level:3},{value:"Sample request",id:"sample-request",level:4},{value:"Response",id:"response",level:3},{value:"Sample response for a query",id:"sample-response-for-a-query",level:4},{value:"Sample response for a subscription",id:"sample-response-for-a-subscription",level:4},{value:"Disabling Explain API",id:"disabling-explain-api",level:2}],d={toc:c};function S(e){var n=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"explain-api-reference"},"Explain API Reference"),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"The Explain API is an admin-only endpoint for analysing queries and\nsubscriptions. Given a query and authorization role, it returns\nbackend-specific execution plans."),(0,s.kt)("h2",{id:"endpoint"},"Endpoint"),(0,s.kt)("p",null,"All requests are ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," requests to the ",(0,s.kt)("inlineCode",{parentName:"p"},"/v1/graphql/explain")," endpoint."),(0,s.kt)("h2",{id:"api-spec"},"API Spec"),(0,s.kt)("h3",{id:"request"},"Request"),(0,s.kt)("p",null,"The request expects a JSON object with the following keys:  "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"query"),": the GraphQL query to be analysed"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"user")," (optional): the ",(0,s.kt)("inlineCode",{parentName:"li"},"x-hasura-role")," along with session variables")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/graphql/explain HTTP/1.1\nContent-Type: application/json\n\n{\n     "query": "<query>",\n     "user": {\n         "x-hasura-role" : "...",\n         "x-hasura-session-var1" : "..."\n     }\n}\n')),(0,s.kt)("h4",{id:"sample-request"},"Sample request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-http"},'POST /v1/graphql/explain HTTP/1.1\nContent-Type: application/json\n\n{\n     "query": {\n         "query": "query getUsers { user { name }}",\n         "operationName": "getUsers"\n     }\n}\n')),(0,s.kt)("h3",{id:"response"},"Response"),(0,s.kt)("p",null,"The response for a query is a list of plans, one for each field:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-none"},'[\n    {\n        "field": String -- "name of the field",\n        "sql": String -- "generated SQL for the operation",\n        "plan": [String] -- "the database\'s execution plan for the generated SQL"\n    }\n]\n')),(0,s.kt)("p",null,"The response for a subscription is a single plan, along with the\nvariables used to determine how the subscription will be multiplexed:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-none"},'{\n    "sql": String -- "generated SQL for the operation",\n    "plan": [String] -- "the database\'s execution plan for the generated SQL"\n    "variables": {\n        "synthetic": [String], -- "introduced variables for enabling additional query multiplexing (values)"\n        "query": Object -- "GraphQL query variables (names and values)"\n        "session": Object -- "session variables referenced by the query (names and values)"\n    }\n}\n')),(0,s.kt)("h4",{id:"sample-response-for-a-query"},"Sample response for a query"),(0,s.kt)("p",null,"PostgreSQL backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "field": "user",\n        "sql": "SELECT  coalesce(json_agg(\\"root\\" ), \'[]\' ) AS \\"root\\" FROM  (SELECT  row_to_json((SELECT  \\"_1_e\\"  FROM  (SELECT  \\"_0_root.base\\".\\"name\\" AS \\"name\\"       ) AS \\"_1_e\\"      ) ) AS \\"root\\" FROM  (SELECT  *  FROM \\"public\\".\\"user\\"  WHERE (\'true\')     ) AS \\"_0_root.base\\"      ) AS \\"_2_root\\"      ",\n        "plan": [\n            "Aggregate  (cost=40.00..40.01 rows=1 width=32)",\n            "  ->  Seq Scan on \\"user\\"  (cost=0.00..22.00 rows=1200 width=32)",\n            "  SubPlan 1",\n            "    ->  Result  (cost=0.00..0.01 rows=1 width=32)"\n        ]\n    }\n]\n')),(0,s.kt)("p",null,"Microsoft SQL Server backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "field": "user",\n        "sql": "SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\nFROM [dbo].[user] AS [t_user1]\\nFOR JSON PATH, INCLUDE_NULL_VALUES), \'[]\')",\n        "plan": [\n            "SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\nFROM [dbo].[user] AS [t_user1]\\nFOR JSON PATH, INCLUDE_NULL_VALUES), \'[]\')",\n            "  |--Compute Scalar(DEFINE:([Expr1003]=isnull([Expr1001],CONVERT_IMPLICIT(nvarchar(max),\'[]\',0))))",\n            "       |--UDX(([t_user1].[name]))",\n            "            |--Clustered Index Scan(OBJECT:([master].[dbo].[user].[PK__user__3213E83F04195C1B] AS [t_user1]))"\n        ]\n    }\n]\n')),(0,s.kt)("h4",{id:"sample-response-for-a-subscription"},"Sample response for a subscription"),(0,s.kt)("p",null,"PostgreSQL backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sql": "SELECT  \\"_subs\\".\\"result_id\\" , \\"_fld_resp\\".\\"root\\" AS \\"result\\" FROM UNNEST(($1)::uuid[], ($2)::json[]) AS \\"_subs\\"(\\"result_id\\", \\"result_vars\\") LEFT OUTER JOIN LATERAL (SELECT  json_build_object(\'user\', \\"user\\".\\"root\\" ) AS \\"root\\" FROM  (SELECT  coalesce(json_agg(\\"root\\" ), \'[]\' ) AS \\"root\\" FROM  (SELECT  row_to_json((SELECT  \\"_1_e\\"  FROM  (SELECT  \\"_0_root.base\\".\\"name\\" AS \\"name\\"       ) AS \\"_1_e\\"      ) ) AS \\"root\\" FROM  (SELECT  *  FROM \\"public\\".\\"user\\"  WHERE (\'true\')     ) AS \\"_0_root.base\\"      ) AS \\"_2_root\\"      ) AS \\"user\\"      ) AS \\"_fld_resp\\" ON (\'true\')      ",\n    "plan": [\n        "Nested Loop Left Join  (cost=40.01..42.28 rows=100 width=48)",\n        "  ->  Function Scan on _subs  (cost=0.01..1.00 rows=100 width=16)",\n        "  ->  Materialize  (cost=40.00..40.03 rows=1 width=32)",\n        "        ->  Subquery Scan on \\"user\\"  (cost=40.00..40.02 rows=1 width=32)",\n        "              ->  Aggregate  (cost=40.00..40.01 rows=1 width=32)",\n        "                    ->  Seq Scan on \\"user\\" user_1  (cost=0.00..22.00 rows=1200 width=32)",\n        "                    SubPlan 1",\n        "                      ->  Result  (cost=0.00..0.01 rows=1 width=32)"\n    ],\n    "variables": {\n        "synthetic": [],\n        "query": {},\n        "session": {}\n    }\n}\n')),(0,s.kt)("p",null,"Microsoft SQL Server backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{\n    \"sql\": \"SELECT ISNULL((SELECT [row].[result_id] AS [result_id],\\n       [result].[json] AS [result]\\nFROM OPENJSON((N''+NCHAR(91)+''+NCHAR(91)+''+NCHAR(34)+'00000000-0000-0000-0000-000000000000'+NCHAR(34)+','+NCHAR(123)+''+NCHAR(34)+'synthetic'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(91)+''+NCHAR(93)+','+NCHAR(34)+'query'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(123)+''+NCHAR(125)+','+NCHAR(34)+'session'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(123)+''+NCHAR(125)+''+NCHAR(125)+''+NCHAR(93)+''+NCHAR(93)+''))\\n     WITH ([result_id] UNIQUEIDENTIFIER '$[0]',\\n          [result_vars] NVARCHAR(MAX) '$[1]' AS JSON) AS [row]\\nOUTER APPLY (SELECT ISNULL((SELECT (SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\n                     FROM [dbo].[user] AS [t_user1]\\n                     FOR JSON PATH, INCLUDE_NULL_VALUES), '[]')) AS [user]\\n             FOR JSON PATH, INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER), '[]')) \\nAS [result]([json])\\nFOR JSON PATH, INCLUDE_NULL_VALUES), '[]')\",\n    \"plan\": [\n        \"SELECT ISNULL((SELECT [row].[result_id] AS [result_id],\\n       [result].[json] AS [result]\\nFROM OPENJSON((N''+NCHAR(91)+''+NCHAR(91)+''+NCHAR(34)+'00000000-0000-0000-0000-000000000000'+NCHAR(34)+','+NCHAR(123)+''+NCHAR(34)+'synthetic'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(91)+''+NCHAR(93)+','+NCHAR(34)+'query'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(123)+''+NCHAR(125)+','+NCHAR(34)+'session'+NCHAR(34)+''+NCHAR(58)+''+NCHAR(123)+''+NCHAR(125)+''+NCHAR(125)+''+NCHAR(93)+''+NCHAR(93)+''))\\n     WITH ([result_id] UNIQUEIDENTIFIER '$[0]',\\n          [result_vars] NVARCHAR(MAX) '$[1]' AS JSON) AS [row]\\nOUTER APPLY (SELECT ISNULL((SELECT (SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\n                     FROM [dbo].[user] AS [t_user1]\\n                     FOR JSON PATH, INCLUDE_NULL_VALUES), '[]')) AS [user]\\n             FOR JSON PATH, INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER), '[]')) \\nAS [result]([json])\\nFOR JSON PATH, INCLUDE_NULL_VALUES), '[]')\",\n        \"  |--Compute Scalar(DEFINE:([Expr1010]=isnull([Expr1008],CONVERT_IMPLICIT(nvarchar(max),'[]',0))))\",\n        \"       |--UDX((OPENJSON_EXPLICIT.[result_id], [Expr1007]))\",\n        \"            |--Nested Loops(Left Outer Join)\",\n        \"                 |--Table-valued function\",\n        \"                 |--Compute Scalar(DEFINE:([Expr1007]=isnull([Expr1005],CONVERT_IMPLICIT(nvarchar(max),'[]',0))))\",\n        \"                      |--UDX(([Expr1004]))\",\n        \"                           |--Compute Scalar(DEFINE:([Expr1004]=isnull([Expr1001],CONVERT_IMPLICIT(nvarchar(max),'[]',0))))\",\n        \"                                |--UDX(([t_user1].[name]))\",\n        \"                                     |--Clustered Index Scan(OBJECT:([master].[dbo].[user].[PK__user__3213E83F9704D3EC] AS [t_user1]))\"\n    ],\n    \"variables\": {\n        \"synthetic\": [],\n        \"query\": {},\n        \"session\": {}\n    }\n}\n")),(0,s.kt)("h2",{id:"disabling-explain-api"},"Disabling Explain API"),(0,s.kt)("p",null,"The Explain API is part of the ",(0,s.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/api-reference/metadata-api/index"},"Metadata API")," and can\nonly be disabled by disabling the same."))}S.isMDXComponent=!0}}]);