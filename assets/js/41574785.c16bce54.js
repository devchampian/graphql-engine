"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[541],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},22138:function(e,n,t){var a=t(67294),i=t(57932),r=t(72389),o=t(86010),l=t(71077);n.Z=function(e){var n=e.query,t=e.variables,s=e.response,u=e.viewOnly,p=void 0===u||u,c=(0,r.Z)();return a.createElement("div",{className:"graphiql "+(0,o.Z)({"with-vars":!!t,"view-only":p})},a.createElement(i.ZP,{readOnly:p,editorTheme:"dracula",schema:null,fetcher:c?(0,l.n)({url:"https://hasura.io/graphql"}):function(){return null},query:n,variables:t,response:s}))}},94689:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=t(83117),i=t(80102),r=(t(67294),t(3905)),o=t(22138),l=["components"],s={description:"Model one-to-many relationships in Hasura",keywords:["hasura","docs","schema","relationship","one-to-many","1-n"],sidebar_position:3,sidebar_label:"One-to-many relationship"},u="Modelling one-to-many table relationships",p={unversionedId:"graphql/core/guides/data-modelling/one-to-many",id:"graphql/core/guides/data-modelling/one-to-many",title:"Modelling one-to-many table relationships",description:"Model one-to-many relationships in Hasura",source:"@site/docs/graphql/core/guides/data-modelling/one-to-many.mdx",sourceDirName:"graphql/core/guides/data-modelling",slug:"/graphql/core/guides/data-modelling/one-to-many",permalink:"/docs/latest/graphql/core/guides/data-modelling/one-to-many",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/guides/data-modelling/one-to-many.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Model one-to-many relationships in Hasura",keywords:["hasura","docs","schema","relationship","one-to-many","1-n"],sidebar_position:3,sidebar_label:"One-to-many relationship"},sidebar:"docsSidebar",previous:{title:"One-to-one relationship",permalink:"/docs/latest/graphql/core/guides/data-modelling/one-to-one"},next:{title:"Many-to-many relationship",permalink:"/docs/latest/graphql/core/guides/data-modelling/many-to-many"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Set up a table relationship in the database",id:"step-1-set-up-a-table-relationship-in-the-database",level:2},{value:"Step 2: Set up GraphQL relationships",id:"step-2-set-up-graphql-relationships",level:2},{value:"Query using one-to-many relationships",id:"query-using-one-to-many-relationships",level:2},{value:"Insert using one-to-many relationships",id:"insert-using-one-to-many-relationships",level:2}],m={toc:d};function h(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modelling-one-to-many-table-relationships"},"Modelling one-to-many table relationships"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"one-to-many")," relationship between two tables can be established via a\n",(0,r.kt)("strong",{parentName:"p"},"foreign key constraint"),"."),(0,r.kt)("p",null,"Say we have the following two tables in our database schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"authors (\n  id SERIAL PRIMARY KEY,\n  name TEXT\n)\n\narticles (\n  id SERIAL PRIMARY KEY,\n  author_id INT\n  title TEXT\n  ...\n)\n")),(0,r.kt)("p",null,"These two tables are related via a ",(0,r.kt)("inlineCode",{parentName:"p"},"one-to-many")," relationship. i.e:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an ",(0,r.kt)("inlineCode",{parentName:"li"},"author")," can have many ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")),(0,r.kt)("li",{parentName:"ul"},"an ",(0,r.kt)("inlineCode",{parentName:"li"},"article")," has one ",(0,r.kt)("inlineCode",{parentName:"li"},"author"))),(0,r.kt)("h2",{id:"step-1-set-up-a-table-relationship-in-the-database"},"Step 1: Set up a table relationship in the database"),(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"one-to-many")," relationship can be established in the database by:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Adding a ",(0,r.kt)("strong",{parentName:"li"},"foreign key constraint")," from the ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," table to the\n",(0,r.kt)("inlineCode",{parentName:"li"},"authors")," table using the ",(0,r.kt)("inlineCode",{parentName:"li"},"author_id")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," columns of the tables\nrespectively.")),(0,r.kt)("p",null,"This will ensure that the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"author_id")," column in the ",(0,r.kt)("inlineCode",{parentName:"p"},"articles"),"\ntable is present in the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"authors")," table."),(0,r.kt)("h2",{id:"step-2-set-up-graphql-relationships"},"Step 2: Set up GraphQL relationships"),(0,r.kt)("p",null,"To access the nested objects via the GraphQL API,\n",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/databases/postgres/schema/table-relationships/create"},"create the following relationships"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array relationship, ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"authors")," table using\n",(0,r.kt)("inlineCode",{parentName:"li"},"articles :: author_id -> id")),(0,r.kt)("li",{parentName:"ul"},"Object relationship, ",(0,r.kt)("inlineCode",{parentName:"li"},"author")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," table using\n",(0,r.kt)("inlineCode",{parentName:"li"},"author_id -> authors :: id"))),(0,r.kt)("h2",{id:"query-using-one-to-many-relationships"},"Query using one-to-many relationships"),(0,r.kt)("p",null,"We can now:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"fetch a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"authors")," with their ",(0,r.kt)("inlineCode",{parentName:"li"},"articles"),":")),(0,r.kt)(o.Z,{query:"query {\n    authors {\n      id\n      name\n      articles {\n        id\n        title\n      }\n    }\n }",response:'{\n  "data": {\n    "authors": [\n      {\n        "id": 1,\n        "name": "Justin",\n        "articles": [\n          {\n            "id": 15,\n            "title": "vel dapibus at"\n          },\n          {\n            "id": 16,\n            "title": "sem duis aliquam"\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "name": "Beltran",\n        "articles": [\n          {\n            "id": 2,\n            "title": "a nibh"\n          },\n          {\n            "id": 9,\n            "title": "sit amet"\n          }\n        ]\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"fetch a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," with their ",(0,r.kt)("inlineCode",{parentName:"li"},"author"),":")),(0,r.kt)(o.Z,{query:"query {\n    articles {\n      id\n      title\n      author {\n        id\n        name\n      }\n    }\n }",response:'{\n  "data": {\n    "articles": [\n      {\n        "id": 1,\n        "title": "sit amet",\n        "author": {\n          "id": 4,\n          "name": "Anjela"\n        }\n      },\n      {\n        "id": 2,\n        "title": "a nibh",\n        "author": {\n          "id": 2,\n          "name": "Beltran"\n        }\n      }\n    ]\n  }\n }',mdxType:"GraphiQLIDE"}),(0,r.kt)("h2",{id:"insert-using-one-to-many-relationships"},"Insert using one-to-many relationships"),(0,r.kt)("p",null,"We can now:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"insert an ",(0,r.kt)("inlineCode",{parentName:"li"},"author")," with their ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," where the author might\nalready exist (assume unique ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"author"),"):")),(0,r.kt)(o.Z,{query:'mutation UpsertAuthorWithArticles {\n  insert_author(objects: {\n    name: "Felix",\n    articles: {\n      data: [\n        {\n          title: "Article 1",\n          content: "Article 1 content"\n        },\n        {\n          title: "Article 2",\n          content: "Article 2 content"\n        }\n      ]\n    }\n  },\n    on_conflict: {\n      constraint: author_name_key,\n      update_columns: [name]\n    }\n  ) {\n    returning {\n      name\n      articles {\n        title\n        content\n      }\n    }\n  }\n }',response:'{\n  "data": {\n    "insert_author": {\n      "returning": [\n        {\n          "name": "Felix",\n          "articles": [\n            {\n              "title": "Article 1",\n              "content": "Article 1 content"\n            },\n            {\n              "title": "Article 2",\n              "content": "Article 2 content"\n            }\n          ]\n        }\n      ]\n    }\n  }\n }',mdxType:"GraphiQLIDE"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"insert ",(0,r.kt)("inlineCode",{parentName:"li"},"articles")," with their ",(0,r.kt)("inlineCode",{parentName:"li"},"author")," where the ",(0,r.kt)("inlineCode",{parentName:"li"},"author")," might\nalready exist (assume unique ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"author"),"):")),(0,r.kt)(o.Z,{query:'mutation upsertArticleWithAuthors {\n  insert_article(objects: [\n    {\n      title: "Article 1",\n      content: "Article 1 content",\n      author: {\n        data: {\n          name: "Alice"\n        },\n        on_conflict: {\n          constraint: author_name_key,\n          update_columns: [name]\n        }\n      }\n    },\n    {\n      title: "Article 2",\n      content: "Article 2 content",\n      author: {\n        data: {\n          name: "Alice"\n        },\n        on_conflict: {\n          constraint: author_name_key,\n          update_columns: [name]\n        }\n      }\n    }\n  ]) {\n    returning {\n      title\n      content\n      author {\n        name\n      }\n    }\n  }\n }',response:'{\n  "data": {\n    "insert_article": {\n      "returning": [\n        {\n          "title": "Article 1",\n          "content": "Article 1 content",\n          "author": {\n            "name": "Alice"\n          }\n        },\n        {\n          "title": "Article 2",\n          "content": "Article 2 content",\n          "author": {\n            "name": "Alice"\n          }\n        }\n      ]\n    }\n  }\n }',mdxType:"GraphiQLIDE"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can avoid the ",(0,r.kt)("inlineCode",{parentName:"p"},"on_conflict")," clause if you will never have conflicts."))))}h.isMDXComponent=!0}}]);