"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6216],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return a?r.createElement(d,s(s({ref:t},p),{},{components:a})):r.createElement(d,s({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},27464:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return h}});var r=a(83117),n=a(80102),o=(a(67294),a(3905)),s=["components"],i={slug:"index",description:"Manage remote relationships with Postgres in Hasura",keywords:["hasura","docs","postgres","schema","relationship","remote relationship"]},l="Postgres: Remote relationships",c={unversionedId:"graphql/core/databases/postgres/schema/remote-relationships/index",id:"graphql/core/databases/postgres/schema/remote-relationships/index",title:"Postgres: Remote relationships",description:"Manage remote relationships with Postgres in Hasura",source:"@site/docs/graphql/core/databases/postgres/schema/remote-relationships/index.mdx",sourceDirName:"graphql/core/databases/postgres/schema/remote-relationships",slug:"/graphql/core/databases/postgres/schema/remote-relationships/index",permalink:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/index",editUrl:"https://github.com/hasura/graphql-engine/edit/master/docs/docs/graphql/core/databases/postgres/schema/remote-relationships/index.mdx",tags:[],version:"current",frontMatter:{slug:"index",description:"Manage remote relationships with Postgres in Hasura",keywords:["hasura","docs","postgres","schema","relationship","remote relationship"]},sidebar:"docsSidebar",previous:{title:"Database modelling",permalink:"/docs/latest/graphql/core/databases/postgres/schema/table-relationships/database-modelling"},next:{title:"Remote database relationships",permalink:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-source-relationships"}},p={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Benefits",id:"benefits",level:2}],u={toc:h};function m(e){var t=e.components,a=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"postgres-remote-relationships"},"Postgres: Remote relationships"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,'Remote relationships (aka "remote joins") allow you to join data across\ntables and remote data sources. The remote data source can either be a\n',(0,o.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/remote-schemas/index"},"remote schema"),", a table from a second database source,\nor the type returned from an ",(0,o.kt)("a",{parentName:"p",href:"/docs/latest/graphql/core/actions/index"},"action"),'. Once you create\nrelationships between types from your database tables and types created\nfrom APIs or actions, you can then "join" them by running GraphQL\nqueries.'),(0,o.kt)("p",null,"See the following guides on how to create different types of remote\nrelationships:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-source-relationships"},"Remote database relationships"),": To join data across tables between two different database sources, such as order information stored in a SQL Server database,\nand user information stored in a separate Postgres database."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-schema-relationships"},"Remote schema relationships"),": To join data across tables and remote GraphQL APIs, such as custom GraphQL servers you write, third party SaaS APIs,\nor even other Hasura instances. For example, you can join customer data from your tables with account data from Stripe, Spotify, or Auth0."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/action-relationships"},"Action relationships"),": To join data across tables and actions (i.e. Rest APIs).\nFor example, you can join ",(0,o.kt)("inlineCode",{parentName:"li"},"user")," data from your database with the response from a ",(0,o.kt)("inlineCode",{parentName:"li"},"createUser")," action, using the ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," field.")),(0,o.kt)("h2",{id:"benefits"},"Benefits"),(0,o.kt)("p",null,"Hasura's remote joins architecture provides the following benefits."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Security"),": Hasura's ",(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/auth/authorization/index"},"authorization model")," gives\nyou role-based access control. This extends to actions and remote\nschemas as well. In actions, you can go to the ",(0,o.kt)("inlineCode",{parentName:"li"},"Permissions")," tab and\nchoose which fields to expose for which roles. For remote schemas,\nHasura will ",(0,o.kt)("a",{parentName:"li",href:"/docs/latest/graphql/core/remote-schemas/auth/index"},"forward your session variables"),"\nwhich can be used to implement custom authorization in your remote\nschemas. Native role-based permissions on remote schemas is in the\nworks."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Performance"),": Hasura strives for optimal performance. It creates\nan efficient execution plan which pushes down most of the\nheavy-lifting involved to underlying sources. For example, Hasura\ncreates a single efficient query to your database and batches calls\nto remote schemas to avoid the ",(0,o.kt)("a",{parentName:"li",href:"https://hasura.io/learn/graphql/intro-graphql/graphql-server/"},"n+1\nproblem"),"\n. More improvements to performance are upcoming."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Schema integrity & consistency"),": Hasura has metadata consistency\nchecks at every level. Whenever you add a table, remote schema, or\naction, Hasura makes sure that the graph that is exposed is\nconsistent, and that all the relationships make sense at a type\nlevel. This helps you in creating robust workflows to test changes\nin your CI and making safe deployments of your unified graph."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Data federation"),": With remote joins, the join, authorization, and\nconsistency checks of added sources all happen at the Hasura layer\nvia metadata. This allows underlying data sources and APIs to evolve\nindependently. Your applications have a unified API to query the\nfull data landscape in your org.")))}m.isMDXComponent=!0}}]);